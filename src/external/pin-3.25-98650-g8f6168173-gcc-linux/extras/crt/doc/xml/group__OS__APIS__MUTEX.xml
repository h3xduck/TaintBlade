<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__OS__APIS__MUTEX" kind="group">
    <compoundname>OS_APIS_MUTEX</compoundname>
    <title>Mutex</title>
    <innerclass refid="struct__OS__APIS__MUTEX__TYPE" prot="public">_OS_APIS_MUTEX_TYPE</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__OS__APIS__MUTEX_1gababa2660f850ebc2c791de49f0cf8703" prot="public" static="no">
        <type>struct <ref refid="struct__OS__APIS__MUTEX__TYPE" kindref="compound">_OS_APIS_MUTEX_TYPE</ref></type>
        <definition>typedef struct _OS_APIS_MUTEX_TYPE OS_MUTEX_TYPE_IMPL</definition>
        <argsstring></argsstring>
        <name>OS_MUTEX_TYPE_IMPL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This type holds a representation of a mutex.</para>
<para><simplesect kind="par"><title>Availability:</title><para><itemizedlist>
<listitem><para><bold>O/S</bold>: Windows, Linux &amp; macOS*</para>
</listitem><listitem><para><bold>CPU:</bold> All </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/os-apis/00-export-include/os-apis/mutex.h" line="42" column="20"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__OS__APIS__MUTEX_1gaef7ca0852181a3b3c9745d9d3ce45e42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OS_MutexInit</definition>
        <argsstring>(volatile OS_MUTEX_TYPE *lock)</argsstring>
        <name>OS_MutexInit</name>
        <param>
          <type>volatile OS_MUTEX_TYPE *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize a mutex. A mutex must be initialized before being used. Use this function to initialize the mutex or use one of the static initializers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lock</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex to initialize.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Availability:</title><para><itemizedlist>
<listitem><para><bold>O/S</bold>: Windows, Linux &amp; macOS*</para>
</listitem><listitem><para><bold>CPU:</bold> All </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/os-apis/00-export-include/os-apis/mutex.h" line="123" column="6" declfile="Source/os-apis/00-export-include/os-apis/mutex.h" declline="123" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__OS__APIS__MUTEX_1ga0a8f7f4b5b90ed5a5817d490b0b9467d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OS_MutexRecursiveInit</definition>
        <argsstring>(volatile OS_MUTEX_TYPE *lock)</argsstring>
        <name>OS_MutexRecursiveInit</name>
        <param>
          <type>volatile OS_MUTEX_TYPE *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initialize a recursive mutex. A mutex must be initialized before being used. Use this function to initialize a recursive mutex or use one of the static initializers.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lock</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex to initialize.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Availability:</title><para><itemizedlist>
<listitem><para><bold>O/S</bold>: Windows, Linux &amp; macOS*</para>
</listitem><listitem><para><bold>CPU:</bold> All </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/os-apis/00-export-include/os-apis/mutex.h" line="136" column="6" declfile="Source/os-apis/00-export-include/os-apis/mutex.h" declline="136" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__OS__APIS__MUTEX_1ga4b196034c3784f2938292ebd8f08ae2c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OS_MutexDestroy</definition>
        <argsstring>(volatile OS_MUTEX_TYPE *lock)</argsstring>
        <name>OS_MutexDestroy</name>
        <param>
          <type>volatile OS_MUTEX_TYPE *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Destroys a mutex after it is no longer in use.</para>
<para><simplesect kind="note"><para>The behavior of a mutex after it was destroyed is undefined. It is the responsibility of the user to verify that no other thread is using the mutex when it comes to destroy it.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lock</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex to destroy.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Availability:</title><para><itemizedlist>
<listitem><para><bold>O/S</bold>: Windows, Linux &amp; macOS*</para>
</listitem><listitem><para><bold>CPU:</bold> All </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/os-apis/00-export-include/os-apis/mutex.h" line="151" column="6" declfile="Source/os-apis/00-export-include/os-apis/mutex.h" declline="151" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__OS__APIS__MUTEX_1gae9228ec7770c7df546748dc61a1c702d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OS_MutexLock</definition>
        <argsstring>(volatile OS_MUTEX_TYPE *lock)</argsstring>
        <name>OS_MutexLock</name>
        <param>
          <type>volatile OS_MUTEX_TYPE *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Aquire a mutex, blocks until the mutex becomes available (according to the mutex&apos;s semantics).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lock</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex to acquire.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Availability:</title><para><itemizedlist>
<listitem><para><bold>O/S</bold>: Windows, Linux &amp; macOS*</para>
</listitem><listitem><para><bold>CPU:</bold> All </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/os-apis/00-export-include/os-apis/mutex.h" line="162" column="6" declfile="Source/os-apis/00-export-include/os-apis/mutex.h" declline="162" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__OS__APIS__MUTEX_1ga7bf7a24aa6797e78a5c4464fc8f005d8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void OS_MutexLockTid</definition>
        <argsstring>(volatile OS_MUTEX_TYPE *lock, NATIVE_TID myTid)</argsstring>
        <name>OS_MutexLockTid</name>
        <param>
          <type>volatile OS_MUTEX_TYPE *</type>
          <declname>lock</declname>
        </param>
        <param>
          <type><ref refid="group__OS__APIS__TYPES_1ga20167a3cedec6512ccdc030b50ee780b" kindref="member">NATIVE_TID</ref></type>
          <declname>myTid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Aquire a mutex, blocks until the mutex becomes available (according to the mutex&apos;s semantics). This function is similar to <ref refid="group__OS__APIS__MUTEX_1gae9228ec7770c7df546748dc61a1c702d" kindref="member">OS_MutexLock()</ref> except that it accept as an argument the thread ID of the thread that want to acquire the lock (which is usually the current thread).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lock</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex to acquire. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tid</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread ID of the thread that wants to acquire the mutex. This argument can be INVALID_NATIVE_TID if the thread ID is not known (e.g. in a mutex of type OS_MUTEX_DEPTH_SIMPLE).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Availability:</title><para><itemizedlist>
<listitem><para><bold>O/S</bold>: Windows, Linux &amp; macOS*</para>
</listitem><listitem><para><bold>CPU:</bold> All </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/os-apis/00-export-include/os-apis/mutex.h" line="178" column="6" declfile="Source/os-apis/00-export-include/os-apis/mutex.h" declline="178" declcolumn="6"/>
      </memberdef>
      <memberdef kind="function" id="group__OS__APIS__MUTEX_1ga42d14da2dc5fea9a34eefe29c68f2ece" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__OS__APIS__TYPES_1gad312c486942310e24394e7ea81f8f7e1" kindref="member">BOOL_T</ref></type>
        <definition>BOOL_T OS_MutexTryLock</definition>
        <argsstring>(volatile OS_MUTEX_TYPE *lock)</argsstring>
        <name>OS_MutexTryLock</name>
        <param>
          <type>volatile OS_MUTEX_TYPE *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tries to aquire a mutex:<linebreak/>
<itemizedlist>
<listitem><para>If the mutex is available, acquire it and return true.<linebreak/>
</para>
</listitem><listitem><para>Otherwise, return false.</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lock</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex to acquire.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TRUE</parametername>
</parameternamelist>
<parameterdescription>
<para>If the mutex was acquired.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Availability:</title><para><itemizedlist>
<listitem><para><bold>O/S</bold>: Windows, Linux &amp; macOS*</para>
</listitem><listitem><para><bold>CPU:</bold> All </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/os-apis/00-export-include/os-apis/mutex.h" line="193" column="8" declfile="Source/os-apis/00-export-include/os-apis/mutex.h" declline="193" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__OS__APIS__MUTEX_1ga44269b9d9f8f275b1357cc38a8b364c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__OS__APIS__TYPES_1gad312c486942310e24394e7ea81f8f7e1" kindref="member">BOOL_T</ref></type>
        <definition>BOOL_T OS_MutexTryLockTid</definition>
        <argsstring>(volatile OS_MUTEX_TYPE *lock0, NATIVE_TID myTid)</argsstring>
        <name>OS_MutexTryLockTid</name>
        <param>
          <type>volatile OS_MUTEX_TYPE *</type>
          <declname>lock0</declname>
        </param>
        <param>
          <type><ref refid="group__OS__APIS__TYPES_1ga20167a3cedec6512ccdc030b50ee780b" kindref="member">NATIVE_TID</ref></type>
          <declname>myTid</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tries to aquire a mutex:<linebreak/>
<itemizedlist>
<listitem><para>If the mutex is available, acquire it and return true.<linebreak/>
</para>
</listitem><listitem><para>Otherwise, return false. This function is similar to <ref refid="group__OS__APIS__MUTEX_1ga42d14da2dc5fea9a34eefe29c68f2ece" kindref="member">OS_MutexTryLock()</ref> except that it accept as an argument the thread ID of the thread that want to acquire the lock (which is usually the current thread).</para>
</listitem></itemizedlist>
</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lock</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex to acquire. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tid</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread ID of the thread that wants to acquire the mutex. This argument can be INVALID_NATIVE_TID if the thread ID is not known (e.g. in a mutex of type OS_MUTEX_DEPTH_SIMPLE).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TRUE</parametername>
</parameternamelist>
<parameterdescription>
<para>If the mutex was acquired.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Availability:</title><para><itemizedlist>
<listitem><para><bold>O/S</bold>: Windows, Linux &amp; macOS*</para>
</listitem><listitem><para><bold>CPU:</bold> All </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/os-apis/00-export-include/os-apis/mutex.h" line="213" column="8" declfile="Source/os-apis/00-export-include/os-apis/mutex.h" declline="213" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__OS__APIS__MUTEX_1gaae087bbdeb032a9c6b1c800d68ae279e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__OS__APIS__TYPES_1gad312c486942310e24394e7ea81f8f7e1" kindref="member">BOOL_T</ref></type>
        <definition>BOOL_T OS_MutexIsLocked</definition>
        <argsstring>(volatile OS_MUTEX_TYPE *lock)</argsstring>
        <name>OS_MutexIsLocked</name>
        <param>
          <type>volatile OS_MUTEX_TYPE *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks whether a mutex state is locked.<linebreak/>
Doesn&apos;t affect the mutex state and doesn&apos;t block.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lock</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex to check.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TRUE</parametername>
</parameternamelist>
<parameterdescription>
<para>If the mutex is locked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Availability:</title><para><itemizedlist>
<listitem><para><bold>O/S</bold>: Windows, Linux &amp; macOS*</para>
</listitem><listitem><para><bold>CPU:</bold> All </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/os-apis/00-export-include/os-apis/mutex.h" line="227" column="8" declfile="Source/os-apis/00-export-include/os-apis/mutex.h" declline="227" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__OS__APIS__MUTEX_1gab4c439cf86c9e545660138a756937069" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__OS__APIS__TYPES_1gad312c486942310e24394e7ea81f8f7e1" kindref="member">BOOL_T</ref></type>
        <definition>BOOL_T OS_MutexTimedLock</definition>
        <argsstring>(volatile OS_MUTEX_TYPE *lock, UINT32 timeoutMillis)</argsstring>
        <name>OS_MutexTimedLock</name>
        <param>
          <type>volatile OS_MUTEX_TYPE *</type>
          <declname>lock</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>timeoutMillis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Aquire a mutex, blocks until the mutex becomes available (according to the mutex&apos;s semantics). or &apos;timeoutMillis&apos; milli seconds passed. When &apos;timeoutMillis&apos; is zero, this function is identical to <ref refid="group__OS__APIS__MUTEX_1ga42d14da2dc5fea9a34eefe29c68f2ece" kindref="member">OS_MutexTryLock()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lock</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex to acquire. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeoutMillis</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout to block.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TRUE</parametername>
</parameternamelist>
<parameterdescription>
<para>If the mutex is locked. FALSE If the timeout was expired and the mutex can&apos;t be acquired during that time.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Availability:</title><para><itemizedlist>
<listitem><para><bold>O/S</bold>: Windows, Linux &amp; macOS*</para>
</listitem><listitem><para><bold>CPU:</bold> All </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/os-apis/00-export-include/os-apis/mutex.h" line="244" column="8" declfile="Source/os-apis/00-export-include/os-apis/mutex.h" declline="244" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__OS__APIS__MUTEX_1gab32e71fd2576d7a2cb71644d323784a6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__OS__APIS__TYPES_1gad312c486942310e24394e7ea81f8f7e1" kindref="member">BOOL_T</ref></type>
        <definition>BOOL_T OS_MutexTimedLockTid</definition>
        <argsstring>(volatile OS_MUTEX_TYPE *lock0, NATIVE_TID myTid, UINT32 timeoutMillis)</argsstring>
        <name>OS_MutexTimedLockTid</name>
        <param>
          <type>volatile OS_MUTEX_TYPE *</type>
          <declname>lock0</declname>
        </param>
        <param>
          <type><ref refid="group__OS__APIS__TYPES_1ga20167a3cedec6512ccdc030b50ee780b" kindref="member">NATIVE_TID</ref></type>
          <declname>myTid</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>timeoutMillis</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Aquire a mutex, blocks until the mutex becomes available (according to the mutex&apos;s semantics). or &apos;timeoutMillis&apos; milli seconds passed. When &apos;timeoutMillis&apos; is zero, this function is identical to <ref refid="group__OS__APIS__MUTEX_1ga42d14da2dc5fea9a34eefe29c68f2ece" kindref="member">OS_MutexTryLock()</ref>. This function is similar to <ref refid="group__OS__APIS__MUTEX_1gab4c439cf86c9e545660138a756937069" kindref="member">OS_MutexTimedLock()</ref> except that it accept as an argument the thread ID of the thread that want to acquire the lock (which is usually the current thread).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lock</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex to acquire. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">timeoutMillis</parametername>
</parameternamelist>
<parameterdescription>
<para>The timeout to block. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">tid</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread ID of the thread that wants to acquire the mutex. This argument can be INVALID_NATIVE_TID if the thread ID is not known (e.g. in a mutex of type OS_MUTEX_DEPTH_SIMPLE).</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TRUE</parametername>
</parameternamelist>
<parameterdescription>
<para>If the mutex is locked. FALSE If the timeout was expired and the mutex can&apos;t be acquired during that time.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Availability:</title><para><itemizedlist>
<listitem><para><bold>O/S</bold>: Windows, Linux &amp; macOS*</para>
</listitem><listitem><para><bold>CPU:</bold> All </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/os-apis/00-export-include/os-apis/mutex.h" line="266" column="8" declfile="Source/os-apis/00-export-include/os-apis/mutex.h" declline="266" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__OS__APIS__MUTEX_1ga0c35e8a455039efb359a45edacc93dc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__OS__APIS__TYPES_1ga20167a3cedec6512ccdc030b50ee780b" kindref="member">NATIVE_TID</ref></type>
        <definition>NATIVE_TID OS_MutexGetOwner</definition>
        <argsstring>(volatile OS_MUTEX_TYPE *lock)</argsstring>
        <name>OS_MutexGetOwner</name>
        <param>
          <type>volatile OS_MUTEX_TYPE *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Queries the owner of a recursive mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lock</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex to query.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>NATIVE_TID</parametername>
</parameternamelist>
<parameterdescription>
<para>The owner of the mutex of INVALID_NATIVE_TID is the mutex is not locked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The return value of this function is undefined for non-recursive (simple) mutex.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><itemizedlist>
<listitem><para><bold>O/S</bold>: Windows, Linux &amp; macOS*</para>
</listitem><listitem><para><bold>CPU:</bold> All </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/os-apis/00-export-include/os-apis/mutex.h" line="281" column="12" declfile="Source/os-apis/00-export-include/os-apis/mutex.h" declline="281" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__OS__APIS__MUTEX_1ga8b36189bf6a40cda48dd14bc909ec048" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 OS_MutexGetRecursionLevel</definition>
        <argsstring>(volatile OS_MUTEX_TYPE *lock)</argsstring>
        <name>OS_MutexGetRecursionLevel</name>
        <param>
          <type>volatile OS_MUTEX_TYPE *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Queries the recursion of a recursive mutex. I.e. the number of times that the unlock functions needs to be called before the mutex can be acquired by other thread.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lock</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex to query.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>UINT32</parametername>
</parameternamelist>
<parameterdescription>
<para>The recursion level of the mutex.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>For non-recursive (simple) mutex, the return value of this function is 1 if the mutex is lock, or 0 if the mutex is unlocked.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><itemizedlist>
<listitem><para><bold>O/S</bold>: Windows, Linux &amp; macOS*</para>
</listitem><listitem><para><bold>CPU:</bold> All </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/os-apis/00-export-include/os-apis/mutex.h" line="298" column="8" declfile="Source/os-apis/00-export-include/os-apis/mutex.h" declline="298" declcolumn="8"/>
      </memberdef>
      <memberdef kind="function" id="group__OS__APIS__MUTEX_1ga7fbc5a1db4708f0360099fef9ab708b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__OS__APIS__TYPES_1gad312c486942310e24394e7ea81f8f7e1" kindref="member">BOOL_T</ref></type>
        <definition>BOOL_T OS_MutexUnlock</definition>
        <argsstring>(volatile OS_MUTEX_TYPE *lock)</argsstring>
        <name>OS_MutexUnlock</name>
        <param>
          <type>volatile OS_MUTEX_TYPE *</type>
          <declname>lock</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Releases a mutex.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">lock</parametername>
</parameternamelist>
<parameterdescription>
<para>The mutex to release.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TRUE</parametername>
</parameternamelist>
<parameterdescription>
<para>If the mutex was locked and as a result of this call was unlocked.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Availability:</title><para><itemizedlist>
<listitem><para><bold>O/S</bold>: Windows, Linux &amp; macOS*</para>
</listitem><listitem><para><bold>CPU:</bold> All </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/os-apis/00-export-include/os-apis/mutex.h" line="311" column="8" declfile="Source/os-apis/00-export-include/os-apis/mutex.h" declline="311" declcolumn="8"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__OS__APIS__MUTEX_1ga638ee54875f26596da50328a20af8b82" prot="public" static="no">
        <name>OS_APIS_MUTEX_DEPTH_SIMPLE_INITIALIZER</name>
        <initializer>    {                                               \
        OS_APIS_MUTEX_IMPL_DEPTH_SIMPLE_INITIALIZER \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Static initializer for a mutex. It is guaranteed that a (simple) mutex initialized this way:</para>
<para>OS_MUTEX_TYPE mutex = OS_APIS_MUTEX_DEPTH_SIMPLE_INITIALIZER;</para>
<para>Will be initialized before any constuctor will be called. Also, the static initializer for a simple mutex must be all zeros. This is because we want mutex that is initialized in a default way (all zeros according to the C++ standard) will be initialized correctly to a simple mutex.</para>
<para><simplesect kind="par"><title>Availability:</title><para><itemizedlist>
<listitem><para><bold>O/S</bold>: Windows, Linux &amp; macOS*</para>
</listitem><listitem><para><bold>CPU:</bold> All </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/os-apis/00-export-include/os-apis/mutex.h" line="78" column="9" bodyfile="Source/os-apis/00-export-include/os-apis/mutex.h" bodystart="78" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__OS__APIS__MUTEX_1gafd793fbefe953164dadf30802f293b9e" prot="public" static="no">
        <name>OS_APIS_MUTEX_DEPTH_RECURSIVE_INITIALIZER</name>
        <initializer>    {                                                  \
        OS_APIS_MUTEX_IMPL_DEPTH_RECURSIVE_INITIALIZER \
    }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Static initializer for a mutex. It is guaranteed that a (recursive) mutex initialized this way:</para>
<para>OS_MUTEX_TYPE mutex = OS_APIS_MUTEX_DEPTH_SIMPLE_INITIALIZER;</para>
<para>Will be initialized before any constuctor will be called.</para>
<para><simplesect kind="par"><title>Availability:</title><para><itemizedlist>
<listitem><para><bold>O/S</bold>: Windows, Linux &amp; macOS*</para>
</listitem><listitem><para><bold>CPU:</bold> All </para>
</listitem></itemizedlist>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/os-apis/00-export-include/os-apis/mutex.h" line="107" column="9" bodyfile="Source/os-apis/00-export-include/os-apis/mutex.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Implementation of mutex lock. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
