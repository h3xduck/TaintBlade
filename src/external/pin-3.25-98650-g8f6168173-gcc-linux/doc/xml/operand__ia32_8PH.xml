<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="operand__ia32_8PH" kind="file" language="C++">
    <compoundname>operand_ia32.PH</compoundname>
      <sectiondef kind="define">
      <memberdef kind="define" id="operand__ia32_8PH_1a058529ae19184421d8bec276410a040a" prot="public" static="no">
        <name>PIN_G_OPERAND_IA32_PH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="9" column="10" bodyfile="Source/pin/core_ia32/operand_ia32.PH" bodystart="9" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__INS__INSPECTION_1ga68a9e9a74a8028c7563375be7c230f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_OperandCount</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_OperandCount</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ia32 specific stuff related to OPERAND</para>
<para>Tells the number of operands for the instruction. Several other APIs take an operand index as a parameter. Those APIs expect an index in the range [0, n-1], where n is the value returned by <ref refid="group__INS__INSPECTION_1ga68a9e9a74a8028c7563375be7c230f3a" kindref="member">INS_OperandCount()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of operands for the instruction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="22" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="22" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga3390b29d8191050119050c038f9dce8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_OperandElementCount</definition>
        <argsstring>(INS ins, UINT32 opIdx)</argsstring>
        <name>INS_OperandElementCount</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>opIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">opIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>The operand index whose element count is required. The operand can be either a memory operand or a register operand. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of elements in the requested operand. For AMX instructions, this function will return 0 since the number is elements is not known at instrumentation time. See <ref refid="group__INS__INSPECTION_1ga75ca91e0ea573688572123db944fcda3" kindref="member">INS_OperandHasElements</ref>. Returns 1 if this operand has no elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="33" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="33" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga75ca91e0ea573688572123db944fcda3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandHasElements</definition>
        <argsstring>(INS ins, UINT32 opIdx)</argsstring>
        <name>INS_OperandHasElements</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>opIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">opIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>The operand index. The operand can be either a memory operand or a register operand. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the requested operand has elements, FALSE otherwise. For all instructions except AMX, this function will return TRUE when the value returned by INS_OperandElementCount is greater than 1. AMX is a special case because the number of elements is determined dynamically by both the encoded instruction and the tile configuration metadata (which is set dynamically with LDTILECFG). Therefore <ref refid="group__INS__INSPECTION_1ga3390b29d8191050119050c038f9dce8a" kindref="member">INS_OperandElementCount()</ref> cannot return its value at instrumentation time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="46" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="46" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga1150b9fcd86aaf0807683412b909f22a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USIZE</type>
        <definition>USIZE INS_OperandElementSize</definition>
        <argsstring>(INS ins, UINT32 opIdx)</argsstring>
        <name>INS_OperandElementSize</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>opIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">opIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>The operand index whose element size is required. The operand can be either a memory operand or a register operand. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the size of the requested operand element in bytes. For scalar instructions, this function will return the same as INS_OperandSize. For vector instructions, this function will return the size of a single element. For vscatter/vgather, this function will return the size of a single load/store. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="57" column="14" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="57" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga210efa4d05fce960cf32656d10df6baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_OperandNameId</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandNameId</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="61" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="61" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga742593b20994f62aaaa841794b97dba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandIsMemory</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandIsMemory</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this operand is a memory reference</para>
</simplesect>
Note: this does not include LEA operands. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="68" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="68" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gae726545c04460e7696bb284df320f4f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
        <definition>REG INS_OperandMemoryBaseReg</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandMemoryBaseReg</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>register used as base register in memory operand, or <ref refid="group__REG_1gadc4695959b1508fbcf668927ab92ef18" kindref="member">REG_INVALID()</ref> Effective address = Displacement + BaseReg + IndexReg * Scale </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="74" column="12" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="74" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaaa9a52ca96e3cc0bc5150fa9e7f87c0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
        <definition>REG INS_OperandMemoryIndexReg</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandMemoryIndexReg</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>register used as index register in memory operand, or <ref refid="group__REG_1gadc4695959b1508fbcf668927ab92ef18" kindref="member">REG_INVALID()</ref> Effective address = Displacement + BaseReg + IndexReg * Scale </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="80" column="12" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="80" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab55682e63100b3ebc5326237ad83c171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
        <definition>REG INS_OperandMemorySegmentReg</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandMemorySegmentReg</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>register used as segment register in memory operand, or <ref refid="group__REG_1gadc4695959b1508fbcf668927ab92ef18" kindref="member">REG_INVALID()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="85" column="12" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="85" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga8a20d2d4be126df6469a5161f97eca6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_OperandMemoryScale</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandMemoryScale</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>scale used for addressing in memory operand. Effective address = Displacement + BaseReg + IndexReg * Scale </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="91" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="91" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab15523f2c2dc93599a8f59dd61057973" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRDELTA</type>
        <definition>ADDRDELTA INS_OperandMemoryDisplacement</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandMemoryDisplacement</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The memory displacement of an instrucation with memory operand. </para>
</simplesect>
<simplesect kind="note"><para>the displacement is a signed number. Effective address = Displacement + BaseReg + IndexReg * Scale </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="98" column="18" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="98" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga1c5fa1253299975b9038e2f839f137b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandIsFixedMemop</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandIsFixedMemop</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if memory operand uses predefined base register and this register can not be changed Example: movs ds:(esi), es:(edi) There are two fixed operands </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="106" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="106" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab02e5d35eda9ffcb9a208120d932b4de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID</type>
        <definition>VOID GetNumberAndSizeOfMemAccesses</definition>
        <argsstring>(INS ins, int *numAccesses, int *accessSize, int *indexSize)</argsstring>
        <name>GetNumberAndSizeOfMemAccesses</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>numAccesses</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>accessSize</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>indexSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="110" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="110" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaa01f153aa19aeb478458cf2042d05a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_MemoryOperandCount</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_MemoryOperandCount</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of memory operands. Please note <ref refid="group__INS__INSPECTION_1ga48e9034dc81f2a2e5f1a61ec4c68b497" kindref="member">INS_MemoryOperandElementCount</ref> for reading the number of elements per memory operand.</para>
</simplesect>
<simplesect kind="note"><para>Segment prefix operands (i.e. gs:0x14 ) are memory operands. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="119" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="119" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga48e9034dc81f2a2e5f1a61ec4c68b497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_MemoryOperandElementCount</definition>
        <argsstring>(INS ins, UINT32 memoryOp)</argsstring>
        <name>INS_MemoryOperandElementCount</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>memoryOp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of elements in the requested memory operand. For instructions where the memory operands has not elemenets, returns 1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="125" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="125" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaa905931fcdcac481c789192e0bd30014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USIZE</type>
        <definition>USIZE INS_MemoryOperandSize</definition>
        <argsstring>(INS ins, UINT32 memoryOp)</argsstring>
        <name>INS_MemoryOperandSize</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>memoryOp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>the instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">memoryOp</parametername>
</parameternamelist>
<parameterdescription>
<para>the memory operand index whose size is required.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the size of the requested memory operand in bytes (for REPped instructions this is the size accessed in each iteration of the implicit loop). The operand of instructions with scattered memory access (like vscatter/vgather) does not have a size, and this function should not be called for these functions. Use INS_HasScatteredMemoryAccess before calling this function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="137" column="14" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="137" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gafa78b79577f4cdf4ca898b13e324d4f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USIZE</type>
        <definition>USIZE INS_MemoryOperandElementSize</definition>
        <argsstring>(INS ins, UINT32 memoryOp)</argsstring>
        <name>INS_MemoryOperandElementSize</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>memoryOp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>the instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">memoryOp</parametername>
</parameternamelist>
<parameterdescription>
<para>the memory operand index whose element size is required.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the size of the requested memory operand element in bytes. For scalar instructions, this function will return the same as INS_MemoryOperandSize. For vector instructions, this function will return the size of a single element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="147" column="14" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="147" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gac610cf9dbd53deeba31c2277006d70fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandIsAddressGenerator</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandIsAddressGenerator</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this operand generates an address, but the address does not access memory (e.g. load effective address instruction) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="153" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="153" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab2869fa6158976e73fa91fb5a19ad054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandIsBranchDisplacement</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandIsBranchDisplacement</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this operand is a displacement (e.g. branch offset) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="159" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="159" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga2db1205b7749b176d9145d911bad461c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_MemoryOperandIsRead</definition>
        <argsstring>(INS ins, UINT32 memopIdx)</argsstring>
        <name>INS_MemoryOperandIsRead</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>memopIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if memory operand memopIdx is read </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="164" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="164" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab66a50260dde64035e46a831f5d4b1dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_MemoryOperandIsWritten</definition>
        <argsstring>(INS ins, UINT32 memopIdx)</argsstring>
        <name>INS_MemoryOperandIsWritten</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>memopIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if memory operand memopIdx is written </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="169" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="169" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga67a5b6c52c0cae6256557d4bc8729ab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_MemoryOperandIndexToOperandIndex</definition>
        <argsstring>(INS ins, UINT32 memopIdx)</argsstring>
        <name>INS_MemoryOperandIndexToOperandIndex</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>memopIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a memory operand index into a simple operand index.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">memopIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory operand&apos;s index in the range [0, n-1], where n is from <ref refid="group__INS__INSPECTION_1gaa01f153aa19aeb478458cf2042d05a01" kindref="member">INS_MemoryOperandCount()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>operand index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="180" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="180" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gae860ce689d370e278440310b882d0440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandIsReg</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandIsReg</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this operand is a register </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="185" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="185" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaf1084ae5fd648934ffe2b4b12b1df935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandIsSegmentReg</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandIsSegmentReg</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this operand is a segment register </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="190" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="190" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga4b3136c05e383bea3f91a5204b87a570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
        <definition>REG INS_OperandReg</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandReg</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>register name for this operand, may return <ref refid="group__REG_1gadc4695959b1508fbcf668927ab92ef18" kindref="member">REG_INVALID()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="195" column="12" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="195" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga43b03561626b62fd27a0e699692fde04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandIsImmediate</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandIsImmediate</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this operand is an immediate </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="200" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="200" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab53dc2b4142ff9f104cf4a9c4d952845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT64</type>
        <definition>UINT64 INS_OperandImmediate</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandImmediate</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Although return type is UINT64, on 32-bit systems only the lower 32 bits are utilized. To see how to retrieve immediate values with correct width and sign information, see example in test tool PinTools/SimpleExamples/oper-imm.cpp. <simplesect kind="return"><para>immediate value for operand </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="209" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="209" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab022da45d7331aae8b2642a9e8ddbe4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandIsImplicit</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandIsImplicit</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this operand is implied by the opcode (e.g. the stack write in a push instruction) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="215" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="215" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga990a23fc02e9bd79b95a3e9360a1bf87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_RegIsImplicit</definition>
        <argsstring>(INS ins, REG reg)</argsstring>
        <name>INS_RegIsImplicit</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assumes that reg is a PIN register <simplesect kind="return"><para>true if the ins has </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="221" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="221" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga4fc45dd076d7de4fb42ee273d0fb2ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_OperandWidth</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandWidth</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>operand width in bits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="226" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="226" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaf95b32d966c70948bc2bd73226909869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_OperandSize</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandSize</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will generate an error for memory operands in instructions where <ref refid="group__INS__INSPECTION_1gad1ade5b21d590fd2a53b6e98a835c553" kindref="member">INS_HasScatteredMemoryAccess</ref> returns TRUE. <linebreak/>
<simplesect kind="return"><para>operand size in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="232" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="232" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga9233f304c34ac2a24c39345eb31e7b15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandRead</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandRead</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells if an instruction operand is a source; it may also be a destination.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Operand&apos;s index in the range [0, n-1], where n is from <ref refid="group__INS__INSPECTION_1ga68a9e9a74a8028c7563375be7c230f3a" kindref="member">INS_OperandCount()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the operand is a source. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="243" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="243" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga5f878705486eb595557cf1af0f7be562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandWritten</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandWritten</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells if an instruction operand is a destination; it may also be a source.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Operand&apos;s index in the range [0, n-1], where n is from <ref refid="group__INS__INSPECTION_1ga68a9e9a74a8028c7563375be7c230f3a" kindref="member">INS_OperandCount()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the operand is a destination. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="254" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="254" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga717be313a730cb54502d0e01a5529eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandReadOnly</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandReadOnly</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells if an instruction operand is just a source (and not a destination).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Operand&apos;s index in the range [0, n-1], where n is from <ref refid="group__INS__INSPECTION_1ga68a9e9a74a8028c7563375be7c230f3a" kindref="member">INS_OperandCount()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the operand is just a source. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="265" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="265" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga98490395bafb6b8798494a36cd064f09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandWrittenOnly</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandWrittenOnly</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells if an instruction operand is just a destination (and not a source).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Operand&apos;s index in the range [0, n-1], where n is from <ref refid="group__INS__INSPECTION_1ga68a9e9a74a8028c7563375be7c230f3a" kindref="member">INS_OperandCount()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the operand is just a destination. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="276" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="276" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga3de89936066fff8ed6ade7aa8cdb8822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandReadAndWritten</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandReadAndWritten</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells if an instruction operand is both a source and a destination.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Operand&apos;s index in the range [0, n-1], where n is from <ref refid="group__INS__INSPECTION_1ga68a9e9a74a8028c7563375be7c230f3a" kindref="member">INS_OperandCount()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the operand is both a source and a destination. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="287" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="287" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga09a517bd84de8e70d6bfbce932eeffbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
        <definition>REG INS_MaskRegister</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_MaskRegister</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the mask register used in the given instruction if such exist, REG_INVALID otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector instruction in question.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The mask register used in vector instruction, or REG_INVALID if no mask register is used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="296" column="12" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="296" declcolumn="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2020-2021<sp/>Intel<sp/>Corporation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PIN_G_OPERAND_IA32_PH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>duplicate<sp/>inclusion<sp/>of<sp/>operand_ia32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_G_OPERAND_IA32_PH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="group__INS__INSPECTION_1ga68a9e9a74a8028c7563375be7c230f3a" kindref="member">INS_OperandCount</ref>(INS<sp/>ins);</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="group__INS__INSPECTION_1ga3390b29d8191050119050c038f9dce8a" kindref="member">INS_OperandElementCount</ref>(INS<sp/>ins,<sp/>UINT32<sp/>opIdx);</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__INS__INSPECTION_1ga75ca91e0ea573688572123db944fcda3" kindref="member">INS_OperandHasElements</ref>(INS<sp/>ins,<sp/>UINT32<sp/>opIdx);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>USIZE<sp/><ref refid="group__INS__INSPECTION_1ga1150b9fcd86aaf0807683412b909f22a" kindref="member">INS_OperandElementSize</ref>(INS<sp/>ins,<sp/>UINT32<sp/>opIdx);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UINT32<sp/>INS_OperandNameId(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__INS__INSPECTION_1ga742593b20994f62aaaa841794b97dba4" kindref="member">INS_OperandIsMemory</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref><sp/><ref refid="group__INS__INSPECTION_1gae726545c04460e7696bb284df320f4f2" kindref="member">INS_OperandMemoryBaseReg</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref><sp/><ref refid="group__INS__INSPECTION_1gaaa9a52ca96e3cc0bc5150fa9e7f87c0e" kindref="member">INS_OperandMemoryIndexReg</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref><sp/><ref refid="group__INS__INSPECTION_1gab55682e63100b3ebc5326237ad83c171" kindref="member">INS_OperandMemorySegmentReg</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="group__INS__INSPECTION_1ga8a20d2d4be126df6469a5161f97eca6c" kindref="member">INS_OperandMemoryScale</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADDRDELTA<sp/><ref refid="group__INS__INSPECTION_1gab15523f2c2dc93599a8f59dd61057973" kindref="member">INS_OperandMemoryDisplacement</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__INS__INSPECTION_1ga1c5fa1253299975b9038e2f839f137b6" kindref="member">INS_OperandIsFixedMemop</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>VOID<sp/>GetNumberAndSizeOfMemAccesses(INS<sp/>ins,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>numAccesses,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>accessSize,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">*<sp/>indexSize);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="group__INS__INSPECTION_1gaa01f153aa19aeb478458cf2042d05a01" kindref="member">INS_MemoryOperandCount</ref>(INS<sp/>ins);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="group__INS__INSPECTION_1ga48e9034dc81f2a2e5f1a61ec4c68b497" kindref="member">INS_MemoryOperandElementCount</ref>(INS<sp/>ins,<sp/>UINT32<sp/>memoryOp);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>USIZE<sp/><ref refid="group__INS__INSPECTION_1gaa905931fcdcac481c789192e0bd30014" kindref="member">INS_MemoryOperandSize</ref>(INS<sp/>ins,<sp/>UINT32<sp/>memoryOp);</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>USIZE<sp/><ref refid="group__INS__INSPECTION_1gafa78b79577f4cdf4ca898b13e324d4f8" kindref="member">INS_MemoryOperandElementSize</ref>(INS<sp/>ins,<sp/>UINT32<sp/>memoryOp);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__INS__INSPECTION_1gac610cf9dbd53deeba31c2277006d70fd" kindref="member">INS_OperandIsAddressGenerator</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__INS__INSPECTION_1gab2869fa6158976e73fa91fb5a19ad054" kindref="member">INS_OperandIsBranchDisplacement</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__INS__INSPECTION_1ga2db1205b7749b176d9145d911bad461c" kindref="member">INS_MemoryOperandIsRead</ref>(INS<sp/>ins,<sp/>UINT32<sp/>memopIdx);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__INS__INSPECTION_1gab66a50260dde64035e46a831f5d4b1dc" kindref="member">INS_MemoryOperandIsWritten</ref>(INS<sp/>ins,<sp/>UINT32<sp/>memopIdx);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="group__INS__INSPECTION_1ga67a5b6c52c0cae6256557d4bc8729ab8" kindref="member">INS_MemoryOperandIndexToOperandIndex</ref>(INS<sp/>ins,<sp/>UINT32<sp/>memopIdx);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__INS__INSPECTION_1gae860ce689d370e278440310b882d0440" kindref="member">INS_OperandIsReg</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__INS__INSPECTION_1gaf1084ae5fd648934ffe2b4b12b1df935" kindref="member">INS_OperandIsSegmentReg</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref><sp/><ref refid="group__INS__INSPECTION_1ga4b3136c05e383bea3f91a5204b87a570" kindref="member">INS_OperandReg</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="196"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__INS__INSPECTION_1ga43b03561626b62fd27a0e699692fde04" kindref="member">INS_OperandIsImmediate</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UINT64<sp/><ref refid="group__INS__INSPECTION_1gab53dc2b4142ff9f104cf4a9c4d952845" kindref="member">INS_OperandImmediate</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__INS__INSPECTION_1gab022da45d7331aae8b2642a9e8ddbe4c" kindref="member">INS_OperandIsImplicit</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="216"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__INS__INSPECTION_1ga990a23fc02e9bd79b95a3e9360a1bf87" kindref="member">INS_RegIsImplicit</ref>(INS<sp/>ins,<sp/><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref><sp/>reg);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="group__INS__INSPECTION_1ga4fc45dd076d7de4fb42ee273d0fb2ae8" kindref="member">INS_OperandWidth</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="group__INS__INSPECTION_1gaf95b32d966c70948bc2bd73226909869" kindref="member">INS_OperandSize</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__INS__INSPECTION_1ga9233f304c34ac2a24c39345eb31e7b15" kindref="member">INS_OperandRead</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__INS__INSPECTION_1ga5f878705486eb595557cf1af0f7be562" kindref="member">INS_OperandWritten</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__INS__INSPECTION_1ga717be313a730cb54502d0e01a5529eea" kindref="member">INS_OperandReadOnly</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__INS__INSPECTION_1ga98490395bafb6b8798494a36cd064f09" kindref="member">INS_OperandWrittenOnly</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__INS__INSPECTION_1ga3de89936066fff8ed6ade7aa8cdb8822" kindref="member">INS_OperandReadAndWritten</ref>(INS<sp/>ins,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref><sp/><ref refid="group__INS__INSPECTION_1ga09a517bd84de8e70d6bfbce932eeffbd" kindref="member">INS_MaskRegister</ref>(INS<sp/>ins);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PIN_G_OPERAND_IA32_PH</highlight></codeline>
    </programlisting>
    <location file="Source/pin/core_ia32/operand_ia32.PH"/>
  </compounddef>
</doxygen>
