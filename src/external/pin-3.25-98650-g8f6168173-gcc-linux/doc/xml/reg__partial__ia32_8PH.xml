<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="reg__partial__ia32_8PH" kind="file" language="C++">
    <compoundname>reg_partial_ia32.PH</compoundname>
      <sectiondef kind="define">
      <memberdef kind="define" id="reg__partial__ia32_8PH_1afbc43a2bc0775e559e520dd8eaecfdcd" prot="public" static="no">
        <name>PIN_G_REG_PARTIAL_IA32_PH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/base_ia32/reg_partial_ia32.PH" line="9" column="10" bodyfile="Source/pin/base_ia32/reg_partial_ia32.PH" bodystart="9" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__REG_1ga88564562ed9e3c597e84c821075dcd58" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL REG_is_Half16</definition>
        <argsstring>(const REG reg)</argsstring>
        <name>REG_is_Half16</name>
        <param>
          <type>const <ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This file contains REG primitives</para>
<para>Return TRUE if reg is a lower 16-bit register </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/base_ia32/reg_partial_ia32.PH" line="16" column="13" bodyfile="Source/pin/base_ia32/reg_partial_ia32.PH" bodystart="16" bodyend="22"/>
      </memberdef>
      <memberdef kind="function" id="group__REG_1ga2a57f7b290e603305ef83e99da3c85e2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="group__REG_1gaec0c649ef5462f4191f265d607fff05d" kindref="member">REGWIDTH</ref></type>
        <definition>REGWIDTH REG_Width</definition>
        <argsstring>(REG reg)</argsstring>
        <name>REG_Width</name>
        <param>
          <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>return the register width for all regs. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/base_ia32/reg_partial_ia32.PH" line="27" column="17" bodyfile="Source/pin/base_ia32/reg_partial_ia32.PH" bodystart="27" bodyend="27"/>
      </memberdef>
      <memberdef kind="function" id="group__REG_1ga86b87eca9881fb20f027325a1b606347" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL REG_is_Half32</definition>
        <argsstring>(const REG reg)</argsstring>
        <name>REG_is_Half32</name>
        <param>
          <type>const <ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return TRUE if reg is a lower 32-bit register, actually any 32 bit register </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/base_ia32/reg_partial_ia32.PH" line="32" column="13" bodyfile="Source/pin/base_ia32/reg_partial_ia32.PH" bodystart="32" bodyend="32"/>
      </memberdef>
      <memberdef kind="function" id="group__REG_1ga87a7c0c0602f7da9e186194eabeee4f5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL REG_is_Lower8</definition>
        <argsstring>(const REG reg)</argsstring>
        <name>REG_is_Lower8</name>
        <param>
          <type>const <ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return TRUE if reg is a lower 8-bit register </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/base_ia32/reg_partial_ia32.PH" line="37" column="13" bodyfile="Source/pin/base_ia32/reg_partial_ia32.PH" bodystart="37" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="group__REG_1gaa679daf724d1eb5a14028ec3fa90920c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL REG_is_Upper8</definition>
        <argsstring>(const REG reg)</argsstring>
        <name>REG_is_Upper8</name>
        <param>
          <type>const <ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return TRUE if reg is a upper 8-bit register </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/base_ia32/reg_partial_ia32.PH" line="46" column="13" bodyfile="Source/pin/base_ia32/reg_partial_ia32.PH" bodystart="46" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="group__REG_1ga721394b3e4656feef299cc4e4c5a7997" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL REG_is_Any8</definition>
        <argsstring>(const REG reg)</argsstring>
        <name>REG_is_Any8</name>
        <param>
          <type>const <ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return TRUE if reg is a upper or lower 8-bit register </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/base_ia32/reg_partial_ia32.PH" line="55" column="13" bodyfile="Source/pin/base_ia32/reg_partial_ia32.PH" bodystart="55" bodyend="60"/>
      </memberdef>
      <memberdef kind="function" id="group__REG_1gad04f526e0610cd72987cedc9eba5737a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL REG_is_partialreg</definition>
        <argsstring>(const REG reg)</argsstring>
        <name>REG_is_partialreg</name>
        <param>
          <type>const <ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return TRUE if reg is a partial register </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/base_ia32/reg_partial_ia32.PH" line="65" column="13" declfile="Source/pin/base_ia32/reg_partial_ia32.PH" declline="65" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2020-2021<sp/>Intel<sp/>Corporation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PIN_G_REG_PARTIAL_IA32_PH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>duplicate<sp/>inclusion<sp/>of<sp/>reg_partial_ia32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_G_REG_PARTIAL_IA32_PH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__REG_1ga88564562ed9e3c597e84c821075dcd58" kindref="member">REG_is_Half16</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref><sp/>reg)</highlight></codeline>
<codeline lineno="17"><highlight class="normal">{</highlight></codeline>
<codeline lineno="18"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__REG_1gacc9b609b842ce486cfbb57e95853fdae" kindref="member">REG_CLASS_BITS</ref><sp/>rh16Mask<sp/>=<sp/>(_REGCBIT(REG_CLASS_GRH16))<sp/>|<sp/>(_REGCBIT(REG_CLASS_FLAGS16))<sp/>|<sp/>(_REGCBIT(REG_CLASS_IP16))<sp/>|</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(_REGCBIT(REG_CLASS_PIN_GRH16));</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((_regClassBitMapTable[reg]<sp/>&amp;<sp/>rh16Mask)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="22"><highlight class="normal">}</highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="group__REG_1gaec0c649ef5462f4191f265d607fff05d" kindref="member">REGWIDTH</ref><sp/><ref refid="group__REG_1ga2a57f7b290e603305ef83e99da3c85e2" kindref="member">REG_Width</ref>(<ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref><sp/>reg)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(_regWidthTable[reg]);<sp/>}</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__REG_1ga86b87eca9881fb20f027325a1b606347" kindref="member">REG_is_Half32</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref><sp/>reg)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(<ref refid="group__REG_1ga2a57f7b290e603305ef83e99da3c85e2" kindref="member">REG_Width</ref>(reg)<sp/>==<sp/>REGWIDTH_32);<sp/>}</highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__REG_1ga87a7c0c0602f7da9e186194eabeee4f5" kindref="member">REG_is_Lower8</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref><sp/>reg)</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__REG_1gacc9b609b842ce486cfbb57e95853fdae" kindref="member">REG_CLASS_BITS</ref><sp/>rl8Mask<sp/>=<sp/>(_REGCBIT(REG_CLASS_GRL8))<sp/>|<sp/>(_REGCBIT(REG_CLASS_PIN_GRL8));</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((_regClassBitMapTable[reg]<sp/>&amp;<sp/>rl8Mask)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__REG_1gaa679daf724d1eb5a14028ec3fa90920c" kindref="member">REG_is_Upper8</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref><sp/>reg)</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__REG_1gacc9b609b842ce486cfbb57e95853fdae" kindref="member">REG_CLASS_BITS</ref><sp/>ru8Mask<sp/>=<sp/>(_REGCBIT(REG_CLASS_GRU8))<sp/>|<sp/>(_REGCBIT(REG_CLASS_PIN_GRU8));</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((_regClassBitMapTable[reg]<sp/>&amp;<sp/>ru8Mask)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="50"><highlight class="normal">}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__REG_1ga721394b3e4656feef299cc4e4c5a7997" kindref="member">REG_is_Any8</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref><sp/>reg)</highlight></codeline>
<codeline lineno="56"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__REG_1gacc9b609b842ce486cfbb57e95853fdae" kindref="member">REG_CLASS_BITS</ref><sp/>r8Mask<sp/>=</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(_REGCBIT(REG_CLASS_GRU8))<sp/>|<sp/>(_REGCBIT(REG_CLASS_PIN_GRU8))<sp/>|<sp/>(_REGCBIT(REG_CLASS_GRL8))<sp/>|<sp/>(_REGCBIT(REG_CLASS_PIN_GRL8));</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((_regClassBitMapTable[reg]<sp/>&amp;<sp/>r8Mask)<sp/>!=<sp/>0);</highlight></codeline>
<codeline lineno="60"><highlight class="normal">}</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__REG_1gad04f526e0610cd72987cedc9eba5737a" kindref="member">REG_is_partialreg</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref><sp/>reg);</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PIN_G_REG_PARTIAL_IA32_PH</highlight></codeline>
    </programlisting>
    <location file="Source/pin/base_ia32/reg_partial_ia32.PH"/>
  </compounddef>
</doxygen>
