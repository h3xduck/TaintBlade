<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="types__vmapi_8PH" kind="file" language="C++">
    <compoundname>types_vmapi.PH</compoundname>
    <innerclass refid="structDEBUGGER__REG__DESCRIPTION" prot="public">DEBUGGER_REG_DESCRIPTION</innerclass>
    <innerclass refid="structCONTEXT" prot="public">CONTEXT</innerclass>
    <innerclass refid="structPHYSICAL__CONTEXT" prot="public">PHYSICAL_CONTEXT</innerclass>
    <innerclass refid="structPARG__T" prot="public">PARG_T</innerclass>
    <innerclass refid="struct__PinPargClass" prot="public">_PinPargClass</innerclass>
    <innerclass refid="struct__PinPargClass_3_01T_01_5_01_4" prot="public">_PinPargClass&lt; T * &gt;</innerclass>
    <innerclass refid="struct__PinPargClass_3_01T_01_6_01_4" prot="public">_PinPargClass&lt; T &amp; &gt;</innerclass>
    <innerclass refid="struct__PinPargClass_3_01bool_01_4" prot="public">_PinPargClass&lt; bool &gt;</innerclass>
    <innerclass refid="struct__PinPargClass_3_01char_01_4" prot="public">_PinPargClass&lt; char &gt;</innerclass>
    <innerclass refid="struct__PinPargClass_3_01unsigned_01char_01_4" prot="public">_PinPargClass&lt; unsigned char &gt;</innerclass>
    <innerclass refid="struct__PinPargClass_3_01signed_01char_01_4" prot="public">_PinPargClass&lt; signed char &gt;</innerclass>
    <innerclass refid="struct__PinPargClass_3_01short_01_4" prot="public">_PinPargClass&lt; short &gt;</innerclass>
    <innerclass refid="struct__PinPargClass_3_01unsigned_01short_01_4" prot="public">_PinPargClass&lt; unsigned short &gt;</innerclass>
    <innerclass refid="struct__PinPargClass_3_01int_01_4" prot="public">_PinPargClass&lt; int &gt;</innerclass>
    <innerclass refid="struct__PinPargClass_3_01unsigned_01int_01_4" prot="public">_PinPargClass&lt; unsigned int &gt;</innerclass>
    <innerclass refid="struct__PinPargClass_3_01long_01_4" prot="public">_PinPargClass&lt; long &gt;</innerclass>
    <innerclass refid="struct__PinPargClass_3_01unsigned_01long_01_4" prot="public">_PinPargClass&lt; unsigned long &gt;</innerclass>
    <innerclass refid="struct__PinPargClass_3_01long_01long_01_4" prot="public">_PinPargClass&lt; long long &gt;</innerclass>
    <innerclass refid="struct__PinPargClass_3_01unsigned_01long_01long_01_4" prot="public">_PinPargClass&lt; unsigned long long &gt;</innerclass>
    <innerclass refid="struct__PinPargClass_3_01float_01_4" prot="public">_PinPargClass&lt; float &gt;</innerclass>
    <innerclass refid="struct__PinPargClass_3_01double_01_4" prot="public">_PinPargClass&lt; double &gt;</innerclass>
    <innerclass refid="struct__PinPargClass_3_01void_01_4" prot="public">_PinPargClass&lt; void &gt;</innerclass>
    <innerclass refid="structPIN__MEM__ACCESS__INFO" prot="public">PIN_MEM_ACCESS_INFO</innerclass>
    <innerclass refid="structPIN__MULTI__MEM__ACCESS__INFO" prot="public">PIN_MULTI_MEM_ACCESS_INFO</innerclass>
    <innerclass refid="classIMULTI__ELEMENT__OPERAND" prot="public">IMULTI_ELEMENT_OPERAND</innerclass>
    <innerclass refid="struct__tcpServerStruct" prot="public">_tcpServerStruct</innerclass>
    <innerclass refid="structDEBUG__CONNECTION__INFO" prot="public">DEBUG_CONNECTION_INFO</innerclass>
    <innerclass refid="struct__tcpClientStruct" prot="public">_tcpClientStruct</innerclass>
    <innerclass refid="structDEBUG__MODE" prot="public">DEBUG_MODE</innerclass>
    <innerclass refid="unionPIN__MEM__TRANS__FLAGS" prot="public">PIN_MEM_TRANS_FLAGS</innerclass>
    <innerclass refid="structPIN__MEM__TRANS__INFO" prot="public">PIN_MEM_TRANS_INFO</innerclass>
    <innerclass refid="classISCATTERED__MEMORY__REWRITE" prot="public">ISCATTERED_MEMORY_REWRITE</innerclass>
    <innerclass refid="structCALL__APPLICATION__FUNCTION__PARAM" prot="public">CALL_APPLICATION_FUNCTION_PARAM</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="types__vmapi_8PH_1a83ae79e5091c0bdbf5869e69d5ab2102" prot="public" static="no">
        <name>TYPES_VMAPI_PH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="15" column="9" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="15" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="types__vmapi_8PH_1afdf571f99836105e0c7306f84e2df08e" prot="public" static="no">
        <name>IARG_END</name>
        <initializer><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da2d2d4502ddc8de6d717c6878101c73df" kindref="member">IARG_FILE_NAME</ref>, __FILE__, <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da5a86209c9f24bebb204f1c435eb18d1c" kindref="member">IARG_LINE_NO</ref>, LEVEL_BASE::UINT32(__LINE__), <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dad1fd7d0ac8f175d5340787ff3f3a2093" kindref="member">IARG_LAST</ref></initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="498" column="10" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="498" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="types__vmapi_8PH_1a97802bf6bb265a5625567eb8270a0d2c" prot="public" static="no">
        <name>XMM_REG_SIZE</name>
        <initializer>16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="502" column="9" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="502" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="types__vmapi_8PH_1a568a27afe8aa5ce6c9a2ecd6ba951232" prot="public" static="no">
        <name>YMM_REG_SIZE</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="503" column="9" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="503" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="types__vmapi_8PH_1af37636a13efaaba6152a8ea9886dde01" prot="public" static="no">
        <name>ZMM_REG_SIZE</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="504" column="9" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="504" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__PROTO_1gacb4faa1f3649fce55756313c6259519f" prot="public" static="no">
        <name>PIN_PARG</name>
        <param><defname>t</defname></param>
        <initializer><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt; t &gt;::parg()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macros used to simplify the passing of function prototype arguments. The macro will pass the type and size of each argument specified. When passing an argument to <ref refid="group__PROTO_1gae01d20f7fd56e3eeebebe41009e7ff89" kindref="member">PROTO_Allocate()</ref>, use these macros. As an example, <ref refid="group__PROTO_1gacb4faa1f3649fce55756313c6259519f" kindref="member">PIN_PARG(int)</ref> will pass the PARG_TYPE PARG_INT and the size of an integer to <ref refid="group__PROTO_1gae01d20f7fd56e3eeebebe41009e7ff89" kindref="member">PROTO_Allocate()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="565" column="9" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="565" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__PROTO_1gaf8061627abf953100e29bd3f031ded2c" prot="public" static="no">
        <name>PIN_PARG_AGGREGATE</name>
        <param><defname>t</defname></param>
        <initializer>_PinParg(PARG_AGGREGATE, sizeof(t))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type and size of an aggregate in <ref refid="group__PROTO_1gae01d20f7fd56e3eeebebe41009e7ff89" kindref="member">PROTO_Allocate()</ref> See <ref refid="group__PROTO_1gacb4faa1f3649fce55756313c6259519f" kindref="member">PIN_PARG</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="572" column="9" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="572" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__PROTO_1ga3fbcb1f92a17fcc24febac0676165ca2" prot="public" static="no">
        <name>PIN_PARG_ENUM</name>
        <param><defname>t</defname></param>
        <initializer>_PinParg(PARG_ENUM, sizeof(t))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type and size of an enum in <ref refid="group__PROTO_1gae01d20f7fd56e3eeebebe41009e7ff89" kindref="member">PROTO_Allocate()</ref> See <ref refid="group__PROTO_1gacb4faa1f3649fce55756313c6259519f" kindref="member">PIN_PARG</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="579" column="9" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="579" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__PROTO_1gaeebb4a42707b704ebf214a06a6bf4e62" prot="public" static="no">
        <name>PIN_PARG_END</name>
        <param></param>
        <initializer>_PinParg(PARG_END, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ends a list of arguments in <ref refid="group__PROTO_1gae01d20f7fd56e3eeebebe41009e7ff89" kindref="member">PROTO_Allocate()</ref> See <ref refid="group__PROTO_1gacb4faa1f3649fce55756313c6259519f" kindref="member">PIN_PARG</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="586" column="9" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="586" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__INST__ARGS_1ga5d3025eb005b7ea4745799f0ee1b86a6" prot="public" static="no">
        <name>PIN_FAST_ANALYSIS_CALL</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use a faster linkage for calls to analysis functions. Add PIN_FAST_ANALYSIS_CALL to the declaration between the return type and the function name. You must also add <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da892dbdf11883df94c327bb31fd0d5fcd" kindref="member">IARG_FAST_ANALYSIS_CALL</ref> to the InsertCall. For example:</para>
<para>@begincode VOID PIN_FAST_ANALYSIS_CALL docount(int j);</para>
<para>INS_InsertCall(ins, IPOINT_BEFORE, AFUNPTR(docount), IARG_FAST_ANALYSIS_CALL, IARG_UINT32, 3, IARG_END); </para>
<para>You will gain the most benefit from using PIN_FAST_ANALYSIS_CALL if<itemizedlist>
<listitem><para>you are instrumenting a 32 bit process (the 64 bit calling conventions already pass arguments in registers)</para>
</listitem><listitem><para>your analysis routine is not inlined (if it is inlined there is no call to optimize)</para>
</listitem><listitem><para>your analysis routine is relatively small (if it is large the extra overhead imposed by the poor calling convention won&apos;t be significant anyway) </para>
</listitem></itemizedlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="818" column="10" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="818" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__APPDEBUG_1gad6ae164e2005bda040921f234730cb5a" prot="public" static="no" strong="no">
        <type></type>
        <name>DEBUGGING_EVENT</name>
        <enumvalue id="group__APPDEBUG_1ggad6ae164e2005bda040921f234730cb5aad5cc78dfe7674fb92a5fb4a7648d00d9" prot="public">
          <name>DEBUGGING_EVENT_BREAKPOINT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Thread triggered a breakpoint. This does not include breakpoints trigged via <ref refid="group__APPDEBUG_1gabbd52cd5977cd9ffef8065f144137b14" kindref="member">PIN_ApplicationBreakpoint()</ref>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__APPDEBUG_1ggad6ae164e2005bda040921f234730cb5aa2b7b5b57923d2c0fd4dfee4a4a2e4b73" prot="public">
          <name>DEBUGGING_EVENT_SINGLE_STEP</name>
          <briefdescription>
<para>Thread completed a single-step. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__APPDEBUG_1ggad6ae164e2005bda040921f234730cb5aa5d342e07a5c1d8f4707af1c8d1835f5c" prot="public">
          <name>DEBUGGING_EVENT_ASYNC_BREAK</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Thread stopped due to a request from the debugger or because another thread has stopped in the debugger. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Possible debugging events that can be intercepted with <ref refid="group__APPDEBUG_1ga4f727b422499f5d312204ba42b23fda0" kindref="member">PIN_InterceptDebuggingEvent()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="21" column="1" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="20" bodyend="35"/>
      </memberdef>
      <memberdef kind="enum" id="group__CONTEXT_1ga479f2b92361e3794145bb90a1ea7e027" prot="public" static="no" strong="no">
        <type></type>
        <name>PROCESSOR_STATE</name>
        <enumvalue id="group__CONTEXT_1gga479f2b92361e3794145bb90a1ea7e027a940f194773d13bfe7b71a589b3d6a29a" prot="public">
          <name>PROCESSOR_STATE_X87</name>
          <briefdescription>
<para>is the X87 (fp stack) supported </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__CONTEXT_1gga479f2b92361e3794145bb90a1ea7e027ada893eda0a2fdd23742fb5d9f4ba25a7" prot="public">
          <name>PROCESSOR_STATE_XMM</name>
          <briefdescription>
<para>are the xmm registers supported (AVX) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__CONTEXT_1gga479f2b92361e3794145bb90a1ea7e027a15481af1dfee3eb0845669e533b2d5e6" prot="public">
          <name>PROCESSOR_STATE_YMM</name>
          <briefdescription>
<para>are the ymm registers supported (AVX2) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__CONTEXT_1gga479f2b92361e3794145bb90a1ea7e027a32f9fcc0e7c055726930ee8d563ea248" prot="public">
          <name>PROCESSOR_STATE_ZMM</name>
          <briefdescription>
<para>are the zmm registers supported (AVX512) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__CONTEXT_1gga479f2b92361e3794145bb90a1ea7e027a6e4756c74bb9d4ac33e6162e3352a988" prot="public">
          <name>PROCESSOR_STATE_TMM</name>
          <briefdescription>
<para>are the tmm registers supported (AMX) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>enums for queries on the supported state: PIN_SupportsProcessorState and PIN_ContextContainsState </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="101" column="1" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="100" bodyend="107"/>
      </memberdef>
      <memberdef kind="enum" id="group__INST__ARGS_1ga707ea08e31f44f4a81e2a7766123bad7" prot="public" static="no" strong="no">
        <type></type>
        <name>IPOINT</name>
        <enumvalue id="group__INST__ARGS_1gga707ea08e31f44f4a81e2a7766123bad7a9e98e21add6d20bba6fe87eff87b8649" prot="public">
          <name>IPOINT_INVALID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga707ea08e31f44f4a81e2a7766123bad7a7c7cbebb7a62a40e9f803b1db2e6ce20" prot="public">
          <name>IPOINT_BEFORE</name>
          <briefdescription>
<para>Insert a call before the first instruction of the instrumented object. Always valid. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga707ea08e31f44f4a81e2a7766123bad7a42eff26179c6d87348abe492301c12ec" prot="public">
          <name>IPOINT_AFTER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Insert a call on the fall-through path of the last instruction of the instrumented object (if such fall-through exists).<linebreak/>
 In case of a routine (RTN), instruments all return paths. Always valid.<linebreak/>
 In case of an instruction (INS), valid only if <ref refid="group__INS__INSPECTION_1gaef208009ec86a213f7574b65fe2603c0" kindref="member">INS_IsValidForIpointAfter()</ref> is true.<linebreak/>
 In case of a BBL, valid only if <ref refid="group__BBL_1ga49b398eb9c10ff80019315d6c2eee84a" kindref="member">BBL_HasFallThrough()</ref> is true.<linebreak/>
 In case of a TRACE, valid only if <ref refid="group__TRACE_1ga2134ee647c01b25e4ad20cbbddce5ef1" kindref="member">TRACE_HasFallThrough()</ref> is true.<linebreak/>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga707ea08e31f44f4a81e2a7766123bad7acf7dee2063098dd79907d19f9c7df65d" prot="public">
          <name>IPOINT_ANYWHERE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Insert a call anywhere inside the instrumented object.<linebreak/>
 Valid on all instrumentation functions except <ref refid="group__INS__INSTRUMENTATION_1ga3b589b45d857832458ca84ac5b6f04be" kindref="member">INS_InsertIfCall()</ref>, <ref refid="group__INS__INSTRUMENTATION_1gaf88934525048d52d54a76f02d1ec3cf0" kindref="member">INS_InsertThenCall()</ref>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga707ea08e31f44f4a81e2a7766123bad7a5ef5b45901a8447e5173f50746ab029d" prot="public">
          <name>IPOINT_TAKEN_BRANCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Insert a call on the taken edge of control-flow instructions of the instrumented object.<linebreak/>
 In case of an instruction, Valid only if <ref refid="group__INS__INSPECTION_1gab13f78210172b7647bf5979b4e7f764f" kindref="member">INS_IsValidForIpointTakenBranch()</ref> is true. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determines where the analysis call is inserted relative to the instrumented object. Instrumented object can be: INS, BBL, TRACE, RTN. This is used in instrumentation functions, for example see <ref refid="group__TRACE_1gae5340cd88a962aac271e3547cdaa024e" kindref="member">TRACE_InsertCall()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="132" column="1" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="131" bodyend="156"/>
      </memberdef>
      <memberdef kind="enum" id="group__PIN__CONTROL_1ga8e4e6511a0e09fdc5ec7d6dbf395b3a8" prot="public" static="no" strong="no">
        <type></type>
        <name>CONTEXT_CHANGE_REASON</name>
        <enumvalue id="group__PIN__CONTROL_1gga8e4e6511a0e09fdc5ec7d6dbf395b3a8ae712c798df1d0e94022f6382a4c8239e" prot="public">
          <name>CONTEXT_CHANGE_REASON_FATALSIGNAL</name>
          <briefdescription>
<para>Receipt of fatal Unix signal. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PIN__CONTROL_1gga8e4e6511a0e09fdc5ec7d6dbf395b3a8a43b8b032e969e0e5d14a3ed7385f29db" prot="public">
          <name>CONTEXT_CHANGE_REASON_SIGNAL</name>
          <briefdescription>
<para>Receipt of handled Unix signal. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PIN__CONTROL_1gga8e4e6511a0e09fdc5ec7d6dbf395b3a8a7e8b6943c9aa3a85b0a9cd23bc738dd9" prot="public">
          <name>CONTEXT_CHANGE_REASON_SIGRETURN</name>
          <briefdescription>
<para>Return from Unix signal handler. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PIN__CONTROL_1gga8e4e6511a0e09fdc5ec7d6dbf395b3a8a641c250ce491d66cc19f1205160dc279" prot="public">
          <name>CONTEXT_CHANGE_REASON_APC</name>
          <briefdescription>
<para>Receipt of Windows APC. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PIN__CONTROL_1gga8e4e6511a0e09fdc5ec7d6dbf395b3a8ae4c034a98f8eba91b2f8ac5b2543492b" prot="public">
          <name>CONTEXT_CHANGE_REASON_EXCEPTION</name>
          <briefdescription>
<para>Receipt of Windows exception. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PIN__CONTROL_1gga8e4e6511a0e09fdc5ec7d6dbf395b3a8a5b48097c22e4fcfdf12650129f364b50" prot="public">
          <name>CONTEXT_CHANGE_REASON_CALLBACK</name>
          <briefdescription>
<para>Receipt of Windows call-back. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Possible reasons for an application context change. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="162" column="1" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="161" bodyend="169"/>
      </memberdef>
      <memberdef kind="enum" id="group__PIN__CONTROL_1ga8c5c16fb133375efa3a27d3a3900c603" prot="public" static="no" strong="no">
        <type></type>
        <name>EXCEPT_HANDLING_RESULT</name>
        <enumvalue id="group__PIN__CONTROL_1gga8c5c16fb133375efa3a27d3a3900c603a32e365f541f4ea48f730a030185558cd" prot="public">
          <name>EHR_HANDLED</name>
          <briefdescription>
<para>Exception is handled. Continue execution with the internal physical context. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PIN__CONTROL_1gga8c5c16fb133375efa3a27d3a3900c603ab394692e0b4ad2fda77e7597c75c9599" prot="public">
          <name>EHR_UNHANDLED</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Exception is not handled. Execute default system procedure for unhandled exceptions (Windows) or abort the process (Unix) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PIN__CONTROL_1gga8c5c16fb133375efa3a27d3a3900c603a1950501612b017bd8db1634f7dc8bf8f" prot="public">
          <name>EHR_CONTINUE_SEARCH</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Execute next (upper level) exception filter function, if any. For the uppermost filter, this is the same as EHR_UNHANDLED semantics </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Possible return values of the <ref refid="group__PIN__CONTROL_1ga48e4c80589225d40efe177a9d399225c" kindref="member">INTERNAL_EXCEPTION_CALLBACK</ref> exception filter function </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="175" column="1" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="174" bodyend="183"/>
      </memberdef>
      <memberdef kind="enum" id="group__INST__ARGS_1ga3d1d5f6805cb16d00bce441290ca2212" prot="public" static="no" strong="no">
        <type></type>
        <name>CALL_ORDER</name>
        <enumvalue id="group__INST__ARGS_1gga3d1d5f6805cb16d00bce441290ca2212a3f53c3878be5c2859b82b540561b72b3" prot="public">
          <name>CALL_ORDER_FIRST</name>
          <initializer>= 100</initializer>
          <briefdescription>
<para>Execute this call first. Value is 100. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga3d1d5f6805cb16d00bce441290ca2212a43af3c7aa24c81dddf629b2828b8354c" prot="public">
          <name>CALL_ORDER_DEFAULT</name>
          <initializer>= 200</initializer>
          <briefdescription>
<para>Default when IARG_CALL_ORDER is not specified. Value is 200. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga3d1d5f6805cb16d00bce441290ca2212a0b197a15a2399e6443ce6be187ccf6c6" prot="public">
          <name>CALL_ORDER_LAST</name>
          <initializer>= 300</initializer>
          <briefdescription>
<para>Execute this call last. Value is 300. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Predefined values for <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da45b6bfd69845ada4a0875967995ad7c6" kindref="member">IARG_CALL_ORDER</ref>. Controls the order of analysis call invocations when an instruction has multiple analysis calls. CALL_ORDER_DEFAULT is the default call order when <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da45b6bfd69845ada4a0875967995ad7c6" kindref="member">IARG_CALL_ORDER</ref> is not specified. You can use integral values relative to the predefined values to have a fine-grained control over the instrumentation order (e.g., CALL_ORDER_DEFAULT + 5, CALL_ORDER_LAST - 10, etc).</para>
<para>Pin guarantees that multiple analysis calls with the same CALL_ORDER on the same instruction, added in the context of the same instrumentation callback (e.g,. <ref refid="group__INS__INSTRUMENTATION_1INS_INSTRUMENT_CALLBACK" kindref="member">INS_INSTRUMENT_CALLBACK</ref>), will be invoked according to their insertion order. For all other cases, the invocation order for analysis calls with the same CALL_ORDER on the same instruction depends on the implementation and may change without notice. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="201" column="1" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="200" bodyend="205"/>
      </memberdef>
      <memberdef kind="enum" id="group__INST__ARGS_1ga089c27ca15e9ff139dd3a3f8a6f8451d" prot="public" static="no" strong="no">
        <type></type>
        <name>IARG_TYPE</name>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da7e62cf3af3dec2a10cdff81b0b1894f8" prot="public">
          <name>IARG_INVALID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da34126f334d65afac69784351a03615ad" prot="public">
          <name>IARG_ADDRINT</name>
          <briefdescription>
<para>Type: ADDRINT. Constant value (additional arg required) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da7a11763427dff3afb81caab97b02881b" prot="public">
          <name>IARG_PTR</name>
          <briefdescription>
<para>Type: &quot;VOID *&quot;. Constant value (additional pointer arg required) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dacac3cb99011b351eeb3f675bc8c62b83" prot="public">
          <name>IARG_BOOL</name>
          <briefdescription>
<para>Type: BOOL. Constant (additional BOOL arg required) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dabd19b79248899659441e56e4738d5bfd" prot="public">
          <name>IARG_UINT32</name>
          <briefdescription>
<para>Type: UINT32. Constant (additional integer arg required) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dab2d3f91c48319ea5e824fdc678ae4a5c" prot="public">
          <name>IARG_UINT64</name>
          <briefdescription>
<para>Type: UINT64. Constant (additional UINT64 arg required) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da623ad95758bce14fcb9427beef53736a" prot="public">
          <name>IARG_INST_PTR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: ADDRINT. The address of the instrumented instruction. This value does not change at IPOINT_AFTER. This is simply shorthand for <computeroutput>IARG_ADDRINT, INS_Address(ins)</computeroutput>. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dabe70796bf61230dac3ea1deaf4983c46" prot="public">
          <name>IARG_REG_VALUE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: ADDRINT for integer registers. Value of a register (additional register arg required) <ref refid="group__REG" kindref="compound">REG: Register Object</ref> Basically, this cannot be used to retrieve the value of registers whose size is larger than ADDRINT (e.g. x87 FPU/XMM/YMM/ZMM/opmask) or registers which are not architectural (REG_PIN_*), but there are some exceptions to this rule. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da0337fbb99845733a3d35a9a3dbcfbf93" prot="public">
          <name>IARG_REG_REFERENCE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: UINT8*. Pointer to buffer holding the content of the requested register. buffer size is the size of the requested register. Register is specified in additional argument. Register is updated back to the relevant application register (Meaning if you change values in the mentioned pointer they will be propagated to the relevant application register). If you&apos;re not interested in modifying the register value, but only read its value use IARG_REG_CONST_REFERENCE instead.</para>
<para>Not supported in Probe mode or with the Buffering APIs.</para>
<para><simplesect kind="note"><para>additional REG arg required!!! </para>
</simplesect>
<simplesect kind="note"><para>PIN_REGISTER is now deprecated. </para>
</simplesect>
<simplesect kind="note"><para>If the requested register is a tile register and AMX is in init state (i.e., not active) - a NULL pointer will be passed to the analysis routine as the reference argument. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da817f3f2fe8c0c536daa86deb55126c25" prot="public">
          <name>IARG_REG_CONST_REFERENCE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: UINT8*. Pointer to buffer holding the content of the requested register. buffer size is the size of the requested register. Register is specified in additional argument. Registers are not updated back to the relevant application register (Meaning if you change values in the mentioned pointer they will not be propagated to the relevant application register). If you&apos;re interested in modifying the register value, use IARG_REG_REFERENCE instead. Not supported with the Buffering APIs.</para>
<para><simplesect kind="note"><para>additional REG arg required!!! </para>
</simplesect>
<simplesect kind="note"><para>PIN_REGISTER is now deprecated. </para>
</simplesect>
<simplesect kind="note"><para>If the requested register is a tile register and AMX is in init state (i.e., not active) - a NULL pointer will be passed to the analysis routine as the reference argument. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da2138787daf04a57e6684eb0b368e120e" prot="public">
          <name>IARG_MEMORYREAD_EA</name>
          <briefdescription>
<para>Type: ADDRINT. Effective address of a memory read, only valid if INS_IsMemoryRead is true and at IPOINT_BEFORE. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da2931627e96b437dc55e06966d31ad962" prot="public">
          <name>IARG_MEMORYREAD2_EA</name>
          <briefdescription>
<para>Type: ADDRINT. Effective address of a 2nd memory read (e.g. 2nd operand in cmps on ia32), only valid at IPOINT_BEFORE. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da92be352ec619bbd3be69fed773c011a2" prot="public">
          <name>IARG_MEMORYWRITE_EA</name>
          <briefdescription>
<para>Type: ADDRINT. Effective address of a memory write, only valid at IPOINT_BEFORE. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dad2e2d24103d1a0286b57412f66b909d7" prot="public">
          <name>IARG_MEMORYREAD_SIZE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: UINT32. Size in bytes of memory read. This IARG is applicable for all instructions for which INS_hasKnownMemorySize returns TRUE. For other instructions e.g. vgather/vscatter see <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da581b5886a7e69629a45607ac34adbf2c" kindref="member">IARG_MULTI_ELEMENT_OPERAND</ref>. For the varying memory size read instruction, XRSTOR, the size is based on the XSAVE area header. If the header indicates compact mode it will provide the compact size. Otherwise it will provide the standard size. The minimum size for the XRSTOR instruction (not including FXRSTOR) is 576 (i.e the XSAVE area size up to and including the header). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da365d8eed26ac239b013a01ab6a7cf375" prot="public">
          <name>IARG_MEMORYWRITE_SIZE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: UINT32. Size in bytes of memory write. This IARG is applicable for all instructions for which INS_hasKnownMemorySize returns TRUE. For other instructions e.g. vgather/vscatter see <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da581b5886a7e69629a45607ac34adbf2c" kindref="member">IARG_MULTI_ELEMENT_OPERAND</ref>. For varying size memory write instructions, the supported instructions are the XSAVE family of instructions. For XSAVE, the size of the XSAVE area used is based on user request and supported features in the machine. This will provide the exact size used. For XSAVEOPT, the size is calculated the same as if XSAVE was used. This may provide in some cases an upper bound to the actual used memory. For XSAVEC, in IPOINT_BEFORE the size is calculated based on user request only. This may provide in some cases an upper bound to the actual size. If used in IPOINT_AFTER it will provide the exact compact size as defined in the XSAVE area header. The minimum size for the XSAVE family write instructions (not including FXSAVE) is 576 (i.e the XSAVE area size up to and including the header). </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da4b127f5e8c89aabe67abb6d04ee8ecce" prot="public">
          <name>IARG_MEMORYREAD_PTR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Actual address of the memory access; same as <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da2138787daf04a57e6684eb0b368e120e" kindref="member">IARG_MEMORYREAD_EA</ref>, unless the memory address is translated by <ref refid="group__PIN__CONTROL_1ga3a5f26e35e32bc5e99d101995339bd73" kindref="member">MEMORY_ADDR_TRANS_CALLBACK</ref>, or the memory operand is rewritten by <ref refid="group__INS__MODIFICATION_1gaad5f037e311aa30dbc53e602e6ff672b" kindref="member">INS_RewriteMemoryOperand</ref> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da96d283a176b568500d63a7b8ad2558ed" prot="public">
          <name>IARG_MEMORYREAD2_PTR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Actual address of the memory access; same as <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da2931627e96b437dc55e06966d31ad962" kindref="member">IARG_MEMORYREAD2_EA</ref>, unless the memory address is translated by <ref refid="group__PIN__CONTROL_1ga3a5f26e35e32bc5e99d101995339bd73" kindref="member">MEMORY_ADDR_TRANS_CALLBACK</ref>, or the memory operand is rewritten by <ref refid="group__INS__MODIFICATION_1gaad5f037e311aa30dbc53e602e6ff672b" kindref="member">INS_RewriteMemoryOperand</ref> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da9fead51aa9d72879eadd61ae5cb00e98" prot="public">
          <name>IARG_MEMORYWRITE_PTR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Actual address of the memory access. Same as <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da92be352ec619bbd3be69fed773c011a2" kindref="member">IARG_MEMORYWRITE_EA</ref>, unless the memory address is translated by <ref refid="group__PIN__CONTROL_1ga3a5f26e35e32bc5e99d101995339bd73" kindref="member">MEMORY_ADDR_TRANS_CALLBACK</ref>, or the memory operand is rewritten by <ref refid="group__INS__MODIFICATION_1gaad5f037e311aa30dbc53e602e6ff672b" kindref="member">INS_RewriteMemoryOperand</ref> </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da52ab7563efadafe484b53421e42ec8b1" prot="public">
          <name>IARG_MEMORYOP_PTR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Actual address of the memory access. Same as <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da985747a3c70e3a4283fc8a2f16399e63" kindref="member">IARG_MEMORYOP_EA</ref>, unless the memory address is translated by <ref refid="group__PIN__CONTROL_1ga3a5f26e35e32bc5e99d101995339bd73" kindref="member">MEMORY_ADDR_TRANS_CALLBACK</ref>, or the memory operand is rewritten by <ref refid="group__INS__MODIFICATION_1gaad5f037e311aa30dbc53e602e6ff672b" kindref="member">INS_RewriteMemoryOperand</ref>. <linebreak/>
When using <ref refid="group__INS__MODIFICATION_1gaad5f037e311aa30dbc53e602e6ff672b" kindref="member">INS_RewriteMemoryOperand</ref> the value is valid only with IPOINT_AFTER. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451daa60ade75a81b448320631155e84829a6" prot="public">
          <name>IARG_MULTI_MEMORYACCESS_EA</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: PIN_MULTI_MEM_ACCESS_INFO* the addresses read by the various vgather* instructions, Also available for regular memory instructions </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da581b5886a7e69629a45607ac34adbf2c" prot="public">
          <name>IARG_MULTI_ELEMENT_OPERAND</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: <ref refid="classIMULTI__ELEMENT__OPERAND" kindref="compound">IMULTI_ELEMENT_OPERAND</ref> * . Information about a multi element operand (implemented for IPOINT_BEFORE). The operand index is required as the next argument. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451daf366ff3d1e14bc23162ad18c47b63c1f" prot="public">
          <name>IARG_REWRITE_SCATTERED_MEMOP</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: <ref refid="classISCATTERED__MEMORY__REWRITE" kindref="compound">ISCATTERED_MEMORY_REWRITE</ref> * . Interface that allows rewriting elemenets addresses for instructions with scattered memory access (implemented for IPOINT_BEFORE). Only valid for instructions where <ref refid="group__INS__INSPECTION_1gacd61a39496ab833613206747e16d3fa7" kindref="member">INS_IsValidForIarg</ref> for this IARG returns TRUE. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da87c9a713268fea1c9ddb157aa0a475eb" prot="public">
          <name>IARG_EXPLICIT_MEMORY_EA</name>
          <briefdescription>
<para>Type: ADDRINT. Effective address of the explicit memory operand. Useful for instrumenting LEA instructions. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da28140354d575f6b6404a6833552fed47" prot="public">
          <name>IARG_BRANCH_TAKEN</name>
          <briefdescription>
<para>Type: BOOL. Non zero if a branch is taken. Argument is invalid for XBEGIN and XEND instructions. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451daa1b650f4229df434f3ac5ef61f14d0ed" prot="public">
          <name>IARG_BRANCH_TARGET_ADDR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: ADDRINT. Target address of branch instruction.<linebreak/>
 In case of INS instrumentation, valid when <ref refid="group__INS__INSPECTION_1ga308d89e7d9f39b8a0daf908778513457" kindref="member">INS_IsControlFlow()</ref> is true.<linebreak/>
 However, this argument is invalid if the instruction is XBEGIN or XEND. In Linux, for the case of branching into the vsyscall area (in kernel 5.3 or above), the target address that will be received in the analysis routine would be that of the vsyscall area. Note that this address is not readable (e.g. via <ref refid="group__PIN__CONTROL_1ga1225706d213f4bd1d81ed1fb32e792d7" kindref="member">PIN_SafeCopy()</ref> and <ref refid="group__PIN__CONTROL_1gabd8df83bbd040dfaf019bf18ec072b92" kindref="member">PIN_FetchCode()</ref>) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da0faf9829bd4f46cc1873c943978b21d7" prot="public">
          <name>IARG_FALLTHROUGH_ADDR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: ADDRINT. Fall through address of the instrumented object.<linebreak/>
 In case of INS instrumentation, valid only if <ref refid="group__INS__INSPECTION_1ga7602edb17e52e209492bab2c65fc1612" kindref="member">INS_HasFallThrough()</ref> is true. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da5f291cb55a7d61a40fa3ab98e191394e" prot="public">
          <name>IARG_EXECUTING</name>
          <briefdescription>
<para>Type: BOOL. False if the instruction will not be executed because of predication, otherwise true. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da4e8c634973d6966dba21ff70455c1f5b" prot="public">
          <name>IARG_FIRST_REP_ITERATION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: BOOL. True if INS_HasRealRep(ins) and this the first iteration of the REP sequence, otherwise false.<linebreak/>
 <simplesect kind="note"><para>In case count register is 0 when calling analysis routine, the value of IARG_FIRST_REP_ITERATION is false. </para>
</simplesect>
</para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da8cbb1c02c9e1bad259570179580adb50" prot="public">
          <name>IARG_PREDICATE</name>
          <briefdescription>
<para>Reserved. Do not use. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dacd300aa37115a80c4ce30e11e7a37846" prot="public">
          <name>IARG_STACK_VALUE</name>
          <briefdescription>
<para>Reserved. Do not use. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da0ea57a2ba5c26fe0b0e7d75a8de06fee" prot="public">
          <name>IARG_STACK_REFERENCE</name>
          <briefdescription>
<para>Reserved. Do not use. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da2b71d3e92a6b768857bd60cd1ffb67bb" prot="public">
          <name>IARG_MEMORY_VALUE</name>
          <briefdescription>
<para>Reserved. IA32(e) only. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dad99d33d82bec02d9dc8c1639c90920a2" prot="public">
          <name>IARG_MEMORY_REFERENCE</name>
          <briefdescription>
<para>Reserved. IA32(e) only. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da6e903286d783f6ee402e146b8dff871f" prot="public">
          <name>IARG_SYSCALL_NUMBER</name>
          <briefdescription>
<para>Type: ADDRINT. System call number. Valid for IPOINT_BEFORE at the system call instruction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dacf2d3d2c61544c89918563331a73b2f4" prot="public">
          <name>IARG_SYSARG_REFERENCE</name>
          <briefdescription>
<para>Type: &quot;ADDRINT *&quot;. Pointer to system call argument n. Valid for IPOINT_BEFORE at the system call instruction. (First argument number is 0.) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da53b9c85f47960f7b805dc0bb8b6a1a2e" prot="public">
          <name>IARG_SYSARG_VALUE</name>
          <briefdescription>
<para>Type: ADDRINT. System call argument n. Valid for IPOINT_BEFORE at the system call instruction. (First argument number is 0.) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da0480757dd8ff829a67621df1e9e5396d" prot="public">
          <name>IARG_SYSRET_VALUE</name>
          <briefdescription>
<para>Type: ADDRINT. System call return value. On Linux and macOS* the value is -1 if the system call failed. (IPOINT_AFTER only) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da969a0228ddab7219f20426504991b676" prot="public">
          <name>IARG_SYSRET_ERRNO</name>
          <briefdescription>
<para>Type: INT32. System call errno (IPOINT_AFTER_only). </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da4babc2672f5a58d94f8fb8f5234c14d4" prot="public">
          <name>IARG_FUNCARG_CALLSITE_REFERENCE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: &quot;ADDRINT *&quot;. Pointer to integer argument n. Valid only at the call site. (First argument number is 0.) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da8766561ec59dfb16a94edb3624f53ab8" prot="public">
          <name>IARG_FUNCARG_CALLSITE_VALUE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: ADDRINT. Integer argument n. Valid only at the call site. (First argument number is 0.) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dab23dff2bab780c074d4998d14f4ecb16" prot="public">
          <name>IARG_FUNCARG_ENTRYPOINT_REFERENCE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: &quot;ADDRINT *&quot;. Pointer to integer argument n. Valid only at the entry point of a routine. (First argument number is 0.) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dab418d242314ea7c67b1febf7667e93a1" prot="public">
          <name>IARG_FUNCARG_ENTRYPOINT_VALUE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: ADDRINT. Integer argument n. Valid only at the entry point of a routine. (First argument number is 0.) </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da78065c99b8462ff353115dc9f6419931" prot="public">
          <name>IARG_FUNCRET_EXITPOINT_REFERENCE</name>
          <briefdescription>
<para>Type: &quot;ADDRINT *&quot;. Pointer to function result. Valid only at return instruction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da19dc8d3703330b7b1e1064336dd235cf" prot="public">
          <name>IARG_FUNCRET_EXITPOINT_VALUE</name>
          <briefdescription>
<para>Type: ADDRINT. Function result. Valid only at return instruction. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da2c4a6ff4e8a076e0f39d24ab73ec7092" prot="public">
          <name>IARG_RETURN_IP</name>
          <briefdescription>
<para>Type: ADDRINT. Return address for function call, valid only at the function entry point. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da0425900c8991df5d840dd6d9f9b03295" prot="public">
          <name>IARG_ORIG_FUNCPTR</name>
          <briefdescription>
<para>Type: AFUNPTR. Function pointer to the relocated entry of the original uninstrumented function. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dad12677dad18848be51b49ea0f48e07cb" prot="public">
          <name>IARG_PROTOTYPE</name>
          <briefdescription>
<para>Type: PROTO. The function prototype of the application function. See <ref refid="group__PROTO" kindref="compound">PROTO API</ref>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451daadb6e5681193cc8435b9e57d13acf5d4" prot="public">
          <name>IARG_THREAD_ID</name>
          <briefdescription>
<para>Type: THREADID. Application thread id. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da25577a47a3c3945080ce1429959f3f1d" prot="public">
          <name>IARG_CONTEXT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: <ref refid="group__CONTEXT" kindref="compound">Context manipulation API</ref> *. Handle to access a context (architectural state). When passed at <ref refid="group__INST__ARGS_1gga707ea08e31f44f4a81e2a7766123bad7a42eff26179c6d87348abe492301c12ec" kindref="member">IPOINT_AFTER</ref> or <ref refid="group__INST__ARGS_1gga707ea08e31f44f4a81e2a7766123bad7a5ef5b45901a8447e5173f50746ab029d" kindref="member">IPOINT_TAKEN_BRANCH</ref>, PC points to the next instruction. Upon return from the analysis routine, Pin ignores any changes you&apos;ve made to the <ref refid="group__CONTEXT" kindref="compound">Context manipulation API</ref>. If you want to change register values, use <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da0337fbb99845733a3d35a9a3dbcfbf93" kindref="member">IARG_REG_REFERENCE</ref>, <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da6c8569ef37241134ffc6e24593275981" kindref="member">IARG_RETURN_REGS</ref>, or <ref refid="group__CONTEXT_1gade2217c59d6e6b5cad08a59afe3d879a" kindref="member">PIN_ExecuteAt</ref>. See <ref refid="group__INST__ARGS_1PROBE_IARGS" kindref="member">Probe Mode Considerations</ref> for probe mode restrictions. Not supported with the Buffering APIs. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dad3e65d643a63acb09d12b8538434ca45" prot="public">
          <name>IARG_CONST_CONTEXT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: <ref refid="group__CONTEXT" kindref="compound">Context manipulation API</ref> *. Like <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da25577a47a3c3945080ce1429959f3f1d" kindref="member">IARG_CONTEXT</ref>, but tool receives a read-only <ref refid="group__CONTEXT" kindref="compound">Context manipulation API</ref>*. <ref refid="group__CONTEXT_1ga83c0549f92440cf717c08689c47127cd" kindref="member">PIN_SetContextReg</ref>, <ref refid="group__CONTEXT_1gae96c2fa413d6009f9775cfebab49912f" kindref="member">PIN_SetContextRegval</ref> and <ref refid="group__CONTEXT_1ga147e92f2d15f95bd43cb6c8ea19057f4" kindref="member">PIN_SetContextFPState</ref> will not work with <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dad3e65d643a63acb09d12b8538434ca45" kindref="member">IARG_CONST_CONTEXT</ref>. The overhead of <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dad3e65d643a63acb09d12b8538434ca45" kindref="member">IARG_CONST_CONTEXT</ref> is considerably lower than that of <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da25577a47a3c3945080ce1429959f3f1d" kindref="member">IARG_CONTEXT</ref>. Tools that need a <ref refid="group__CONTEXT" kindref="compound">Context manipulation API</ref>* and only read from it should use <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dad3e65d643a63acb09d12b8538434ca45" kindref="member">IARG_CONST_CONTEXT</ref>. Tools that need a <ref refid="group__CONTEXT" kindref="compound">Context manipulation API</ref>* and only occasionally write into it should also use <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dad3e65d643a63acb09d12b8538434ca45" kindref="member">IARG_CONST_CONTEXT</ref>. One example of a tool that needs a <ref refid="group__CONTEXT" kindref="compound">Context manipulation API</ref> * and only occasionally writes into it, would be an emulator that would need to write into the <ref refid="group__CONTEXT" kindref="compound">Context manipulation API</ref> * only when an exception occurs, and then raise an exception with the <ref refid="group__CONTEXT" kindref="compound">Context manipulation API</ref> *. <ref refid="group__CONTEXT_1gabd0a55669ab303520f82e4f512e084f9" kindref="member">PIN_SaveContext</ref> can be used by the tool to get a writable copy of the <ref refid="group__CONTEXT" kindref="compound">Context manipulation API</ref> *. <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dad3e65d643a63acb09d12b8538434ca45" kindref="member">IARG_CONST_CONTEXT</ref> is available only in Jit mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dafbbb614d534693b8997f4a7db8fb7e29" prot="public">
          <name>IARG_PARTIAL_CONTEXT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: <ref refid="group__CONTEXT" kindref="compound">Context manipulation API</ref> *. Additional two <ref refid="group__REG_1ga8a33ca031ce83cf24d58dca8adf19f6c" kindref="member">REGSET</ref> * arguments are needed &apos;inSet&apos; and &apos;outSet&apos;. Like <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da25577a47a3c3945080ce1429959f3f1d" kindref="member">IARG_CONTEXT</ref>, but tool needs to define also which registers set it needs to read (inSet) and which registers set it may write (outSet). <ref refid="group__CONTEXT_1ga83c0549f92440cf717c08689c47127cd" kindref="member">PIN_SetContextReg</ref>, <ref refid="group__CONTEXT_1gae96c2fa413d6009f9775cfebab49912f" kindref="member">PIN_SetContextRegval</ref> and <ref refid="group__CONTEXT_1ga147e92f2d15f95bd43cb6c8ea19057f4" kindref="member">PIN_SetContextFPState</ref> will work only on registers that are in the outSet. These functions will change the actual application registers so there is no need to perform <ref refid="group__CONTEXT_1gade2217c59d6e6b5cad08a59afe3d879a" kindref="member">PIN_ExecuteAt</ref> as need to be done with <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da25577a47a3c3945080ce1429959f3f1d" kindref="member">IARG_CONTEXT</ref>. <ref refid="group__CONTEXT_1ga5b5aea73f92ac62e0767cb32bf8de4ed" kindref="member">PIN_GetContextReg</ref>, <ref refid="group__CONTEXT_1ga44f8eeba2b8b874087441df1c3a530e2" kindref="member">PIN_GetContextRegval</ref> and <ref refid="group__CONTEXT_1ga628d9e2f229dc5101142c94a5411d073" kindref="member">PIN_GetContextFPState</ref> will return unexpected values for registers not defined in the &apos;inSet&apos;. The overhead of <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dafbbb614d534693b8997f4a7db8fb7e29" kindref="member">IARG_PARTIAL_CONTEXT</ref> may lower than that of <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da25577a47a3c3945080ce1429959f3f1d" kindref="member">IARG_CONTEXT</ref> as there is no need to perform <ref refid="group__CONTEXT_1gade2217c59d6e6b5cad08a59afe3d879a" kindref="member">PIN_ExecuteAt</ref> to update registers. Tools that know which application registers are needed to be read should use <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dafbbb614d534693b8997f4a7db8fb7e29" kindref="member">IARG_PARTIAL_CONTEXT</ref> instead of <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dad3e65d643a63acb09d12b8538434ca45" kindref="member">IARG_CONST_CONTEXT</ref>. Thus may reduce the overhead as not fully updated context for read need to be provided. Tools that know which application registers are needed to be written other than REG_INST_PTR should use <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dafbbb614d534693b8997f4a7db8fb7e29" kindref="member">IARG_PARTIAL_CONTEXT</ref> instead of combination of <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da25577a47a3c3945080ce1429959f3f1d" kindref="member">IARG_CONTEXT</ref> and the use of <ref refid="group__CONTEXT_1gade2217c59d6e6b5cad08a59afe3d879a" kindref="member">PIN_ExecuteAt</ref> for registers update. If REG_INST_PTR needs to be updated <ref refid="group__CONTEXT_1gade2217c59d6e6b5cad08a59afe3d879a" kindref="member">PIN_ExecuteAt</ref> still needs to be used. Any updates to a register from the outSet of an <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dafbbb614d534693b8997f4a7db8fb7e29" kindref="member">IARG_PARTIAL_CONTEXT</ref> will be propagated to the application upon return from the analysis routine. Tools that want to update <ref refid="group__CONTEXT" kindref="compound">Context manipulation API</ref> registers without affecting application registers should use <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da25577a47a3c3945080ce1429959f3f1d" kindref="member">IARG_CONTEXT</ref>. <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dafbbb614d534693b8997f4a7db8fb7e29" kindref="member">IARG_PARTIAL_CONTEXT</ref> is available only in Jit mode. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da9289568da718031f0b70921f9ca4d0c8" prot="public">
          <name>IARG_PRESERVE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>Type: <ref refid="group__REG_1ga8a33ca031ce83cf24d58dca8adf19f6c" kindref="member">REGSET</ref> *. Used to specify registers whose values will be the same upon return from the analysis routine. Should be used to specify caller-saved registers which are preserved by the analysis routine. When a non-inlinable analysis routine preserves caller-saved registers, Pin can avoid generating code to preserve these registers, across the analysis call, if they are specified in the IARG_PRESERVE. e.g. if a non-inlinable analysis routine preserves the values in the x87 registers, then Pin can avoid generating code to preserve these registers, across the analysis call, if REG_X87 is specified in the <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da9289568da718031f0b70921f9ca4d0c8" kindref="member">IARG_PRESERVE</ref> e.g. if a non-inlinable analysis routine preserves the values in XMM caller saved registers, then Pin can avoid generating code to preserve these registers, across the analysis call, if those preserved XMM registers are specified in the <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da9289568da718031f0b70921f9ca4d0c8" kindref="member">IARG_PRESERVE</ref> <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da9289568da718031f0b70921f9ca4d0c8" kindref="member">IARG_PRESERVE</ref> must be followed by a <ref refid="group__REG_1ga8a33ca031ce83cf24d58dca8adf19f6c" kindref="member">REGSET</ref>* that points to the <ref refid="group__REG_1ga8a33ca031ce83cf24d58dca8adf19f6c" kindref="member">REGSET</ref> containing the registers preserved. See the <ref refid="group__REG_1ga0d287d13f9dc3f2fbffe24f217e12674" kindref="member">(REGSET_*)</ref> functions defined under <ref refid="group__REG" kindref="compound">REG: Register Object</ref> for <ref refid="group__REG_1ga8a33ca031ce83cf24d58dca8adf19f6c" kindref="member">REGSET</ref> construction and manipulation. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da6c8569ef37241134ffc6e24593275981" prot="public">
          <name>IARG_RETURN_REGS</name>
          <briefdescription>
<para>Register to write analysis function return value (additional register arg required). Not supported in Probe mode. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da45b6bfd69845ada4a0875967995ad7c6" prot="public">
          <name>IARG_CALL_ORDER</name>
          <briefdescription>
<para>Type: CALL_ORDER. Determine order of analysis calls. See <ref refid="group__INST__ARGS_1ga3d1d5f6805cb16d00bce441290ca2212" kindref="member">CALL_ORDER</ref>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dae11c26daf8993e626359a566d35d46d0" prot="public">
          <name>IARG_IARGLIST</name>
          <briefdescription>
<para>Type: IARGLIST. List of IARGS which can be constructed one IARG at a time. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da892dbdf11883df94c327bb31fd0d5fcd" prot="public">
          <name>IARG_FAST_ANALYSIS_CALL</name>
          <briefdescription>
<para>No type: Use a fast linkage to call the analysis function. See <ref refid="group__INST__ARGS_1ga5d3025eb005b7ea4745799f0ee1b86a6" kindref="member">PIN_FAST_ANALYSIS_CALL</ref>. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da985747a3c70e3a4283fc8a2f16399e63" prot="public">
          <name>IARG_MEMORYOP_EA</name>
          <briefdescription>
<para>Type: ADDRINT. Effective address of a memory op (memory op index is next arg); only valid at IPOINT_BEFORE. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451daa5b738f4179d2b6313ac517be1f5221d" prot="public">
          <name>IARG_MEMORYOP_SIZE</name>
          <briefdescription>
<para>Type: UINT32. Size of a memory op (memory op index is next arg) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da821b74fed6ac3d8740d73245b4f26a06" prot="public">
          <name>IARG_MEMORYOP_MASKED_ON</name>
          <briefdescription>
<para>Type: BOOL. TRUE if the this memory op (memory op index is next arg) is masked on; only valid at IPOINT_BEFORE. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da30acbbeded5e7e293324f81cc796ef7d" prot="public">
          <name>IARG_TSC</name>
          <briefdescription>
<para>Type: UINT64. Time Stamp Counter value at the point of entering the analysis call. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da2d2d4502ddc8de6d717c6878101c73df" prot="public">
          <name>IARG_FILE_NAME</name>
          <briefdescription>
<para>Reserved for internal use only. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da5a86209c9f24bebb204f1c435eb18d1c" prot="public">
          <name>IARG_LINE_NO</name>
          <briefdescription>
<para>Reserved for internal use only. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dad1fd7d0ac8f175d5340787ff3f3a2093" prot="public">
          <name>IARG_LAST</name>
          <briefdescription>
<para>Reserved for internal use only. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Determines the arguments that are passed to the analysis call. All argument lists must end with IARG_END. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="213" column="1" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="212" bodyend="487"/>
      </memberdef>
      <memberdef kind="enum" id="group__PROTO_1gacfd9f3c8dc22310ce9b9152e8c61b17c" prot="public" static="no" strong="no">
        <type></type>
        <name>CALLINGSTD_TYPE</name>
        <enumvalue id="group__PROTO_1ggacfd9f3c8dc22310ce9b9152e8c61b17cab9356d1105eea97545e153f33f7ddf9b" prot="public">
          <name>CALLINGSTD_INVALID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1ggacfd9f3c8dc22310ce9b9152e8c61b17cab4426e3fd0882208f24ac3bca5b0391b" prot="public">
          <name>CALLINGSTD_DEFAULT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1ggacfd9f3c8dc22310ce9b9152e8c61b17caae01501d96beda18d920f567cd347e82" prot="public">
          <name>CALLINGSTD_CDECL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1ggacfd9f3c8dc22310ce9b9152e8c61b17cad031a7ce159fab9cb7b922f6d211b296" prot="public">
          <name>CALLINGSTD_REGPARMS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1ggacfd9f3c8dc22310ce9b9152e8c61b17ca20ddf5750cf961e73eb62db9cfcc99d4" prot="public">
          <name>CALLINGSTD_STDCALL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1ggacfd9f3c8dc22310ce9b9152e8c61b17ca8aa22a3e1f6e806363a2781606a80214" prot="public">
          <name>CALLINGSTD_ART</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type of calling standards used for compiling the function. See <ref refid="group__PROTO_1gae01d20f7fd56e3eeebebe41009e7ff89" kindref="member">PROTO_Allocate()</ref> for its use. CALLINGSTD_DEFAULT is the default calling standard for the platform. This is the recommended option. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="513" column="1" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="512" bodyend="520"/>
      </memberdef>
      <memberdef kind="enum" id="group__PROTO_1ga59e26fa7c51d677aaac419e05bfb1305" prot="public" static="no" strong="no">
        <type></type>
        <name>PARG_TYPE</name>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305aa954d54f3565ad3166570fa6d5fcaee9" prot="public">
          <name>PARG_INVALID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305a6537308671c5d1f53e6408463d0ba423" prot="public">
          <name>PARG_POINTER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305af570117ca6bea4d34c51e386af1a73cd" prot="public">
          <name>PARG_BOOL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305ace0e239e4d394e187d1fb5a598ea15c0" prot="public">
          <name>PARG_CHAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305aec9f4f42942bcefea4a8eaa165526831" prot="public">
          <name>PARG_UCHAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305a36a97ecda7cf827e8c8bbcd52a4c2757" prot="public">
          <name>PARG_SCHAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305a8f1277c9d0965d22c8b9ccaea85284fc" prot="public">
          <name>PARG_SHORT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305aed0c924324e06d6ef2a3de3ddde46670" prot="public">
          <name>PARG_USHORT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305a7d4e81b067c9e4cedbc35116efee0140" prot="public">
          <name>PARG_INT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305a9507a20369a01428003476448a49223b" prot="public">
          <name>PARG_UINT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305ac92a60ffb8d07d2f599905a687d64ac3" prot="public">
          <name>PARG_LONG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305af88e35563f4175519b83f2ab2f4f6dae" prot="public">
          <name>PARG_ULONG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305ad2623e324b42a2b14c5bd9307815ce49" prot="public">
          <name>PARG_LONGLONG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305a42fd83683ea2c07dc490e0d86fc5fdef" prot="public">
          <name>PARG_ULONGLONG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305ac1bfe771252ca23f5bdc4db35be092c6" prot="public">
          <name>PARG_FLOAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305a4b8726164b8111b40deaf9b59a30543c" prot="public">
          <name>PARG_DOUBLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305aba08fc24bb059cc6c4fce984af45ca10" prot="public">
          <name>PARG_VOID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305a8b439498c67756de41071309ece934ff" prot="public">
          <name>PARG_ENUM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305afb290295f3604b3fdca915251bf298be" prot="public">
          <name>PARG_AGGREGATE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305a09bec200de31c6e492ffaff7f031490c" prot="public">
          <name>PARG_END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function prototype argument types. See <ref refid="group__PROTO_1gae01d20f7fd56e3eeebebe41009e7ff89" kindref="member">PROTO_Allocate()</ref> for its use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="528" column="1" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="527" bodyend="549"/>
      </memberdef>
      <memberdef kind="enum" id="group__INST__ARGS_1ga624ddd00f45938da5eb525afc5b43195" prot="public" static="no" strong="no">
        <type></type>
        <name>PIN_MEMOP_ENUM</name>
        <enumvalue id="group__INST__ARGS_1gga624ddd00f45938da5eb525afc5b43195a92b81dc0e38fb070c4a6f59fe87f527e" prot="public">
          <name>PIN_MEMOP_LOAD</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga624ddd00f45938da5eb525afc5b43195a7593d3ed019ad6ead358ed6301257606" prot="public">
          <name>PIN_MEMOP_STORE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>used in the Type whose address is passed to analysis routine when IARG_MULTI_MEMORYACCESS_EA is requested </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="826" column="1" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="825" bodyend="829"/>
      </memberdef>
      <memberdef kind="enum" id="group__INST__ARGS_1ga16b7ac266c4c1323b18396be70279eb0" prot="public" static="no" strong="no">
        <type></type>
        <name>PIN_OP_ELEMENT_ACCESS</name>
        <enumvalue id="group__INST__ARGS_1gga16b7ac266c4c1323b18396be70279eb0a0175fce8dbd0864dc8c60c0cf1d215d2" prot="public">
          <name>PIN_OP_ELEMENT_ACCESS_READ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga16b7ac266c4c1323b18396be70279eb0a687e8f4b92e5b26d4ed1c464e7a21363" prot="public">
          <name>PIN_OP_ELEMENT_ACCESS_WRITE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INST__ARGS_1gga16b7ac266c4c1323b18396be70279eb0afffaf538a90fa5ed31ffd95ded173717" prot="public">
          <name>PIN_OP_ELEMENT_ACCESS_READWRITE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Element Access type used in <ref refid="classIMULTI__ELEMENT__OPERAND" kindref="compound">IMULTI_ELEMENT_OPERAND</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="864" column="1" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="863" bodyend="868"/>
      </memberdef>
      <memberdef kind="enum" id="group__APPDEBUG_1ga41e814fff526e0232f2f8c3055d6e88b" prot="public" static="no" strong="no">
        <type></type>
        <name>DEBUG_STATUS</name>
        <enumvalue id="group__APPDEBUG_1gga41e814fff526e0232f2f8c3055d6e88ba72ca0db67ae970e3c62a40b5ac4f7003" prot="public">
          <name>DEBUG_STATUS_DISABLED</name>
          <briefdescription>
<para>Application debugging is not enabled in this Pin session. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__APPDEBUG_1gga41e814fff526e0232f2f8c3055d6e88ba8360ff1aaecfe81589ca624db3618367" prot="public">
          <name>DEBUG_STATUS_UNCONNECTABLE</name>
          <briefdescription>
<para>Application debugging is enabled, but it is too early to allow a debugger to connect. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__APPDEBUG_1gga41e814fff526e0232f2f8c3055d6e88ba994b4c3ad3ae17936ecf71deaadf1f80" prot="public">
          <name>DEBUG_STATUS_UNCONNECTED</name>
          <briefdescription>
<para>Application debugging is enabled, but no debugger is connected yet. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__APPDEBUG_1gga41e814fff526e0232f2f8c3055d6e88bac55ed4b18e05f4dcd13a38bbe6ee6cb7" prot="public">
          <name>DEBUG_STATUS_CONNECTED</name>
          <briefdescription>
<para>Application debugging is enabled and a debugger is connected. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Possible status codes telling the state of application level debugging. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="986" column="1" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="985" bodyend="991"/>
      </memberdef>
      <memberdef kind="enum" id="group__APPDEBUG_1ga25f41d731fbc522fea67abd02f9c04c6" prot="public" static="no" strong="no">
        <type></type>
        <name>DEBUG_CONNECTION_TYPE</name>
        <enumvalue id="group__APPDEBUG_1gga25f41d731fbc522fea67abd02f9c04c6a48023b1450d43ba2c4190432e50fcb44" prot="public">
          <name>DEBUG_CONNECTION_TYPE_NONE</name>
          <briefdescription>
<para>Application debugging is disabled in this session. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__APPDEBUG_1gga25f41d731fbc522fea67abd02f9c04c6abc9902ef5ebfac00333f6ce7bd00cd57" prot="public">
          <name>DEBUG_CONNECTION_TYPE_TCP_SERVER</name>
          <briefdescription>
<para>Pin opens a TCP port and waits for a debugger to connect. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__APPDEBUG_1gga25f41d731fbc522fea67abd02f9c04c6a656476b26189f8de3f70603ce19a3640" prot="public">
          <name>DEBUG_CONNECTION_TYPE_TCP_CLIENT</name>
          <briefdescription>
<para>Pin connects to a TCP port opened by the debugger. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Possible connection types for an application debugger. The connection type can be specified either via the -appdebug knobs or by <ref refid="group__APPDEBUG_1ga15e52a111880529d439946eb392dd992" kindref="member">PIN_SetDebugMode()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="998" column="1" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="997" bodyend="1002"/>
      </memberdef>
      <memberdef kind="enum" id="group__APPDEBUG_1ga87ad53f06ecf9cbcd3b94a155e1c11b5" prot="public" static="no" strong="no">
        <type></type>
        <name>DEBUGGER_TYPE</name>
        <enumvalue id="group__APPDEBUG_1gga87ad53f06ecf9cbcd3b94a155e1c11b5a36c70d872b32db70ffa16fb1f9a1e698" prot="public">
          <name>DEBUGGER_TYPE_UNKNOWN</name>
          <briefdescription>
<para>No debugger connected, or type is unknown. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__APPDEBUG_1gga87ad53f06ecf9cbcd3b94a155e1c11b5a93747991bbf93bec18a63aa0def7502a" prot="public">
          <name>DEBUGGER_TYPE_GDB</name>
          <briefdescription>
<para>The GNU debugger. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__APPDEBUG_1gga87ad53f06ecf9cbcd3b94a155e1c11b5ae257dd6ee7c4c21be32afc5dfa4145ee" prot="public">
          <name>DEBUGGER_TYPE_LLDB</name>
          <briefdescription>
<para>The LLVM debugger. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__APPDEBUG_1gga87ad53f06ecf9cbcd3b94a155e1c11b5a215d036d52fcd8a1d9d0655c0915983f" prot="public">
          <name>DEBUGGER_TYPE_IDB</name>
          <briefdescription>
<para>The Intel debugger. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__APPDEBUG_1gga87ad53f06ecf9cbcd3b94a155e1c11b5a382d02f0500b212562d3278dee138b3c" prot="public">
          <name>DEBUGGER_TYPE_VISUAL_STUDIO_VSDBG</name>
          <briefdescription>
<para>Visual Studio via VSDBG. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__APPDEBUG_1gga87ad53f06ecf9cbcd3b94a155e1c11b5aa51709dd57db7e6200b154e9b1cb71d7" prot="public">
          <name>DEBUGGER_TYPE_VISUAL_STUDIO</name>
          <briefdescription>
<para>Visual Studio via native connection. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Application debugger types that could be connected to Pin. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="1008" column="1" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="1007" bodyend="1015"/>
      </memberdef>
      <memberdef kind="enum" id="group__APPDEBUG_1gaf8cf023622aae11218cc9c911b906deb" prot="public" static="no" strong="no">
        <type></type>
        <name>DEBUG_MODE_OPTION</name>
        <enumvalue id="group__APPDEBUG_1ggaf8cf023622aae11218cc9c911b906deba83aab8069eb6913be66d65a272343f4f" prot="public">
          <name>DEBUG_MODE_OPTION_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>No options specified. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__APPDEBUG_1ggaf8cf023622aae11218cc9c911b906debad239403d750fcc2bd58f07d609c9962a" prot="public">
          <name>DEBUG_MODE_OPTION_STOP_AT_ENTRY</name>
          <initializer>= (1 &lt;&lt; 0)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>If this option is set, Pin stops the application at the first instruction and execution remains stopped until a debugger connects and continues the application. If this option is cleared, the application immediately runs when <ref refid="group__PIN__CONTROL_1gab466cd00518ff315446c92f98f7ea1a0" kindref="member">PIN_StartProgram()</ref> is called. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__APPDEBUG_1ggaf8cf023622aae11218cc9c911b906deba723c132474f30b96833655fba66a3cf5" prot="public">
          <name>DEBUG_MODE_OPTION_SILENT</name>
          <initializer>= (1 &lt;&lt; 1)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>If debugging is enabled Pin normally prints a message to the console when <ref refid="group__PIN__CONTROL_1gab466cd00518ff315446c92f98f7ea1a0" kindref="member">PIN_StartProgram()</ref> is called which tells the user how to connect a debugger. This option suppresses the message. </para>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__APPDEBUG_1ggaf8cf023622aae11218cc9c911b906deba4e65fd1fd0aadcefd334b4824965eaf7" prot="public">
          <name>DEBUG_MODE_OPTION_ALLOW_REMOTE</name>
          <initializer>= (1 &lt;&lt; 2)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>By default, Pin only listens for a debugger&apos;s TCP connection on the local machine. If this option is enabled, Pin will also listen for a connection from a remote machine. </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Options which affect application debugging. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="1021" column="1" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="1020" bodyend="1045"/>
      </memberdef>
      <memberdef kind="enum" id="group__PIN__CONTROL_1ga4e114852e46d5d839d6e71e242709777" prot="public" static="no" strong="no">
        <type></type>
        <name>PIN_CALLBACK_TYPE</name>
        <enumvalue id="group__PIN__CONTROL_1gga4e114852e46d5d839d6e71e242709777af6f04d87615566deb3bd49ec1e3468ef" prot="public">
          <name>PIN_CALLBACK_TYPE_NONE</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>None of the callback types. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PIN__CONTROL_1gga4e114852e46d5d839d6e71e242709777ae9e0416b9e54e38bc1cf69956f81bc2c" prot="public">
          <name>PIN_CALLBACK_TYPE_SYSCALL</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>Syscall entry/exit callback. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Types of Pin callbacks. These type could be used with the function <ref refid="group__PIN__CONTROL_1gaaf30fb0e2832f9ce1016b9c751547d17" kindref="member">PIN_SetAllowedConcurrentCallbacks()</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="1184" column="1" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="1183" bodyend="1187"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__BUFFER_1gaee232a4179b4897b5869a6d5fc98d032" prot="public" static="no">
        <type>UINT32</type>
        <definition>typedef UINT32 BUFFER_ID</definition>
        <argsstring></argsstring>
        <name>BUFFER_ID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tool buffer ID assigned by Pin. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="87" column="16" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="87" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="types__vmapi_8PH_1a48f59a9736d35c489d141e785df0e7ee" prot="public" static="no">
        <type>UINT32</type>
        <definition>typedef UINT32 DEBUG_MODE_OPTIONS</definition>
        <argsstring></argsstring>
        <name>DEBUG_MODE_OPTIONS</name>
        <briefdescription>
<para>A bit-wise &apos;or&apos; of DEBUG_MODE_OPTION&apos;s. </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="95" column="16" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="95" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__CONTEXT_1ga73f8f88949aaecf53a6d23f56399c676" prot="public" static="no">
        <type>struct <ref refid="structCONTEXT" kindref="compound">CONTEXT</ref></type>
        <definition>typedef struct CONTEXT CONTEXT</definition>
        <argsstring></argsstring>
        <name>CONTEXT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Architectural state of the processor.<linebreak/>
The tool should not read or modify data members of this structure directly, but must treat the structure as logically opaque and use the <ref refid="group__CONTEXT" kindref="compound">Context manipulation API</ref> functions to manage it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="95" column="16" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="115" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PHYSICAL__CONTEXT_1ga3c6833a027db42b5d528a0c65cefbc07" prot="public" static="no">
        <type>struct <ref refid="structPHYSICAL__CONTEXT" kindref="compound">PHYSICAL_CONTEXT</ref></type>
        <definition>typedef struct PHYSICAL_CONTEXT PHYSICAL_CONTEXT</definition>
        <argsstring></argsstring>
        <name>PHYSICAL_CONTEXT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Physical state of the processor.<linebreak/>
The tool should not read or modify data members of this structure directly, but must treat the structure as logically opaque and use the <ref refid="group__PHYSICAL__CONTEXT" kindref="compound">Physical context manipulation API</ref> functions to manage it. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="95" column="16" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__INST__ARGS_1gafbeb707dc23c7c09e1e8c932649107d5" prot="public" static="no">
        <type>IARGLIST_CLASS *</type>
        <definition>typedef IARGLIST_CLASS* IARGLIST</definition>
        <argsstring></argsstring>
        <name>IARGLIST</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of IARG_TYPE elements. See <ref refid="group__INST__ARGS_1ga3d3e1e48b6fe3d71cb9f04a202ac55d7" kindref="member">IARGLIST_Alloc()</ref> for its use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="787" column="24" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="781" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__PROTO_1ga554ff954c3ea33bb537f30e3b500ef1c" prot="public" static="no">
        <type>PROTO_CLASS *</type>
        <definition>typedef PROTO_CLASS* PROTO</definition>
        <argsstring></argsstring>
        <name>PROTO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of function prototype arguments. See <ref refid="group__PROTO_1gae01d20f7fd56e3eeebebe41009e7ff89" kindref="member">PROTO_Allocate()</ref> for its use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="936" column="21" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="936" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__THREADS_1ga645289be59039349ad77ad2fa7b0e2f3" prot="public" static="no">
        <type>UINT32</type>
        <definition>typedef UINT32 THREADID</definition>
        <argsstring></argsstring>
        <name>THREADID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thread ID assigned by PIN. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="941" column="16" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="941" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__THREADS_1ga057233f26b54f23b1ddb0c0c5e31dba9" prot="public" static="no">
        <type>UINT64</type>
        <definition>typedef UINT64 PIN_THREAD_UID</definition>
        <argsstring></argsstring>
        <name>PIN_THREAD_UID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Unique thread ID which, unlike THREADID identifier, is not reused by Pin after the thread termination. The uniqueness of this identifier allows to use it in the <ref refid="group__THREADS_1gaddd0dc2709292f807cb233e5ec0f809a" kindref="member">PIN_WaitForThreadTermination()</ref> function which monitors the thread&apos;s state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="953" column="16" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="953" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__THREADS_1ga1c9cdcd6c1baf15e17c2eb305a16e25e" prot="public" static="no">
        <type>NATIVE_TID</type>
        <definition>typedef NATIVE_TID OS_THREAD_ID</definition>
        <argsstring></argsstring>
        <name>OS_THREAD_ID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Thread ID assigned by OS. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="963" column="20" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="963" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__THREADS_1gaf7d4b7206749ac3075b941a513d876c5" prot="public" static="no">
        <type>VOID</type>
        <definition>typedef VOID ROOT_THREAD_FUNC(VOID *arg)</definition>
        <argsstring>(VOID *arg)</argsstring>
        <name>ROOT_THREAD_FUNC</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Main (starting) function of a thread. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">arg</parametername>
</parameternamelist>
<parameterdescription>
<para>argument of the main thread function, as specified by the thread creator. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="975" column="14" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="975" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="group__THREADS_1ga2bf6029042d57fb825536c795c94d1ed" prot="public" static="no">
        <type>UINT32</type>
        <definition>typedef UINT32 OS_PROCESS_ID</definition>
        <argsstring></argsstring>
        <name>OS_PROCESS_ID</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Process ID assigned by OS. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="980" column="16" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="980" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__CONTEXT_1ga63af62bca2c39be3fd6edd57ad2ac5c3" prot="public" static="no" mutable="no">
        <type>const ADDRINT</type>
        <definition>const ADDRINT DEFAULT_CONTEXT_IMPL</definition>
        <argsstring></argsstring>
        <name>DEFAULT_CONTEXT_IMPL</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A constant that designates default (canonical) <ref refid="structCONTEXT" kindref="compound">CONTEXT</ref> implementation. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="54" column="15" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__BUFFER_1gaf379010b4b5cf3316089bb041ce5c02b" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__BUFFER_1gaee232a4179b4897b5869a6d5fc98d032" kindref="member">BUFFER_ID</ref></type>
        <definition>const BUFFER_ID BUFFER_ID_INVALID</definition>
        <argsstring></argsstring>
        <name>BUFFER_ID_INVALID</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ID returned if defining a buffer fails. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="93" column="17" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="93" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__INST__ARGS_1ga2a86c3c95b207c7c02b7b5c64311dd09" prot="public" static="no" mutable="no">
        <type>const int</type>
        <definition>const int MAX_MULTI_MEMOPS</definition>
        <argsstring></argsstring>
        <name>MAX_MULTI_MEMOPS</name>
        <initializer>= 16</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="846" column="11" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="846" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__THREADS_1ga6f1b19d7792c8c6f4547fd9d3dabb427" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__THREADS_1ga645289be59039349ad77ad2fa7b0e2f3" kindref="member">THREADID</ref></type>
        <definition>const THREADID INVALID_THREADID</definition>
        <argsstring></argsstring>
        <name>INVALID_THREADID</name>
        <initializer>= static_cast&lt; <ref refid="group__THREADS_1ga645289be59039349ad77ad2fa7b0e2f3" kindref="member">THREADID</ref> &gt;(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invalid value of the THREADID type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="946" column="16" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="946" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__THREADS_1gadea3bf4ebf6808cbc830c0735c9285ad" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__THREADS_1ga057233f26b54f23b1ddb0c0c5e31dba9" kindref="member">PIN_THREAD_UID</ref></type>
        <definition>const PIN_THREAD_UID INVALID_PIN_THREAD_UID</definition>
        <argsstring></argsstring>
        <name>INVALID_PIN_THREAD_UID</name>
        <initializer>= static_cast&lt; <ref refid="group__THREADS_1ga057233f26b54f23b1ddb0c0c5e31dba9" kindref="member">PIN_THREAD_UID</ref> &gt;(-1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invalid value of the PIN_THREAD_UID type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="958" column="22" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="958" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__THREADS_1gafb51a301378b609eaeffa48de3355945" prot="public" static="no" mutable="no">
        <type>const <ref refid="group__THREADS_1ga1c9cdcd6c1baf15e17c2eb305a16e25e" kindref="member">OS_THREAD_ID</ref></type>
        <definition>const OS_THREAD_ID INVALID_OS_THREAD_ID</definition>
        <argsstring></argsstring>
        <name>INVALID_OS_THREAD_ID</name>
        <initializer>= INVALID_NATIVE_TID</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Invalid value of the OS_THREAD_ID type. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="968" column="20" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="968" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="types__vmapi_8PH_1a631bdef7c37bc455d6b6510a297c7b6f" prot="public" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structPARG__T" kindref="compound">PARG_T</ref></type>
        <definition>static PARG_T _PinParg</definition>
        <argsstring>(PARG_TYPE p, size_t s)</argsstring>
        <name>_PinParg</name>
        <param>
          <type><ref refid="group__PROTO_1ga59e26fa7c51d677aaac419e05bfb1305" kindref="member">PARG_TYPE</ref></type>
          <declname>p</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="769" column="22" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="769" bodyend="775"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2021-2022<sp/>Intel<sp/>Corporation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*<sp/>This<sp/>file<sp/>contains<sp/>types<sp/>that<sp/>are<sp/>in<sp/>LEVEL_VM<sp/>and<sp/>are<sp/>part<sp/>of<sp/>the<sp/>Pin</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>tool<sp/>API.<sp/>This<sp/>is<sp/>necessary<sp/>because<sp/>the<sp/>pin<sp/>client<sp/>does<sp/>not<sp/>link<sp/>against</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>the<sp/>vm<sp/>and<sp/>does<sp/>not<sp/>include<sp/>vm<sp/>header<sp/>files.</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>TYPES_VMAPI_PH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>TYPES_VMAPI_PH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__APPDEBUG_1gad6ae164e2005bda040921f234730cb5a" kindref="member">DEBUGGING_EVENT</ref></highlight></codeline>
<codeline lineno="21"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1ggad6ae164e2005bda040921f234730cb5aad5cc78dfe7674fb92a5fb4a7648d00d9" kindref="member">DEBUGGING_EVENT_BREAKPOINT</ref>,</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1ggad6ae164e2005bda040921f234730cb5aa2b7b5b57923d2c0fd4dfee4a4a2e4b73" kindref="member">DEBUGGING_EVENT_SINGLE_STEP</ref>,<sp/></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1ggad6ae164e2005bda040921f234730cb5aa5d342e07a5c1d8f4707af1c8d1835f5c" kindref="member">DEBUGGING_EVENT_ASYNC_BREAK</ref></highlight></codeline>
<codeline lineno="35"><highlight class="normal">};</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="40" refid="structDEBUGGER__REG__DESCRIPTION" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDEBUGGER__REG__DESCRIPTION" kindref="compound">DEBUGGER_REG_DESCRIPTION</ref></highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref><sp/><ref refid="structDEBUGGER__REG__DESCRIPTION_1ad31b616fd23aeea229a56202a0d0d654" kindref="member">_pinReg</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structDEBUGGER__REG__DESCRIPTION_1ac9885a7c9d680b3668ccc06b25e92ab6" kindref="member">_toolRegId</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/><ref refid="structDEBUGGER__REG__DESCRIPTION_1a6539b5c392359a401f6d8372c1595bac" kindref="member">_widthInBits</ref>;<sp/></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="structDEBUGGER__REG__DESCRIPTION_1a2ebf3a3953800df85e849d1c0ead9a80" kindref="member">_name</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="structDEBUGGER__REG__DESCRIPTION_1aeed9c19677c11949e5db2467901ac955" kindref="member">_gccId</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal">};</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="group__CONTEXT_1ga63af62bca2c39be3fd6edd57ad2ac5c3" kindref="member">DEFAULT_CONTEXT_IMPL</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="59" refid="structCONTEXT" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCONTEXT" kindref="compound">CONTEXT</ref></highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCONTEXT_1a84cc77c0c694de74a7c02ed4a5c6fe49" kindref="member">CONTEXT</ref>()<sp/>:<sp/><ref refid="structCONTEXT_1a2936c81df3cb8e0a4eee037827489346" kindref="member">_impl</ref>(<ref refid="group__CONTEXT_1ga63af62bca2c39be3fd6edd57ad2ac5c3" kindref="member">DEFAULT_CONTEXT_IMPL</ref>)<sp/>{<sp/>memset(<ref refid="structCONTEXT_1a6f0b057949eba820fe0d0f6a0814ff91" kindref="member">_state</ref>,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(CHAR)<sp/>*<sp/><ref refid="group__CONTEXT_1ga15b5de856336b8d0452a63a746bb9c61" kindref="member">ARCH_STATE_SIZE</ref>);<sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>ADDRINT<sp/><ref refid="structCONTEXT_1a2936c81df3cb8e0a4eee037827489346" kindref="member">_impl</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>CHAR<sp/><ref refid="structCONTEXT_1a6f0b057949eba820fe0d0f6a0814ff91" kindref="member">_state</ref>[<ref refid="group__CONTEXT_1ga15b5de856336b8d0452a63a746bb9c61" kindref="member">ARCH_STATE_SIZE</ref>];<sp/></highlight></codeline>
<codeline lineno="68"><highlight class="normal">};</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="73" refid="structPHYSICAL__CONTEXT" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structPHYSICAL__CONTEXT" kindref="compound">PHYSICAL_CONTEXT</ref></highlight></codeline>
<codeline lineno="74"><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structPHYSICAL__CONTEXT_1a015fd777d5b8ec586aefcd08cc8b2684" kindref="member">PHYSICAL_CONTEXT</ref>(<ref refid="structCONTEXT" kindref="compound">CONTEXT</ref>*<sp/>pCtxt)<sp/>:<sp/><ref refid="structPHYSICAL__CONTEXT_1a277ca8973c1daa1d301522cee1f930b2" kindref="member">_pCtxt</ref>(pCtxt)<sp/>{}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structCONTEXT" kindref="compound">CONTEXT</ref>*<sp/><ref refid="structPHYSICAL__CONTEXT_1a277ca8973c1daa1d301522cee1f930b2" kindref="member">_pCtxt</ref>;<sp/></highlight></codeline>
<codeline lineno="81"><highlight class="normal">};</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="group__BUFFER_1gaee232a4179b4897b5869a6d5fc98d032" kindref="member">BUFFER_ID</ref>;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__BUFFER_1gaee232a4179b4897b5869a6d5fc98d032" kindref="member">BUFFER_ID</ref><sp/><ref refid="group__BUFFER_1gaf379010b4b5cf3316089bb041ce5c02b" kindref="member">BUFFER_ID_INVALID</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>UINT32<sp/>DEBUG_MODE_OPTIONS;<sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__CONTEXT_1ga479f2b92361e3794145bb90a1ea7e027" kindref="member">PROCESSOR_STATE</ref></highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__CONTEXT_1gga479f2b92361e3794145bb90a1ea7e027a940f194773d13bfe7b71a589b3d6a29a" kindref="member">PROCESSOR_STATE_X87</ref>,<sp/></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__CONTEXT_1gga479f2b92361e3794145bb90a1ea7e027ada893eda0a2fdd23742fb5d9f4ba25a7" kindref="member">PROCESSOR_STATE_XMM</ref>,<sp/></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__CONTEXT_1gga479f2b92361e3794145bb90a1ea7e027a15481af1dfee3eb0845669e533b2d5e6" kindref="member">PROCESSOR_STATE_YMM</ref>,<sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__CONTEXT_1gga479f2b92361e3794145bb90a1ea7e027a32f9fcc0e7c055726930ee8d563ea248" kindref="member">PROCESSOR_STATE_ZMM</ref>,<sp/></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__CONTEXT_1gga479f2b92361e3794145bb90a1ea7e027a6e4756c74bb9d4ac33e6162e3352a988" kindref="member">PROCESSOR_STATE_TMM</ref><sp/><sp/></highlight></codeline>
<codeline lineno="107"><highlight class="normal">};</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structCONTEXT" kindref="compound">CONTEXT</ref><sp/><ref refid="structCONTEXT" kindref="compound">CONTEXT</ref>;</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structPHYSICAL__CONTEXT" kindref="compound">PHYSICAL_CONTEXT</ref><sp/><ref refid="structPHYSICAL__CONTEXT" kindref="compound">PHYSICAL_CONTEXT</ref>;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>IPOINT_INVALID,</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga707ea08e31f44f4a81e2a7766123bad7a7c7cbebb7a62a40e9f803b1db2e6ce20" kindref="member">IPOINT_BEFORE</ref>,<sp/></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga707ea08e31f44f4a81e2a7766123bad7a42eff26179c6d87348abe492301c12ec" kindref="member">IPOINT_AFTER</ref>,</highlight></codeline>
<codeline lineno="146"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga707ea08e31f44f4a81e2a7766123bad7acf7dee2063098dd79907d19f9c7df65d" kindref="member">IPOINT_ANYWHERE</ref>,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga707ea08e31f44f4a81e2a7766123bad7a5ef5b45901a8447e5173f50746ab029d" kindref="member">IPOINT_TAKEN_BRANCH</ref></highlight></codeline>
<codeline lineno="156"><highlight class="normal">}<sp/><ref refid="group__INST__ARGS_1ga707ea08e31f44f4a81e2a7766123bad7" kindref="member">IPOINT</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__PIN__CONTROL_1ga8e4e6511a0e09fdc5ec7d6dbf395b3a8" kindref="member">CONTEXT_CHANGE_REASON</ref></highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PIN__CONTROL_1gga8e4e6511a0e09fdc5ec7d6dbf395b3a8ae712c798df1d0e94022f6382a4c8239e" kindref="member">CONTEXT_CHANGE_REASON_FATALSIGNAL</ref>,<sp/></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PIN__CONTROL_1gga8e4e6511a0e09fdc5ec7d6dbf395b3a8a43b8b032e969e0e5d14a3ed7385f29db" kindref="member">CONTEXT_CHANGE_REASON_SIGNAL</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PIN__CONTROL_1gga8e4e6511a0e09fdc5ec7d6dbf395b3a8a7e8b6943c9aa3a85b0a9cd23bc738dd9" kindref="member">CONTEXT_CHANGE_REASON_SIGRETURN</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PIN__CONTROL_1gga8e4e6511a0e09fdc5ec7d6dbf395b3a8a641c250ce491d66cc19f1205160dc279" kindref="member">CONTEXT_CHANGE_REASON_APC</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PIN__CONTROL_1gga8e4e6511a0e09fdc5ec7d6dbf395b3a8ae4c034a98f8eba91b2f8ac5b2543492b" kindref="member">CONTEXT_CHANGE_REASON_EXCEPTION</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PIN__CONTROL_1gga8e4e6511a0e09fdc5ec7d6dbf395b3a8a5b48097c22e4fcfdf12650129f364b50" kindref="member">CONTEXT_CHANGE_REASON_CALLBACK</ref><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="169"><highlight class="normal">};</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="174"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__PIN__CONTROL_1ga8c5c16fb133375efa3a27d3a3900c603" kindref="member">EXCEPT_HANDLING_RESULT</ref></highlight></codeline>
<codeline lineno="175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PIN__CONTROL_1gga8c5c16fb133375efa3a27d3a3900c603a32e365f541f4ea48f730a030185558cd" kindref="member">EHR_HANDLED</ref>,<sp/></highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PIN__CONTROL_1gga8c5c16fb133375efa3a27d3a3900c603ab394692e0b4ad2fda77e7597c75c9599" kindref="member">EHR_UNHANDLED</ref>,<sp/></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PIN__CONTROL_1gga8c5c16fb133375efa3a27d3a3900c603a1950501612b017bd8db1634f7dc8bf8f" kindref="member">EHR_CONTINUE_SEARCH</ref><sp/></highlight></codeline>
<codeline lineno="182"><highlight class="normal">};</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__INST__ARGS_1ga3d1d5f6805cb16d00bce441290ca2212" kindref="member">CALL_ORDER</ref></highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga3d1d5f6805cb16d00bce441290ca2212a3f53c3878be5c2859b82b540561b72b3" kindref="member">CALL_ORDER_FIRST</ref><sp/><sp/><sp/>=<sp/>100,<sp/></highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga3d1d5f6805cb16d00bce441290ca2212a43af3c7aa24c81dddf629b2828b8354c" kindref="member">CALL_ORDER_DEFAULT</ref><sp/>=<sp/>200,<sp/></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga3d1d5f6805cb16d00bce441290ca2212a0b197a15a2399e6443ce6be187ccf6c6" kindref="member">CALL_ORDER_LAST</ref><sp/><sp/><sp/><sp/>=<sp/>300<sp/><sp/></highlight></codeline>
<codeline lineno="205"><highlight class="normal">};</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal">{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>IARG_INVALID,</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da34126f334d65afac69784351a03615ad" kindref="member">IARG_ADDRINT</ref>,<sp/></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da7a11763427dff3afb81caab97b02881b" kindref="member">IARG_PTR</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dacac3cb99011b351eeb3f675bc8c62b83" kindref="member">IARG_BOOL</ref>,<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dabd19b79248899659441e56e4738d5bfd" kindref="member">IARG_UINT32</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dab2d3f91c48319ea5e824fdc678ae4a5c" kindref="member">IARG_UINT64</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da623ad95758bce14fcb9427beef53736a" kindref="member">IARG_INST_PTR</ref>,</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dabe70796bf61230dac3ea1deaf4983c46" kindref="member">IARG_REG_VALUE</ref>,</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da0337fbb99845733a3d35a9a3dbcfbf93" kindref="member">IARG_REG_REFERENCE</ref>,</highlight></codeline>
<codeline lineno="251"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da817f3f2fe8c0c536daa86deb55126c25" kindref="member">IARG_REG_CONST_REFERENCE</ref>,</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da2138787daf04a57e6684eb0b368e120e" kindref="member">IARG_MEMORYREAD_EA</ref>,<sp/></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da2931627e96b437dc55e06966d31ad962" kindref="member">IARG_MEMORYREAD2_EA</ref>,<sp/></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da92be352ec619bbd3be69fed773c011a2" kindref="member">IARG_MEMORYWRITE_EA</ref>,<sp/></highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dad2e2d24103d1a0286b57412f66b909d7" kindref="member">IARG_MEMORYREAD_SIZE</ref>,</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da365d8eed26ac239b013a01ab6a7cf375" kindref="member">IARG_MEMORYWRITE_SIZE</ref>,</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>IARG_MEMORY*_PTR<sp/>argument<sp/>represents<sp/>actual<sp/>address<sp/>of<sp/>the<sp/>memory<sp/>access,<sp/>even<sp/>if<sp/>the<sp/>operand<sp/>is<sp/>rewritten</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>or<sp/>a<sp/>memory<sp/>translation<sp/>callback<sp/>is<sp/>registered</highlight></codeline>
<codeline lineno="304"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da4b127f5e8c89aabe67abb6d04ee8ecce" kindref="member">IARG_MEMORYREAD_PTR</ref>,</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da96d283a176b568500d63a7b8ad2558ed" kindref="member">IARG_MEMORYREAD2_PTR</ref>,</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da9fead51aa9d72879eadd61ae5cb00e98" kindref="member">IARG_MEMORYWRITE_PTR</ref>,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da52ab7563efadafe484b53421e42ec8b1" kindref="member">IARG_MEMORYOP_PTR</ref>,</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451daa60ade75a81b448320631155e84829a6" kindref="member">IARG_MULTI_MEMORYACCESS_EA</ref>,</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da581b5886a7e69629a45607ac34adbf2c" kindref="member">IARG_MULTI_ELEMENT_OPERAND</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451daf366ff3d1e14bc23162ad18c47b63c1f" kindref="member">IARG_REWRITE_SCATTERED_MEMOP</ref>,</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da87c9a713268fea1c9ddb157aa0a475eb" kindref="member">IARG_EXPLICIT_MEMORY_EA</ref>,<sp/></highlight></codeline>
<codeline lineno="342"><highlight class="normal"></highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da28140354d575f6b6404a6833552fed47" kindref="member">IARG_BRANCH_TAKEN</ref>,<sp/></highlight></codeline>
<codeline lineno="344"><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451daa1b650f4229df434f3ac5ef61f14d0ed" kindref="member">IARG_BRANCH_TARGET_ADDR</ref>,</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da0faf9829bd4f46cc1873c943978b21d7" kindref="member">IARG_FALLTHROUGH_ADDR</ref>,</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da5f291cb55a7d61a40fa3ab98e191394e" kindref="member">IARG_EXECUTING</ref>,<sp/></highlight></codeline>
<codeline lineno="358"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da4e8c634973d6966dba21ff70455c1f5b" kindref="member">IARG_FIRST_REP_ITERATION</ref>,</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da8cbb1c02c9e1bad259570179580adb50" kindref="member">IARG_PREDICATE</ref>,<sp/></highlight></codeline>
<codeline lineno="364"><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>These<sp/>are<sp/>internal<sp/>only</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dacd300aa37115a80c4ce30e11e7a37846" kindref="member">IARG_STACK_VALUE</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da0ea57a2ba5c26fe0b0e7d75a8de06fee" kindref="member">IARG_STACK_REFERENCE</ref>,<sp/><sp/></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da2b71d3e92a6b768857bd60cd1ffb67bb" kindref="member">IARG_MEMORY_VALUE</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dad99d33d82bec02d9dc8c1639c90920a2" kindref="member">IARG_MEMORY_REFERENCE</ref>,<sp/></highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Syscall<sp/>stuff</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da6e903286d783f6ee402e146b8dff871f" kindref="member">IARG_SYSCALL_NUMBER</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dacf2d3d2c61544c89918563331a73b2f4" kindref="member">IARG_SYSARG_REFERENCE</ref>,<sp/></highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da53b9c85f47960f7b805dc0bb8b6a1a2e" kindref="member">IARG_SYSARG_VALUE</ref>,<sp/></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da0480757dd8ff829a67621df1e9e5396d" kindref="member">IARG_SYSRET_VALUE</ref>,<sp/></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da969a0228ddab7219f20426504991b676" kindref="member">IARG_SYSRET_ERRNO</ref>,<sp/></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>function<sp/>arguments</highlight></codeline>
<codeline lineno="383"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da4babc2672f5a58d94f8fb8f5234c14d4" kindref="member">IARG_FUNCARG_CALLSITE_REFERENCE</ref>,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da8766561ec59dfb16a94edb3624f53ab8" kindref="member">IARG_FUNCARG_CALLSITE_VALUE</ref>,</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dab23dff2bab780c074d4998d14f4ecb16" kindref="member">IARG_FUNCARG_ENTRYPOINT_REFERENCE</ref>,</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dab418d242314ea7c67b1febf7667e93a1" kindref="member">IARG_FUNCARG_ENTRYPOINT_VALUE</ref>,</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da78065c99b8462ff353115dc9f6419931" kindref="member">IARG_FUNCRET_EXITPOINT_REFERENCE</ref>,<sp/></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da19dc8d3703330b7b1e1064336dd235cf" kindref="member">IARG_FUNCRET_EXITPOINT_VALUE</ref>,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da2c4a6ff4e8a076e0f39d24ab73ec7092" kindref="member">IARG_RETURN_IP</ref>,<sp/></highlight></codeline>
<codeline lineno="400"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da0425900c8991df5d840dd6d9f9b03295" kindref="member">IARG_ORIG_FUNCPTR</ref>,<sp/></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dad12677dad18848be51b49ea0f48e07cb" kindref="member">IARG_PROTOTYPE</ref>,<sp/></highlight></codeline>
<codeline lineno="404"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451daadb6e5681193cc8435b9e57d13acf5d4" kindref="member">IARG_THREAD_ID</ref>,<sp/></highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da25577a47a3c3945080ce1429959f3f1d" kindref="member">IARG_CONTEXT</ref>,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dad3e65d643a63acb09d12b8538434ca45" kindref="member">IARG_CONST_CONTEXT</ref>,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dafbbb614d534693b8997f4a7db8fb7e29" kindref="member">IARG_PARTIAL_CONTEXT</ref>,</highlight></codeline>
<codeline lineno="453"><highlight class="normal"></highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da9289568da718031f0b70921f9ca4d0c8" kindref="member">IARG_PRESERVE</ref>,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"></highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da6c8569ef37241134ffc6e24593275981" kindref="member">IARG_RETURN_REGS</ref>,<sp/></highlight></codeline>
<codeline lineno="472"><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da45b6bfd69845ada4a0875967995ad7c6" kindref="member">IARG_CALL_ORDER</ref>,<sp/></highlight></codeline>
<codeline lineno="474"><highlight class="normal"></highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dae11c26daf8993e626359a566d35d46d0" kindref="member">IARG_IARGLIST</ref>,<sp/></highlight></codeline>
<codeline lineno="476"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da892dbdf11883df94c327bb31fd0d5fcd" kindref="member">IARG_FAST_ANALYSIS_CALL</ref>,<sp/></highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da985747a3c70e3a4283fc8a2f16399e63" kindref="member">IARG_MEMORYOP_EA</ref>,<sp/></highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451daa5b738f4179d2b6313ac517be1f5221d" kindref="member">IARG_MEMORYOP_SIZE</ref>,<sp/></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da821b74fed6ac3d8740d73245b4f26a06" kindref="member">IARG_MEMORYOP_MASKED_ON</ref>,<sp/></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da30acbbeded5e7e293324f81cc796ef7d" kindref="member">IARG_TSC</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da2d2d4502ddc8de6d717c6878101c73df" kindref="member">IARG_FILE_NAME</ref>,<sp/></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da5a86209c9f24bebb204f1c435eb18d1c" kindref="member">IARG_LINE_NO</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451dad1fd7d0ac8f175d5340787ff3f3a2093" kindref="member">IARG_LAST</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal">}<sp/><ref refid="group__INST__ARGS_1ga089c27ca15e9ff139dd3a3f8a6f8451d" kindref="member">IARG_TYPE</ref>;</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight><highlight class="comment">//<sp/>IARG_END<sp/>must<sp/>be<sp/>the<sp/>last<sp/>IARG<sp/>in<sp/>the<sp/>argument<sp/>list.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight><highlight class="comment">//<sp/>These<sp/>iargs<sp/>are<sp/>used<sp/>by<sp/>Pin<sp/>internally,<sp/>and<sp/>not<sp/>passed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight><highlight class="comment">//<sp/>to<sp/>the<sp/>analysis,<sp/>replacement<sp/>or<sp/>callback<sp/>routine.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>be<sp/>sure<sp/>about<sp/>the<sp/>type<sp/>of<sp/>__LINE__,<sp/>because<sp/>we&apos;re<sp/>passing<sp/>it</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"></highlight><highlight class="comment">//<sp/>via<sp/>varargs,<sp/>and<sp/>different<sp/>compilers<sp/>seem<sp/>to<sp/>treat<sp/>it<sp/>differently.<sp/>By<sp/>forcing</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"></highlight><highlight class="comment">//<sp/>it<sp/>to<sp/>UINT32<sp/>(which<sp/>restricts<sp/>the<sp/>file<sp/>to<sp/>a<sp/>mere<sp/>4Gi<sp/>lines),<sp/>we<sp/>can<sp/>be<sp/>safe.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>OMIT_SOURCE_LOCATION</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IARG_END<sp/>IARG_LAST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>IARG_END<sp/>IARG_FILE_NAME,<sp/>__FILE__,<sp/>IARG_LINE_NO,<sp/>LEVEL_BASE::UINT32(__LINE__),<sp/>IARG_LAST</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Constants<sp/>representing<sp/>AVX<sp/>registers<sp/>size</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>XMM_REG_SIZE<sp/>16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>YMM_REG_SIZE<sp/>32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>ZMM_REG_SIZE<sp/>64</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="513"><highlight class="normal">{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/>CALLINGSTD_INVALID,</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>CALLINGSTD_DEFAULT,</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>CALLINGSTD_CDECL,</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>CALLINGSTD_REGPARMS,</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>CALLINGSTD_STDCALL,</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>CALLINGSTD_ART</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}<sp/><ref refid="group__PROTO_1gacfd9f3c8dc22310ce9b9152e8c61b17c" kindref="member">CALLINGSTD_TYPE</ref>;</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal">{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_INVALID,</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_POINTER,</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_BOOL,</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_CHAR,</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_UCHAR,</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_SCHAR,</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_SHORT,</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_USHORT,</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_INT,</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_UINT,</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_LONG,</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_ULONG,</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_LONGLONG,</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_ULONGLONG,</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_FLOAT,</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_DOUBLE,</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_VOID,</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_ENUM,</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_AGGREGATE,</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/>PARG_END</highlight></codeline>
<codeline lineno="549"><highlight class="normal">}<sp/><ref refid="group__PROTO_1ga59e26fa7c51d677aaac419e05bfb1305" kindref="member">PARG_TYPE</ref>;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"></highlight></codeline>
<codeline lineno="551" refid="structPARG__T" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structPARG__T" kindref="compound">PARG_T</ref></highlight></codeline>
<codeline lineno="552"><highlight class="normal">{</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PROTO_1ga59e26fa7c51d677aaac419e05bfb1305" kindref="member">PARG_TYPE</ref><sp/>_parg;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>_size;</highlight></codeline>
<codeline lineno="555"><highlight class="normal">};</highlight></codeline>
<codeline lineno="556"><highlight class="normal"></highlight></codeline>
<codeline lineno="565"><highlight class="preprocessor">#define<sp/>PIN_PARG(t)<sp/>_PinPargClass&lt;<sp/>t<sp/>&gt;::parg()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight></codeline>
<codeline lineno="572"><highlight class="preprocessor">#define<sp/>PIN_PARG_AGGREGATE(t)<sp/>_PinParg(PARG_AGGREGATE,<sp/>sizeof(t))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="preprocessor">#define<sp/>PIN_PARG_ENUM(t)<sp/>_PinParg(PARG_ENUM,<sp/>sizeof(t))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="preprocessor">#define<sp/>PIN_PARG_END()<sp/>_PinParg(PARG_END,<sp/>0)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="588" refid="struct__PinPargClass" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref></highlight></codeline>
<codeline lineno="589"><highlight class="normal">{</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>parg()</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="593"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>PARG_INVALID;</highlight></codeline>
<codeline lineno="594"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="597"><highlight class="normal">};</highlight></codeline>
<codeline lineno="598" refid="struct__PinPargClass_3_01T_01_5_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt;<sp/>T*<sp/>&gt;</highlight></codeline>
<codeline lineno="599"><highlight class="normal">{</highlight></codeline>
<codeline lineno="600"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>parg()</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>PARG_POINTER;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T*);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal">};</highlight></codeline>
<codeline lineno="608" refid="struct__PinPargClass_3_01T_01_6_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T<sp/>&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt;<sp/>T&amp;<sp/>&gt;</highlight></codeline>
<codeline lineno="609"><highlight class="normal">{</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>parg()</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="612"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>PARG_POINTER;</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(T&amp;);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="617"><highlight class="normal">};</highlight></codeline>
<codeline lineno="618" refid="struct__PinPargClass_3_01bool_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt;<sp/>bool<sp/>&gt;</highlight></codeline>
<codeline lineno="619"><highlight class="normal">{</highlight></codeline>
<codeline lineno="620"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>parg()</highlight></codeline>
<codeline lineno="621"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="622"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="623"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>PARG_BOOL;</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(bool);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="626"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="627"><highlight class="normal">};</highlight></codeline>
<codeline lineno="628" refid="struct__PinPargClass_3_01char_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt;<sp/>char<sp/>&gt;</highlight></codeline>
<codeline lineno="629"><highlight class="normal">{</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>parg()</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>PARG_CHAR;</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(char);</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="637"><highlight class="normal">};</highlight></codeline>
<codeline lineno="638" refid="struct__PinPargClass_3_01unsigned_01char_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt;<sp/>unsigned<sp/>char<sp/>&gt;</highlight></codeline>
<codeline lineno="639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>parg()</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>PARG_UCHAR;</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>char);</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="647"><highlight class="normal">};</highlight></codeline>
<codeline lineno="648" refid="struct__PinPargClass_3_01signed_01char_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt;<sp/>signed<sp/>char<sp/>&gt;</highlight></codeline>
<codeline lineno="649"><highlight class="normal">{</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>parg()</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>PARG_SCHAR;</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">signed</highlight><highlight class="normal"><sp/>char);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="657"><highlight class="normal">};</highlight></codeline>
<codeline lineno="658" refid="struct__PinPargClass_3_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt;<sp/>short<sp/>&gt;</highlight></codeline>
<codeline lineno="659"><highlight class="normal">{</highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>parg()</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>PARG_SHORT;</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(short);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="667"><highlight class="normal">};</highlight></codeline>
<codeline lineno="668" refid="struct__PinPargClass_3_01unsigned_01short_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt;<sp/>unsigned<sp/>short<sp/>&gt;</highlight></codeline>
<codeline lineno="669"><highlight class="normal">{</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>parg()</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="673"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>PARG_USHORT;</highlight></codeline>
<codeline lineno="674"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>short);</highlight></codeline>
<codeline lineno="675"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="677"><highlight class="normal">};</highlight></codeline>
<codeline lineno="678" refid="struct__PinPargClass_3_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt;<sp/>int<sp/>&gt;</highlight></codeline>
<codeline lineno="679"><highlight class="normal">{</highlight></codeline>
<codeline lineno="680"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>parg()</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>PARG_INT;</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(int);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="686"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="687"><highlight class="normal">};</highlight></codeline>
<codeline lineno="688" refid="struct__PinPargClass_3_01unsigned_01int_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt;<sp/>unsigned<sp/>int<sp/>&gt;</highlight></codeline>
<codeline lineno="689"><highlight class="normal">{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>parg()</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>PARG_UINT;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>int);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="697"><highlight class="normal">};</highlight></codeline>
<codeline lineno="698" refid="struct__PinPargClass_3_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt;<sp/>long<sp/>&gt;</highlight></codeline>
<codeline lineno="699"><highlight class="normal">{</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>parg()</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>PARG_LONG;</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(long);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal">};</highlight></codeline>
<codeline lineno="708" refid="struct__PinPargClass_3_01unsigned_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt;<sp/>unsigned<sp/>long<sp/>&gt;</highlight></codeline>
<codeline lineno="709"><highlight class="normal">{</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>parg()</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>PARG_ULONG;</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/>long);</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="717"><highlight class="normal">};</highlight></codeline>
<codeline lineno="718" refid="struct__PinPargClass_3_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt;<sp/>long<sp/>long<sp/>&gt;</highlight></codeline>
<codeline lineno="719"><highlight class="normal">{</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>parg()</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>PARG_LONGLONG;</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>long);</highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="726"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="727"><highlight class="normal">};</highlight></codeline>
<codeline lineno="728" refid="struct__PinPargClass_3_01unsigned_01long_01long_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt;<sp/>unsigned<sp/>long<sp/>long<sp/>&gt;</highlight></codeline>
<codeline lineno="729"><highlight class="normal">{</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>parg()</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>PARG_ULONGLONG;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>long);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="737"><highlight class="normal">};</highlight></codeline>
<codeline lineno="738" refid="struct__PinPargClass_3_01float_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt;<sp/>float<sp/>&gt;</highlight></codeline>
<codeline lineno="739"><highlight class="normal">{</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>parg()</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>PARG_FLOAT;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(float);</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal">};</highlight></codeline>
<codeline lineno="748" refid="struct__PinPargClass_3_01double_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt;<sp/>double<sp/>&gt;</highlight></codeline>
<codeline lineno="749"><highlight class="normal">{</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>parg()</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>PARG_DOUBLE;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(double);</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="757"><highlight class="normal">};</highlight></codeline>
<codeline lineno="758" refid="struct__PinPargClass_3_01void_01_4" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">template</highlight><highlight class="normal">&lt;&gt;<sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt;<sp/>void<sp/>&gt;</highlight></codeline>
<codeline lineno="759"><highlight class="normal">{</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>parg()</highlight></codeline>
<codeline lineno="761"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>PARG_VOID;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="767"><highlight class="normal">};</highlight></codeline>
<codeline lineno="768"><highlight class="normal"></highlight></codeline>
<codeline lineno="769"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>_PinParg(<ref refid="group__PROTO_1ga59e26fa7c51d677aaac419e05bfb1305" kindref="member">PARG_TYPE</ref><sp/>p,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>s)</highlight></codeline>
<codeline lineno="770"><highlight class="normal">{</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structPARG__T" kindref="compound">PARG_T</ref><sp/>x;</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>x._parg<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>x._size<sp/>=<sp/>s;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="775"><highlight class="normal">}</highlight></codeline>
<codeline lineno="776"><highlight class="normal"></highlight></codeline>
<codeline lineno="777"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="778"><highlight class="comment"><sp/>*<sp/>Opaque<sp/>types<sp/>in<sp/>api</highlight></codeline>
<codeline lineno="779"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">IARGLIST_CLASS;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal">PROTO_CLASS;</highlight></codeline>
<codeline lineno="782"><highlight class="normal"></highlight></codeline>
<codeline lineno="787"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>IARGLIST_CLASS*<sp/><ref refid="group__INST__ARGS_1gafbeb707dc23c7c09e1e8c932649107d5" kindref="member">IARGLIST</ref>;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"></highlight></codeline>
<codeline lineno="811"><highlight class="preprocessor">#if<sp/>defined(TARGET_IA32)<sp/>&amp;&amp;<sp/>defined(TARGET_LINUX)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_FAST_ANALYSIS_CALL<sp/>__attribute__((regparm(3)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="813"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TARGET_IA32)<sp/>&amp;&amp;<sp/>defined(TARGET_MAC)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="814"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_FAST_ANALYSIS_CALL<sp/>__attribute__((regparm(3)))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="normal"></highlight><highlight class="preprocessor">#elif<sp/>defined(TARGET_IA32)<sp/>&amp;&amp;<sp/>defined(TARGET_WINDOWS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_FAST_ANALYSIS_CALL<sp/>__fastcall</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="817"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="818"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_FAST_ANALYSIS_CALL</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="819"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal">{</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/>PIN_MEMOP_LOAD,</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/>PIN_MEMOP_STORE</highlight></codeline>
<codeline lineno="829"><highlight class="normal">}<sp/><ref refid="group__INST__ARGS_1ga624ddd00f45938da5eb525afc5b43195" kindref="member">PIN_MEMOP_ENUM</ref>;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"></highlight></codeline>
<codeline lineno="835" refid="structPIN__MEM__ACCESS__INFO" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="836"><highlight class="normal">{</highlight></codeline>
<codeline lineno="837"><highlight class="normal"><sp/><sp/><sp/><sp/>ADDRINT<sp/>memoryAddress;</highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1ga624ddd00f45938da5eb525afc5b43195" kindref="member">PIN_MEMOP_ENUM</ref><sp/>memopType;</highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT32<sp/>bytesAccessed;</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOL<sp/>maskOn;</highlight></codeline>
<codeline lineno="841"><highlight class="normal">}<sp/><ref refid="structPIN__MEM__ACCESS__INFO" kindref="compound">PIN_MEM_ACCESS_INFO</ref>;</highlight></codeline>
<codeline lineno="842"><highlight class="normal"></highlight></codeline>
<codeline lineno="846"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>MAX_MULTI_MEMOPS<sp/>=<sp/>16;</highlight></codeline>
<codeline lineno="847"><highlight class="normal"></highlight></codeline>
<codeline lineno="852" refid="structPIN__MULTI__MEM__ACCESS__INFO" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="853"><highlight class="normal">{</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT32<sp/>numberOfMemops;<sp/></highlight><highlight class="comment">//<sp/>only<sp/>the<sp/>first<sp/>numberOfMemops<sp/>elements<sp/>in<sp/>the<sp/>memop[]<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>are<sp/>valid</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structPIN__MEM__ACCESS__INFO" kindref="compound">PIN_MEM_ACCESS_INFO</ref><sp/>memop[MAX_MULTI_MEMOPS];</highlight></codeline>
<codeline lineno="857"><highlight class="normal">}<sp/><ref refid="structPIN__MULTI__MEM__ACCESS__INFO" kindref="compound">PIN_MULTI_MEM_ACCESS_INFO</ref>;</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="863"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="864"><highlight class="normal">{</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/>PIN_OP_ELEMENT_ACCESS_READ,</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/>PIN_OP_ELEMENT_ACCESS_WRITE,</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/>PIN_OP_ELEMENT_ACCESS_READWRITE</highlight></codeline>
<codeline lineno="868"><highlight class="normal">}<sp/><ref refid="group__INST__ARGS_1ga16b7ac266c4c1323b18396be70279eb0" kindref="member">PIN_OP_ELEMENT_ACCESS</ref>;</highlight></codeline>
<codeline lineno="869"><highlight class="normal"></highlight></codeline>
<codeline lineno="877" refid="classIMULTI__ELEMENT__OPERAND" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classIMULTI__ELEMENT__OPERAND" kindref="compound">IMULTI_ELEMENT_OPERAND</ref><sp/>{</highlight></codeline>
<codeline lineno="878"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classIMULTI__ELEMENT__OPERAND" kindref="compound">IMULTI_ELEMENT_OPERAND</ref>(){}</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="classIMULTI__ELEMENT__OPERAND_1a2a088a11c5f57fbfcd1643f5e3e67c64" kindref="member">IsMemory</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="887"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="classIMULTI__ELEMENT__OPERAND_1a45aaae095c8d575da9a497250f269489" kindref="member">IsRegister</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="892"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>USIZE<sp/><ref refid="classIMULTI__ELEMENT__OPERAND_1a1a3269c2ad96bab099c908b9c8a77c50" kindref="member">Size</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="classIMULTI__ELEMENT__OPERAND_1a38322afed12bae66f9760f7e12ad0386" kindref="member">Address</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="classIMULTI__ELEMENT__OPERAND_1a9540e7ff0b5c79096a2b2dc62d7ff8e9" kindref="member">NumOfElements</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>USIZE<sp/><ref refid="classIMULTI__ELEMENT__OPERAND_1ae515ed8a4383bc4539c06e2f6f6f0573" kindref="member">ElementSize</ref>(UINT32<sp/>element_index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="classIMULTI__ELEMENT__OPERAND_1a0a734eb473651efa17ffae1815af95a1" kindref="member">ElementAddress</ref>(<sp/>UINT32<sp/>element_index<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="classIMULTI__ELEMENT__OPERAND_1a0f3864eb7d7ac52e344baabd1b5042e8" kindref="member">ElementOffset</ref>(<sp/>UINT32<sp/>element_index<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="classIMULTI__ELEMENT__OPERAND_1a502bd3f8a07d530e7ce8d0f5709989e6" kindref="member">ElementMaskValue</ref>(<sp/>UINT32<sp/>element_index<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="group__INST__ARGS_1ga16b7ac266c4c1323b18396be70279eb0" kindref="member">PIN_OP_ELEMENT_ACCESS</ref><sp/><ref refid="classIMULTI__ELEMENT__OPERAND_1a0f64f8d8fbdd4055a1436104fd414c2d" kindref="member">ElementAccessType</ref>(<sp/>UINT32<sp/>element_index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="929"><highlight class="normal">};</highlight></codeline>
<codeline lineno="930"><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>PROTO_CLASS*<sp/><ref refid="group__PROTO_1ga554ff954c3ea33bb537f30e3b500ef1c" kindref="member">PROTO</ref>;</highlight></codeline>
<codeline lineno="937"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="group__THREADS_1ga645289be59039349ad77ad2fa7b0e2f3" kindref="member">THREADID</ref>;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="946"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__THREADS_1ga645289be59039349ad77ad2fa7b0e2f3" kindref="member">THREADID</ref><sp/><ref refid="group__THREADS_1ga6f1b19d7792c8c6f4547fd9d3dabb427" kindref="member">INVALID_THREADID</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="group__THREADS_1ga645289be59039349ad77ad2fa7b0e2f3" kindref="member">THREADID</ref><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="947"><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>UINT64<sp/><ref refid="group__THREADS_1ga057233f26b54f23b1ddb0c0c5e31dba9" kindref="member">PIN_THREAD_UID</ref>;</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__THREADS_1ga057233f26b54f23b1ddb0c0c5e31dba9" kindref="member">PIN_THREAD_UID</ref><sp/><ref refid="group__THREADS_1gadea3bf4ebf6808cbc830c0735c9285ad" kindref="member">INVALID_PIN_THREAD_UID</ref><sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><sp/><ref refid="group__THREADS_1ga057233f26b54f23b1ddb0c0c5e31dba9" kindref="member">PIN_THREAD_UID</ref><sp/></highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(-1);</highlight></codeline>
<codeline lineno="959"><highlight class="normal"></highlight></codeline>
<codeline lineno="963"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>NATIVE_TID<sp/><ref refid="group__THREADS_1ga1c9cdcd6c1baf15e17c2eb305a16e25e" kindref="member">OS_THREAD_ID</ref>;</highlight></codeline>
<codeline lineno="964"><highlight class="normal"></highlight></codeline>
<codeline lineno="968"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__THREADS_1ga1c9cdcd6c1baf15e17c2eb305a16e25e" kindref="member">OS_THREAD_ID</ref><sp/><ref refid="group__THREADS_1gafb51a301378b609eaeffa48de3355945" kindref="member">INVALID_OS_THREAD_ID</ref><sp/>=<sp/>INVALID_NATIVE_TID;</highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="975"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VOID<sp/><ref refid="group__THREADS_1gaf7d4b7206749ac3075b941a513d876c5" kindref="member">ROOT_THREAD_FUNC</ref>(VOID*<sp/>arg);</highlight></codeline>
<codeline lineno="976"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="group__THREADS_1ga2bf6029042d57fb825536c795c94d1ed" kindref="member">OS_PROCESS_ID</ref>;</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__APPDEBUG_1ga41e814fff526e0232f2f8c3055d6e88b" kindref="member">DEBUG_STATUS</ref></highlight></codeline>
<codeline lineno="986"><highlight class="normal">{</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1gga41e814fff526e0232f2f8c3055d6e88ba72ca0db67ae970e3c62a40b5ac4f7003" kindref="member">DEBUG_STATUS_DISABLED</ref>,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="988"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1gga41e814fff526e0232f2f8c3055d6e88ba8360ff1aaecfe81589ca624db3618367" kindref="member">DEBUG_STATUS_UNCONNECTABLE</ref>,<sp/></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1gga41e814fff526e0232f2f8c3055d6e88ba994b4c3ad3ae17936ecf71deaadf1f80" kindref="member">DEBUG_STATUS_UNCONNECTED</ref>,<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1gga41e814fff526e0232f2f8c3055d6e88bac55ed4b18e05f4dcd13a38bbe6ee6cb7" kindref="member">DEBUG_STATUS_CONNECTED</ref><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="991"><highlight class="normal">};</highlight></codeline>
<codeline lineno="992"><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__APPDEBUG_1ga25f41d731fbc522fea67abd02f9c04c6" kindref="member">DEBUG_CONNECTION_TYPE</ref></highlight></codeline>
<codeline lineno="998"><highlight class="normal">{</highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1gga25f41d731fbc522fea67abd02f9c04c6a48023b1450d43ba2c4190432e50fcb44" kindref="member">DEBUG_CONNECTION_TYPE_NONE</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1gga25f41d731fbc522fea67abd02f9c04c6abc9902ef5ebfac00333f6ce7bd00cd57" kindref="member">DEBUG_CONNECTION_TYPE_TCP_SERVER</ref>,<sp/></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1gga25f41d731fbc522fea67abd02f9c04c6a656476b26189f8de3f70603ce19a3640" kindref="member">DEBUG_CONNECTION_TYPE_TCP_CLIENT</ref><sp/><sp/></highlight></codeline>
<codeline lineno="1002"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__APPDEBUG_1ga87ad53f06ecf9cbcd3b94a155e1c11b5" kindref="member">DEBUGGER_TYPE</ref></highlight></codeline>
<codeline lineno="1008"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1gga87ad53f06ecf9cbcd3b94a155e1c11b5a36c70d872b32db70ffa16fb1f9a1e698" kindref="member">DEBUGGER_TYPE_UNKNOWN</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1gga87ad53f06ecf9cbcd3b94a155e1c11b5a93747991bbf93bec18a63aa0def7502a" kindref="member">DEBUGGER_TYPE_GDB</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1gga87ad53f06ecf9cbcd3b94a155e1c11b5ae257dd6ee7c4c21be32afc5dfa4145ee" kindref="member">DEBUGGER_TYPE_LLDB</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1012"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1gga87ad53f06ecf9cbcd3b94a155e1c11b5a215d036d52fcd8a1d9d0655c0915983f" kindref="member">DEBUGGER_TYPE_IDB</ref>,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1013"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1gga87ad53f06ecf9cbcd3b94a155e1c11b5a382d02f0500b212562d3278dee138b3c" kindref="member">DEBUGGER_TYPE_VISUAL_STUDIO_VSDBG</ref>,<sp/></highlight></codeline>
<codeline lineno="1014"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1gga87ad53f06ecf9cbcd3b94a155e1c11b5aa51709dd57db7e6200b154e9b1cb71d7" kindref="member">DEBUGGER_TYPE_VISUAL_STUDIO</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1015"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1020"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__APPDEBUG_1gaf8cf023622aae11218cc9c911b906deb" kindref="member">DEBUG_MODE_OPTION</ref></highlight></codeline>
<codeline lineno="1021"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1ggaf8cf023622aae11218cc9c911b906deba83aab8069eb6913be66d65a272343f4f" kindref="member">DEBUG_MODE_OPTION_NONE</ref><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="1023"><highlight class="normal"></highlight></codeline>
<codeline lineno="1030"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1ggaf8cf023622aae11218cc9c911b906debad239403d750fcc2bd58f07d609c9962a" kindref="member">DEBUG_MODE_OPTION_STOP_AT_ENTRY</ref><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>0),</highlight></codeline>
<codeline lineno="1031"><highlight class="normal"></highlight></codeline>
<codeline lineno="1037"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1ggaf8cf023622aae11218cc9c911b906deba723c132474f30b96833655fba66a3cf5" kindref="member">DEBUG_MODE_OPTION_SILENT</ref><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>1),</highlight></codeline>
<codeline lineno="1038"><highlight class="normal"></highlight></codeline>
<codeline lineno="1044"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1ggaf8cf023622aae11218cc9c911b906deba4e65fd1fd0aadcefd334b4824965eaf7" kindref="member">DEBUG_MODE_OPTION_ALLOW_REMOTE</ref><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>2)</highlight></codeline>
<codeline lineno="1045"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1046"><highlight class="normal"></highlight></codeline>
<codeline lineno="1050" refid="struct__tcpServerStruct" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__tcpServerStruct" kindref="compound">_tcpServerStruct</ref></highlight></codeline>
<codeline lineno="1051"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1052"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct__tcpServerStruct_1a263a119b2bc391cf181fb4718dc2968c" kindref="member">_tcpPort</ref>;<sp/></highlight></codeline>
<codeline lineno="1053"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1054"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058" refid="structDEBUG__CONNECTION__INFO" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDEBUG__CONNECTION__INFO" kindref="compound">DEBUG_CONNECTION_INFO</ref></highlight></codeline>
<codeline lineno="1059"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1ga25f41d731fbc522fea67abd02f9c04c6" kindref="member">DEBUG_CONNECTION_TYPE</ref><sp/><ref refid="structDEBUG__CONNECTION__INFO_1aad048415716dec2a5858fb0b82783bf1" kindref="member">_type</ref>;<sp/></highlight></codeline>
<codeline lineno="1061"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOL<sp/><ref refid="structDEBUG__CONNECTION__INFO_1a784ff40a14b8040481ca67f63dba8727" kindref="member">_stopAtEntry</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1062"><highlight class="normal"></highlight></codeline>
<codeline lineno="1063"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>data<sp/>is<sp/>dependent<sp/>on<sp/>the<sp/>connection<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1064"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1065"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1066"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1067"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__tcpServerStruct" kindref="compound">_tcpServerStruct</ref><sp/>_tcpServer;</highlight></codeline>
<codeline lineno="1068"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1069"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1070"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074" refid="struct__tcpClientStruct" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__tcpClientStruct" kindref="compound">_tcpClientStruct</ref></highlight></codeline>
<codeline lineno="1075"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/><ref refid="struct__tcpClientStruct_1a8a1d05343e60bd2df2b6d84cb4894fe8" kindref="member">_ip</ref>;<sp/></highlight></codeline>
<codeline lineno="1077"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="struct__tcpClientStruct_1af80ec20e2fa6f6ef4b43bcc0f8e77d2c" kindref="member">_tcpPort</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="1078"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1079"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083" refid="structDEBUG__MODE" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structDEBUG__MODE" kindref="compound">DEBUG_MODE</ref></highlight></codeline>
<codeline lineno="1084"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1085"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__APPDEBUG_1ga25f41d731fbc522fea67abd02f9c04c6" kindref="member">DEBUG_CONNECTION_TYPE</ref><sp/><ref refid="structDEBUG__MODE_1a28359c21886e940247c89957a95bd598" kindref="member">_type</ref>;<sp/></highlight></codeline>
<codeline lineno="1086"><highlight class="normal"><sp/><sp/><sp/><sp/>DEBUG_MODE_OPTIONS<sp/><ref refid="structDEBUG__MODE_1aa5b290051c7c88df4b8a2afa217c1aa3" kindref="member">_options</ref>;<sp/></highlight></codeline>
<codeline lineno="1087"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>The<sp/>following<sp/>data<sp/>is<sp/>dependent<sp/>on<sp/>the<sp/>connection<sp/>type.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1089"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1090"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1091"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1095"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct__tcpClientStruct" kindref="compound">_tcpClientStruct</ref><sp/><ref refid="structDEBUG__MODE_1ac426b2c82705938d22657be802de1529" kindref="member">_tcpClient</ref>;</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="1097"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1098"><highlight class="normal"></highlight></codeline>
<codeline lineno="1104" refid="unionPIN__MEM__TRANS__FLAGS" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">union</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1105"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1106"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT32<sp/>data;</highlight></codeline>
<codeline lineno="1107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1108"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="1109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT32<sp/>isAtomic<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT32<sp/>isRmw<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT32<sp/>isPrefetch<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>UINT32<sp/>isFromPin<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="1113"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/>bits;</highlight></codeline>
<codeline lineno="1114"><highlight class="normal">}<sp/><ref refid="unionPIN__MEM__TRANS__FLAGS" kindref="compound">PIN_MEM_TRANS_FLAGS</ref>;</highlight></codeline>
<codeline lineno="1115"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116" refid="structPIN__MEM__TRANS__INFO" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1117"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>this<sp/>structure<sp/>is<sp/>allocated<sp/>on<sp/>the<sp/>stack<sp/>before</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>call<sp/>to<sp/>CallMemoryAddrTrans<sp/>and<sp/>a<sp/>function<sp/>may</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>write<sp/>into<sp/>the<sp/>48bytes<sp/>above<sp/>it&apos;s<sp/>rsp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1121"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT8<sp/>dummySpace[32];</highlight></codeline>
<codeline lineno="1122"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__THREADS_1ga645289be59039349ad77ad2fa7b0e2f3" kindref="member">THREADID</ref><sp/>threadIndex;</highlight></codeline>
<codeline lineno="1123"><highlight class="normal"><sp/><sp/><sp/><sp/>ADDRINT<sp/>addr;</highlight></codeline>
<codeline lineno="1124"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>bytes;</highlight></codeline>
<codeline lineno="1125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__INST__ARGS_1ga624ddd00f45938da5eb525afc5b43195" kindref="member">PIN_MEMOP_ENUM</ref><sp/>memOpType;</highlight></codeline>
<codeline lineno="1126"><highlight class="normal"><sp/><sp/><sp/><sp/>ADDRINT<sp/>ip;</highlight></codeline>
<codeline lineno="1127"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="unionPIN__MEM__TRANS__FLAGS" kindref="compound">PIN_MEM_TRANS_FLAGS</ref><sp/>flags;</highlight></codeline>
<codeline lineno="1128"><highlight class="normal">}<sp/><ref refid="structPIN__MEM__TRANS__INFO" kindref="compound">PIN_MEM_TRANS_INFO</ref>;</highlight></codeline>
<codeline lineno="1129"><highlight class="normal"></highlight></codeline>
<codeline lineno="1134" refid="classISCATTERED__MEMORY__REWRITE" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classISCATTERED__MEMORY__REWRITE" kindref="compound">ISCATTERED_MEMORY_REWRITE</ref><sp/>{</highlight></codeline>
<codeline lineno="1135"><highlight class="normal"></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="1136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="classISCATTERED__MEMORY__REWRITE" kindref="compound">ISCATTERED_MEMORY_REWRITE</ref>(){}</highlight></codeline>
<codeline lineno="1140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="classISCATTERED__MEMORY__REWRITE_1ad98e8ac391d205490dbe82b2a61c095b" kindref="member">NumOfElements</ref>()<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>USIZE<sp/><ref refid="classISCATTERED__MEMORY__REWRITE_1ac75da3a632c752dfec2f0b369dff8c0c" kindref="member">ElementSize</ref>(UINT32<sp/>element_index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="classISCATTERED__MEMORY__REWRITE_1afaeeccf554b9c60d66b8dd64e09c435e" kindref="member">ElementMaskValue</ref>(UINT32<sp/>element_index)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="classISCATTERED__MEMORY__REWRITE_1ae5fd1b66a6005fce2539b077a40bce9b" kindref="member">ElementOffset</ref>(<sp/>UINT32<sp/>element_index<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="classISCATTERED__MEMORY__REWRITE_1ae8c65649c17fe13335986061445f316d" kindref="member">ElementAddress</ref>(<sp/>UINT32<sp/>element_index<sp/>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>VOID<sp/><ref refid="classISCATTERED__MEMORY__REWRITE_1a1d1b078dd4182756879319faa0f8e5e0" kindref="member">SetElementAddress</ref>(<sp/>UINT32<sp/>element_index,<sp/>ADDRINT<sp/>address<sp/>)<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="1167"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1168"><highlight class="normal"></highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1170"><highlight class="normal"></highlight></codeline>
<codeline lineno="1174" refid="structCALL__APPLICATION__FUNCTION__PARAM" refkind="compound"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1175"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1176"><highlight class="normal"><sp/><sp/><sp/><sp/>UINT32<sp/>native<sp/>:<sp/>1;<sp/></highlight></codeline>
<codeline lineno="1177"><highlight class="normal">}<sp/><ref refid="structCALL__APPLICATION__FUNCTION__PARAM" kindref="compound">CALL_APPLICATION_FUNCTION_PARAM</ref>;</highlight></codeline>
<codeline lineno="1178"><highlight class="normal"></highlight></codeline>
<codeline lineno="1183"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__PIN__CONTROL_1ga4e114852e46d5d839d6e71e242709777" kindref="member">PIN_CALLBACK_TYPE</ref></highlight></codeline>
<codeline lineno="1184"><highlight class="normal">{</highlight></codeline>
<codeline lineno="1185"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PIN__CONTROL_1gga4e114852e46d5d839d6e71e242709777af6f04d87615566deb3bd49ec1e3468ef" kindref="member">PIN_CALLBACK_TYPE_NONE</ref><sp/><sp/><sp/><sp/>=<sp/>0,<sp/></highlight></codeline>
<codeline lineno="1186"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PIN__CONTROL_1gga4e114852e46d5d839d6e71e242709777ae9e0416b9e54e38bc1cf69956f81bc2c" kindref="member">PIN_CALLBACK_TYPE_SYSCALL</ref><sp/>=<sp/>1<sp/><sp/></highlight></codeline>
<codeline lineno="1187"><highlight class="normal">};</highlight></codeline>
<codeline lineno="1188"><highlight class="normal"></highlight></codeline>
<codeline lineno="1189"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="Source/pin/include/types_vmapi.PH"/>
  </compounddef>
</doxygen>
