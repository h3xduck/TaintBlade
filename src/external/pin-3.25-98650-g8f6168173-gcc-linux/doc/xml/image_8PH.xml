<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="image_8PH" kind="file" language="C++">
    <compoundname>image.PH</compoundname>
    <innerclass refid="classSymbolAddressRange" prot="public">SymbolAddressRange</innerclass>
    <innerclass refid="structSymbolDebugInfo" prot="public">SymbolDebugInfo</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="image_8PH_1aa349be98b6a4b3675133c6f8f767803c" prot="public" static="no">
        <name>PIN_G_IMAGE_PH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="9" column="10" bodyfile="Source/pin/pin/image.PH" bodystart="9" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__PIN__CONTROL_1ga32ad8725a818ddded04963a3b35a317c" prot="public" static="no" strong="no">
        <type></type>
        <name>SYMBOL_INFO_MODE</name>
        <enumvalue id="group__PIN__CONTROL_1gga32ad8725a818ddded04963a3b35a317ca638dc98de833dc4037e14bc6b0e2293d" prot="public">
          <name>NO_SYMBOLS</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>No symbols required. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PIN__CONTROL_1gga32ad8725a818ddded04963a3b35a317ca7deba6e46686ecdd822e1481e3fa32ef" prot="public">
          <name>EXPORT_SYMBOLS</name>
          <initializer>= (1 &lt;&lt; 0)</initializer>
          <briefdescription>
<para>Only symbols taken from export table are provided (Windows only) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PIN__CONTROL_1gga32ad8725a818ddded04963a3b35a317ca69ec95d319e1326991d9a661c7b5a349" prot="public">
          <name>DEBUG_SYMBOLS</name>
          <initializer>= (1 &lt;&lt; 1)</initializer>
          <briefdescription>
<para>Debug symbols (Windows only, currently implemented as DEBUG_OR_EXPORT_SYMBOLS) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PIN__CONTROL_1gga32ad8725a818ddded04963a3b35a317ca1c55b53fa60ae1040208433b28c4f833" prot="public">
          <name>IFUNC_SYMBOLS</name>
          <initializer>= (1 &lt;&lt; 2)</initializer>
          <briefdescription>
<para>IFUNC symbols (Linux only) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PIN__CONTROL_1gga32ad8725a818ddded04963a3b35a317ca377cc21f8510135927d79a96d656a726" prot="public">
          <name>DEBUG_OR_EXPORT_SYMBOLS</name>
          <initializer>= (DEBUG_SYMBOLS | EXPORT_SYMBOLS)</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>First debug symbols if available, otherwise export symbols (Windows only) </para>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of supported modes of symbolic information delivery. Used in <ref refid="group__PIN__CONTROL_1gadeaa38396564e0afbd701fce28131937" kindref="member">PIN_InitSymbolsAlt()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="879" column="1" bodyfile="Source/pin/pin/image.PH" bodystart="878" bodyend="886"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__IMG_1ga7d103a7d0bfc05892cdf2f9d39df9eba" prot="public" static="no">
        <type>VOID(*</type>
        <definition>typedef VOID(* IMAGECALLBACK) (IMG, VOID *)</definition>
        <argsstring>)(IMG, VOID *)</argsstring>
        <name>IMAGECALLBACK</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type of function to be called when an image is loaded </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="872" column="9" bodyfile="Source/pin/pin/image.PH" bodystart="872" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__REPLAY_1gadd939297fe51b34aedcbcb8b627a89f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IMG</type>
        <definition>IMG IMG_CreateAt</definition>
        <argsstring>(const char *filename, ADDRINT start, USIZE size, ADDRINT loadOffset, BOOL mainExecutable)</argsstring>
        <name>IMG_CreateAt</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>ADDRINT</type>
          <declname>start</declname>
        </param>
        <param>
          <type>USIZE</type>
          <declname>size</declname>
        </param>
        <param>
          <type>ADDRINT</type>
          <declname>loadOffset</declname>
        </param>
        <param>
          <type>BOOL</type>
          <declname>mainExecutable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Static model for instrumenting IMG&apos;s once they are loaded into memory.</para>
<para>Returns a IMG object for image loaded outside of PIN&apos;s loader. Tool should use this IMG object to mark the routines inside it, using <ref refid="group__RTN_1gad780d7c43d06f2197051a05ffb7f7b96" kindref="member">RTN_CreateAt()</ref>. After all the routines are marked, tool should call <ref refid="group__REPLAY_1ga07759b799516b378bd7f3faa0a0a8325" kindref="member">IMG_ReplayImageLoad()</ref> to finalize the image load procedure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the image visible to Pin tools </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>memory address where first byte of the image is loaded to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the image in memory. This means that the image region in memory will be at [start .. start+size) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loadOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset between the memory addresses specified in the executable/library files and the memory addresses where this image was actaully loaded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mainImage</parametername>
</parameternamelist>
<parameterdescription>
<para>TRUE if this is the main image</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>IMG object that represents the image. Please make sure to call <ref refid="group__REPLAY_1ga07759b799516b378bd7f3faa0a0a8325" kindref="member">IMG_ReplayImageLoad()</ref> on the IMG object after you&apos;re done creating all the routines in the IMG object.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: All<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="37" column="12" declfile="Source/pin/pin/image.PH" declline="37" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__REPLAY_1ga07759b799516b378bd7f3faa0a0a8325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID</type>
        <definition>VOID IMG_ReplayImageLoad</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_ReplayImageLoad</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replays the image load of an IMG object (created by <ref refid="group__REPLAY_1gadd939297fe51b34aedcbcb8b627a89f2" kindref="member">IMG_CreateAt()</ref>). This means that all the image load callbacks will be called for the specified IMG object. If <ref refid="group__PIN__CONTROL_1gab466cd00518ff315446c92f98f7ea1a0" kindref="member">PIN_StartProgram()</ref> wasn&apos;t called yet, PIN will enqueue this request and will process this request after <ref refid="group__PIN__CONTROL_1gab466cd00518ff315446c92f98f7ea1a0" kindref="member">PIN_StartProgram()</ref> was called</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">img</parametername>
</parameternamelist>
<parameterdescription>
<para>The image object to replay its load</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The vm and pin client locks are obtained during the call of this API.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: All<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="56" column="13" declfile="Source/pin/pin/image.PH" declline="56" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__APPDEBUG_1ga0d438691aafd8e03aadbd6b60049dae9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID *</type>
        <definition>VOID* IMG_GetLoaderInfo</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_GetLoaderInfo</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Gets a read-only copy of loader information for the image which is used in PIN ADX debugger.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>img</parametername>
</parameternamelist>
<parameterdescription>
<para>The image object to act on</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to OS specific structure that holds data about loader information. On Linux, this is a pointer to struct LINUX_LOADER_IMAGE_INFO.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: Linux<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="72" column="13" declfile="Source/pin/pin/image.PH" declline="72" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__APPDEBUG_1ga73ff2524249eac7fa68f269b642a7dac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID</type>
        <definition>VOID IMG_SetLoaderInfo</definition>
        <argsstring>(IMG img, VOID *loaderInfo)</argsstring>
        <name>IMG_SetLoaderInfo</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <param>
          <type>VOID *</type>
          <declname>loaderInfo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the loader information for the image which are used in PIN ADX debugger.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>img</parametername>
</parameternamelist>
<parameterdescription>
<para>The image object to act on </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loaderInfo</parametername>
</parameternamelist>
<parameterdescription>
<para>Points to OS specific structure that holds data about loader information. On Linux, this is a pointer to struct LINUX_LOADER_IMAGE_INFO.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: Linux<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="87" column="13" declfile="Source/pin/pin/image.PH" declline="87" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1gacba3766aac7698896fdb8b02df2a283e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IMG</type>
        <definition>IMG IMG_Next</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_Next</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Of the list of currently loaded images in memory it returns the image loaded after image x, or <ref refid="group__IMG_1gab591ec18986fb117120a714f06a35942" kindref="member">IMG_Invalid()</ref> if x is the last image</para>
</simplesect>
Skip shadow image (vdso or dynamic code)</para>
<para><simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="100" column="12" declfile="Source/pin/pin/image.PH" declline="100" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1gaaa82261cabe74bad0613c43d2346a5cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IMG</type>
        <definition>IMG IMG_Prev</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_Prev</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Of the list of currently loaded images in memory it returns the image loaded prior to image x, or <ref refid="group__IMG_1gab591ec18986fb117120a714f06a35942" kindref="member">IMG_Invalid()</ref> if x is the first image</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="111" column="12" declfile="Source/pin/pin/image.PH" declline="111" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1gab591ec18986fb117120a714f06a35942" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IMG</type>
        <definition>IMG IMG_Invalid</definition>
        <argsstring>()</argsstring>
        <name>IMG_Invalid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Used to indicate no image</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="121" column="12" declfile="Source/pin/pin/image.PH" declline="121" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1ga231a58e55838a4d4cbce3f7c0bfa9f0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL IMG_Valid</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_Valid</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if x is not <ref refid="group__IMG_1gab591ec18986fb117120a714f06a35942" kindref="member">IMG_Invalid()</ref></para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="131" column="13" declfile="Source/pin/pin/image.PH" declline="131" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1ga2f97057faee2f7ed7e23b88b339f62f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SEC</type>
        <definition>SEC IMG_SecHead</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_SecHead</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>First section in image</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="141" column="12" declfile="Source/pin/pin/image.PH" declline="141" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1gad01a20a588a5110b1bb1361eb60eb166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SEC</type>
        <definition>SEC IMG_SecTail</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_SecTail</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Last section in image </para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="150" column="12" declfile="Source/pin/pin/image.PH" declline="150" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1ga2d7ae0d04e4da064200e61750c2677ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SYM</type>
        <definition>SYM IMG_RegsymHead</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_RegsymHead</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>First regular symbol in image</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="160" column="12" declfile="Source/pin/pin/image.PH" declline="160" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__DEPRECATED_1ga96eef889e1a1d4925cee55139f64fc06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PIN_DEPRECATED_API ADDRINT</type>
        <definition>PIN_DEPRECATED_API ADDRINT IMG_Entry</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_Entry</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">img</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin image handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of first instruction executed when image is loaded</para>
</simplesect>
<simplesect kind="note"><para>DEPRECATED: API returned wrong value in case of position independent code. Use <ref refid="group__IMG_1gab35f17d40de6a4ecc51db591354d7841" kindref="member">IMG_EntryAddress()</ref> instead.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="173" column="35" declfile="Source/pin/pin/image.PH" declline="173" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1gab35f17d40de6a4ecc51db591354d7841" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT IMG_EntryAddress</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_EntryAddress</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">img</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin image handle </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Address of first instruction executed when image is loaded</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="184" column="16" declfile="Source/pin/pin/image.PH" declline="184" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1ga4f3f8677449add4d0379b5424f5dcfd9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL IMG_HasProperty</definition>
        <argsstring>(IMG img, IMG_PROPERTY property)</argsstring>
        <name>IMG_HasProperty</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <param>
          <type><ref refid="group__IMG_1ga38ea70f6ce2ffef5488aefbcc5494bce" kindref="member">IMG_PROPERTY</ref></type>
          <declname>property</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks if image has the specificfied property <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">img</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin image handle </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">property</parametername>
</parameternamelist>
<parameterdescription>
<para>the property to check of type <ref refid="group__IMG_1ga38ea70f6ce2ffef5488aefbcc5494bce" kindref="member">IMG_PROPERTY</ref> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>if image supports specific property in specific mode</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="197" column="13" declfile="Source/pin/pin/image.PH" declline="197" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1gab3bddc2c79c3879f91e61a11c2401f05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; IMG_Name</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_Name</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Fully qualified actual file name of image. Image names are encoded in UTF8 (a superset of ASCII), this is supported for Linux (only for locales encoded in UTF8) and Windows</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="208" column="26" declfile="Source/pin/pin/image.PH" declline="208" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1gab4b4e29c1e70d42071380597aafd08a8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT IMG_Gp</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_Gp</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Global pointer (GP) of image, if a GP is used to address global data</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="218" column="16" declfile="Source/pin/pin/image.PH" declline="218" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1gad01265ee1c2e8f4779092dae99bb2ee4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT IMG_LoadOffset</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_LoadOffset</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Offset from the image&apos;s link-time address to its load-time address.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="228" column="16" declfile="Source/pin/pin/image.PH" declline="228" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1gafb09205aa6b44d2b9302fc1e422c3d75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT IMG_LowAddress</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_LowAddress</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells the lowest address of any code or data loaded by the image.</para>
<para><simplesect kind="remark"><para>If the image is split in memory, regions from other images might be mapped between its regions. In this case, the function will return the low address of the text segment. See <ref refid="group__IMG_1gaf5fbd7cd458878d79b0fc54615fcf851" kindref="member">IMG_NumRegions</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">img</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pin image handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image&apos;s lowest address or the text segment low address if the image is split.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="249" column="16" declfile="Source/pin/pin/image.PH" declline="249" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1ga83595d9924300a59f727626ca9b8e88d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT IMG_HighAddress</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_HighAddress</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells the highest address of any code or data loaded by the image. This is the address of the last byte loaded by the image.</para>
<para><simplesect kind="remark"><para>If the image is split in memory, regions from other images might be mapped between its regions. In this case, the function will return the high address of the text segment. See <ref refid="group__IMG_1gaf5fbd7cd458878d79b0fc54615fcf851" kindref="member">IMG_NumRegions</ref>.</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">img</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pin image handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The image&apos;s highest address or the text segment high address if the image is split.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="272" column="16" declfile="Source/pin/pin/image.PH" declline="272" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1gae2299d042776b36435d4240a0363c28a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT IMG_StartAddress</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_StartAddress</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>On Windows, the whole image has been loaded by system loader at once. <ref refid="group__IMG_1gae2299d042776b36435d4240a0363c28a" kindref="member">IMG_StartAddress()</ref> gives the pointer to the image, mapped by loader. If you are working inside image-load callback - <ref refid="group__IMG_1gafb09205aa6b44d2b9302fc1e422c3d75" kindref="member">IMG_LowAddress()</ref> and <ref refid="group__IMG_1gae2299d042776b36435d4240a0363c28a" kindref="member">IMG_StartAddress()</ref> return the same value.</para>
<para>On Unix, the loader maps only portions of the image file that contain code and data. Additionally, Pin maps the whole image file for parsing. <ref refid="group__IMG_1gae2299d042776b36435d4240a0363c28a" kindref="member">IMG_StartAddress()</ref> returns a pointer to the memory mapped file. After return form image-load callback the whole image file is being unmapped and the pointer becomes invalid. The <ref refid="group__IMG_1gae2299d042776b36435d4240a0363c28a" kindref="member">IMG_StartAddress()</ref> returns 0.</para>
<para>Note, On Unix, the <ref refid="group__IMG_1gafb09205aa6b44d2b9302fc1e422c3d75" kindref="member">IMG_LowAddress()</ref> and <ref refid="group__IMG_1gae2299d042776b36435d4240a0363c28a" kindref="member">IMG_StartAddress()</ref> return different values.</para>
<para>On <ref refid="group__IMG_1ga0a2ed1c58e7215da29194d1800ceee86" kindref="member">IMG_Open()</ref>, Pin maps the whole image into memory and the pointer is valid until <ref refid="group__IMG_1ga93a7a90e8bba62212028ed33bbfe83b2" kindref="member">IMG_Close()</ref></para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">img</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pin image handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Pointer to the start of the raw image file.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="300" column="16" declfile="Source/pin/pin/image.PH" declline="300" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1ga76799de259e3c3b0873a9d4c81745e1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USIZE</type>
        <definition>USIZE IMG_SizeMapped</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_SizeMapped</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells the size of the raw image mapped by Pin, including the size of the image&apos;s symbolic information, which is not normally mapped by the application. Use this with <ref refid="group__IMG_1gae2299d042776b36435d4240a0363c28a" kindref="member">IMG_StartAddress()</ref> to find the entire memory range of the raw image mapped by Pin.</para>
<para>Note, this does <emphasis>not</emphasis> give the address range of the image from the application&apos;s perspective. To get that, use <ref refid="group__IMG_1gafb09205aa6b44d2b9302fc1e422c3d75" kindref="member">IMG_LowAddress()</ref> and <ref refid="group__IMG_1ga83595d9924300a59f727626ca9b8e88d" kindref="member">IMG_HighAddress()</ref>.</para>
<para>On Linux, the file is mapped in image-load callback or after IMG_Open. In other cases the IMG_SizeMapped returns 0.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">img</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pin image handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Size (bytes) of the raw image file mapped by Pin.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="322" column="14" declfile="Source/pin/pin/image.PH" declline="322" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1ga987423843679af4f9d3c33b22ddec5af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__IMG_1ga94a20481f21c96ad7ad5147b5148ecb0" kindref="member">IMG_TYPE</ref></type>
        <definition>IMG_TYPE IMG_Type</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_Type</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Image type</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="332" column="17" declfile="Source/pin/pin/image.PH" declline="332" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1ga2be7f100f47a86fadee6d0d65641e0c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL IMG_IsMainExecutable</definition>
        <argsstring>(IMG x)</argsstring>
        <name>IMG_IsMainExecutable</name>
        <param>
          <type>IMG</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE for the image Pin was applied on in the command line (i.e. first param after <ndash/>)</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="342" column="13" declfile="Source/pin/pin/image.PH" declline="342" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1ga13e68ba11d7f7922750167713cae89bd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL IMG_hasLinesData</definition>
        <argsstring>(IMG x)</argsstring>
        <name>IMG_hasLinesData</name>
        <param>
          <type>IMG</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if img has debug information that includes the lines information.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="352" column="13" declfile="Source/pin/pin/image.PH" declline="352" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1ga5b0db709955ea80522d6a6355a3a1f40" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL IMG_IsInterpreter</definition>
        <argsstring>(IMG x)</argsstring>
        <name>IMG_IsInterpreter</name>
        <param>
          <type>IMG</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>On operating systems that have the concept of loader image. (i.e. another program that is resposible to load the application), this function return TRUE for the image of the loader. In operating system that don&apos;t have the concept of loader, this function returns FALSE on all images.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">img</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pin image handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if this is the image of the application&apos;s loader (interpreter).</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="370" column="13" declfile="Source/pin/pin/image.PH" declline="370" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1ga8ce8a798f255f0f5f9bc4763ac73ae79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL IMG_IsStaticExecutable</definition>
        <argsstring>(IMG x)</argsstring>
        <name>IMG_IsStaticExecutable</name>
        <param>
          <type>IMG</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if this is the static executable</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="380" column="13" declfile="Source/pin/pin/image.PH" declline="380" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1ga78ab192435225bca4332a518af45a6bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL IMG_IsVDSO</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_IsVDSO</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>On Linux this function return TRUE for the image of the VDSO. On other operating systems return FALSE for all images.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">img</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pin image handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if this is the VDSO image.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="395" column="13" declfile="Source/pin/pin/image.PH" declline="395" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1gaf5fbd7cd458878d79b0fc54615fcf851" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 IMG_NumRegions</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_NumRegions</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>number of consecutive regions of the image in memory</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="405" column="15" declfile="Source/pin/pin/image.PH" declline="405" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1gaf67b1793bdcc17e3ba1283adb79baf47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT IMG_RegionHighAddress</definition>
        <argsstring>(IMG img, UINT32 n)</argsstring>
        <name>IMG_RegionHighAddress</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the high address of the n&apos;th region </para>
</simplesect>
<simplesect kind="remark"><para>n starts at 0</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="416" column="16" declfile="Source/pin/pin/image.PH" declline="416" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1gad39ae770c8ef64ac89ddf46f68fa9398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT IMG_RegionLowAddress</definition>
        <argsstring>(IMG img, UINT32 n)</argsstring>
        <name>IMG_RegionLowAddress</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the low address of the n&apos;th region </para>
</simplesect>
<simplesect kind="remark"><para>n starts at 0</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="427" column="16" declfile="Source/pin/pin/image.PH" declline="427" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__SEC_1gac542c5ae233d0c42d2eaf1faacef5a82" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IMG</type>
        <definition>IMG SEC_Img</definition>
        <argsstring>(SEC sec)</argsstring>
        <name>SEC_Img</name>
        <param>
          <type>SEC</type>
          <declname>sec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Image that contains this section</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="437" column="12" declfile="Source/pin/pin/image.PH" declline="437" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__SEC_1ga1b5419aa605f3d8d2a67bc39273c4702" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SEC</type>
        <definition>SEC SEC_Next</definition>
        <argsstring>(SEC sec)</argsstring>
        <name>SEC_Next</name>
        <param>
          <type>SEC</type>
          <declname>sec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Section that follows x, or <ref refid="group__SEC_1ga3ffd6d6c315bc044167b1ff53262470c" kindref="member">SEC_Invalid()</ref> is x is last section in the image</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="447" column="12" declfile="Source/pin/pin/image.PH" declline="447" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__SEC_1ga50ae8d91ee870b9904f341f706657588" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SEC</type>
        <definition>SEC SEC_Prev</definition>
        <argsstring>(SEC sec)</argsstring>
        <name>SEC_Prev</name>
        <param>
          <type>SEC</type>
          <declname>sec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Previous section of x, or <ref refid="group__SEC_1ga3ffd6d6c315bc044167b1ff53262470c" kindref="member">SEC_Invalid()</ref> if x is the first in the image</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="457" column="12" declfile="Source/pin/pin/image.PH" declline="457" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__SEC_1ga3ffd6d6c315bc044167b1ff53262470c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SEC</type>
        <definition>SEC SEC_Invalid</definition>
        <argsstring>()</argsstring>
        <name>SEC_Invalid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Invalid section value</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="467" column="12" declfile="Source/pin/pin/image.PH" declline="467" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__SEC_1ga39bbbb0d30fc82506540d39d2fc1dc1f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL SEC_Valid</definition>
        <argsstring>(SEC x)</argsstring>
        <name>SEC_Valid</name>
        <param>
          <type>SEC</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if x is not <ref refid="group__SEC_1ga3ffd6d6c315bc044167b1ff53262470c" kindref="member">SEC_Invalid()</ref></para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="477" column="13" declfile="Source/pin/pin/image.PH" declline="477" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__SEC_1ga83f823574b987c84827acd508b6df53f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RTN</type>
        <definition>RTN SEC_RtnHead</definition>
        <argsstring>(SEC sec)</argsstring>
        <name>SEC_RtnHead</name>
        <param>
          <type>SEC</type>
          <declname>sec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>First RTN of x, or <ref refid="group__RTN_1ga2e23300e596b670a387ad7b3ed9c8d59" kindref="member">RTN_Invalid()</ref> if no RTNs</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="487" column="12" declfile="Source/pin/pin/image.PH" declline="487" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__SEC_1gaffa1bb4f87ad3b6e7263a9f4b3c0ab30" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RTN</type>
        <definition>RTN SEC_RtnTail</definition>
        <argsstring>(SEC sec)</argsstring>
        <name>SEC_RtnTail</name>
        <param>
          <type>SEC</type>
          <declname>sec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Last RTN of x, or <ref refid="group__RTN_1ga2e23300e596b670a387ad7b3ed9c8d59" kindref="member">RTN_Invalid()</ref> if no RTNs</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="497" column="12" declfile="Source/pin/pin/image.PH" declline="497" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__SEC_1gac9f957818ba035d1d365ea95e7875bb0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; SEC_Name</definition>
        <argsstring>(SEC sec)</argsstring>
        <name>SEC_Name</name>
        <param>
          <type>SEC</type>
          <declname>sec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Section name</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="507" column="26" declfile="Source/pin/pin/image.PH" declline="507" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="group__SEC_1gae44a85e614a3b05a950ac81e3c6cc7c4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__SEC_1ga7fc7b3d12ebe2f3b13fe0bf7e3b1542e" kindref="member">SEC_TYPE</ref></type>
        <definition>SEC_TYPE SEC_Type</definition>
        <argsstring>(SEC sec)</argsstring>
        <name>SEC_Type</name>
        <param>
          <type>SEC</type>
          <declname>sec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Section type</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="517" column="17" declfile="Source/pin/pin/image.PH" declline="517" declcolumn="17"/>
      </memberdef>
      <memberdef kind="function" id="group__SEC_1ga73822e20bc73df6d74f0f31e50db26a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL SEC_Mapped</definition>
        <argsstring>(SEC sec)</argsstring>
        <name>SEC_Mapped</name>
        <param>
          <type>SEC</type>
          <declname>sec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if section is mapped in memory, unmapped section contain data not needed at run time, like debug information</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="527" column="13" declfile="Source/pin/pin/image.PH" declline="527" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__SEC_1ga126f11c6a7c886168fc517e60d053545" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const VOID *</type>
        <definition>const VOID* SEC_Data</definition>
        <argsstring>(SEC sec)</argsstring>
        <name>SEC_Data</name>
        <param>
          <type>SEC</type>
          <declname>sec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Return a pointer to the raw data for the section</para>
</simplesect>
On Linux, Pin maps the whole image file for processing. The pointer returned by <ref refid="group__SEC_1ga126f11c6a7c886168fc517e60d053545" kindref="member">SEC_Data()</ref> points inside the mapped file. Note, <ref refid="group__SEC_1ga126f11c6a7c886168fc517e60d053545" kindref="member">SEC_Data()</ref> pointer is always between <ref refid="group__IMG_1gae2299d042776b36435d4240a0363c28a" kindref="member">IMG_StartAddress()</ref> and <ref refid="group__IMG_1gae2299d042776b36435d4240a0363c28a" kindref="member">IMG_StartAddress()</ref> + <ref refid="group__IMG_1ga76799de259e3c3b0873a9d4c81745e1c" kindref="member">IMG_SizeMapped()</ref>. If you are analyzing image in image-load callback, please remember that the image will be unmapped after the callback returns and the pointer provided by <ref refid="group__SEC_1ga126f11c6a7c886168fc517e60d053545" kindref="member">SEC_Data()</ref> becomes invalid. If you are working with <ref refid="group__IMG_1ga0a2ed1c58e7215da29194d1800ceee86" kindref="member">IMG_Open()</ref> the pointer is valid until <ref refid="group__IMG_1ga93a7a90e8bba62212028ed33bbfe83b2" kindref="member">IMG_Close()</ref>.</para>
<para>If section does not have raw data the function returns 0.</para>
<para><simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="546" column="19" declfile="Source/pin/pin/image.PH" declline="546" declcolumn="19"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1ga4f6081e93a7d5557a9b1cc8203ee195b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SEC</type>
        <definition>SEC RTN_Sec</definition>
        <argsstring>(RTN x)</argsstring>
        <name>RTN_Sec</name>
        <param>
          <type>RTN</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Section that contains this routine</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="556" column="12" declfile="Source/pin/pin/image.PH" declline="556" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1gaa0e342698304cf65e9293e8db37acc4f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RTN</type>
        <definition>RTN RTN_Next</definition>
        <argsstring>(RTN x)</argsstring>
        <name>RTN_Next</name>
        <param>
          <type>RTN</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Routine that follows x, or <ref refid="group__RTN_1ga2e23300e596b670a387ad7b3ed9c8d59" kindref="member">RTN_Invalid()</ref> if x is the last in the section</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="566" column="12" declfile="Source/pin/pin/image.PH" declline="566" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1gae39bb9ac21e987ce1f31eb7552f622d4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RTN</type>
        <definition>RTN RTN_Prev</definition>
        <argsstring>(RTN x)</argsstring>
        <name>RTN_Prev</name>
        <param>
          <type>RTN</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Routine that precedes x, or <ref refid="group__RTN_1ga2e23300e596b670a387ad7b3ed9c8d59" kindref="member">RTN_Invalid()</ref> if x is the first in the section</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="576" column="12" declfile="Source/pin/pin/image.PH" declline="576" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1ga2e23300e596b670a387ad7b3ed9c8d59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RTN</type>
        <definition>RTN RTN_Invalid</definition>
        <argsstring>()</argsstring>
        <name>RTN_Invalid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>RTN value that indicates no valid image</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="586" column="12" declfile="Source/pin/pin/image.PH" declline="586" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1ga4e8498c1e4e5f115bc1686acd28b89b1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL RTN_Valid</definition>
        <argsstring>(RTN x)</argsstring>
        <name>RTN_Valid</name>
        <param>
          <type>RTN</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if x is not <ref refid="group__RTN_1ga2e23300e596b670a387ad7b3ed9c8d59" kindref="member">RTN_Invalid()</ref>. <ref refid="group__RTN_1ga4e8498c1e4e5f115bc1686acd28b89b1" kindref="member">RTN_Valid()</ref> returns FALSE in certain cases when there is no static image of the code available, including dynamically generated code.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="599" column="13" declfile="Source/pin/pin/image.PH" declline="599" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1ga3ae6eb28b0f7ef2257e725c97863bcc6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; RTN_Name</definition>
        <argsstring>(RTN x)</argsstring>
        <name>RTN_Name</name>
        <param>
          <type>RTN</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Name of routine</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="609" column="26" declfile="Source/pin/pin/image.PH" declline="609" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1ga3bde1755939385c02b8348754a7a9d52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL RTN_IsArtificial</definition>
        <argsstring>(RTN x)</argsstring>
        <name>RTN_IsArtificial</name>
        <param>
          <type>RTN</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>An artificial RTN is an RTN which was introduced by PIN for internal management and does not really represent an actual routine in the application. For example, PIN might cover code pieces that are not associated with symbols with artificial RTNs in order to meet the requirement that all code must be covered with RTNs.</para>
<para><simplesect kind="return"><para>TRUE if RTN is artificial.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="625" column="13" declfile="Source/pin/pin/image.PH" declline="625" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1gab56e9fdbac3ac2a1f17f8742fdbe5bd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SYM</type>
        <definition>SYM RTN_Sym</definition>
        <argsstring>(RTN x)</argsstring>
        <name>RTN_Sym</name>
        <param>
          <type>RTN</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>SYM associated with the given routine</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="635" column="12" declfile="Source/pin/pin/image.PH" declline="635" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1gacd45b2279082cf7fad260c13b4081bcd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT</type>
        <definition>UINT RTN_DynamicMethodId</definition>
        <argsstring>(RTN x)</argsstring>
        <name>RTN_DynamicMethodId</name>
        <param>
          <type>RTN</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Method ID associated with the given routine (JIT Profiling)</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; MacOS<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="645" column="13" declfile="Source/pin/pin/image.PH" declline="645" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1gae91a4e8f2bbae721afe2d988614b8fd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AFUNPTR</type>
        <definition>AFUNPTR RTN_Funptr</definition>
        <argsstring>(RTN x)</argsstring>
        <name>RTN_Funptr</name>
        <param>
          <type>RTN</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>@convert an rtn to a funptr</para>
<para><simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="655" column="16" declfile="Source/pin/pin/image.PH" declline="655" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1gad564f1e50a7cfb0cfbece91603f6642d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 RTN_Id</definition>
        <argsstring>(RTN x)</argsstring>
        <name>RTN_Id</name>
        <param>
          <type>RTN</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Pin assigns each routine a unique ID. The ID is globally unique, i.e. an ID will not appear in two images. If the same routine name exists in two different images (i.e. they are in different addresses), each will have a different ID. If an image is unloaded and then reloaded, the routines within it will most likely have different IDs than before. <simplesect kind="return"><para>Unique ID for the routine.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="670" column="15" declfile="Source/pin/pin/image.PH" declline="670" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__BBL_1gade725392ec92f3042e8c5b980ca61a8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INS</type>
        <definition>INS BBL_InsHead</definition>
        <argsstring>(BBL x)</argsstring>
        <name>BBL_InsHead</name>
        <param>
          <type>BBL</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>First instruction of bbl</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="680" column="12" declfile="Source/pin/pin/image.PH" declline="680" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__BBL_1ga2740970dd7511488ba2aea081b9298ca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INS</type>
        <definition>INS BBL_InsTail</definition>
        <argsstring>(BBL x)</argsstring>
        <name>BBL_InsTail</name>
        <param>
          <type>BBL</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Last instruction of bbl</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="690" column="12" declfile="Source/pin/pin/image.PH" declline="690" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__BBL_1ga79b074eb89b45ec1cf8e0aa9532b9581" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BBL</type>
        <definition>BBL BBL_Next</definition>
        <argsstring>(BBL x)</argsstring>
        <name>BBL_Next</name>
        <param>
          <type>BBL</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Next bbl or BBL_INVALID() if this is the end of trace or rtn</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="700" column="12" declfile="Source/pin/pin/image.PH" declline="700" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__BBL_1ga24f17f1c38cee6deb1ac18c8465d6fc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BBL</type>
        <definition>BBL BBL_Prev</definition>
        <argsstring>(BBL x)</argsstring>
        <name>BBL_Prev</name>
        <param>
          <type>BBL</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Previous bbl or BBL_INVALID() if this is the beginning of trace or rtn</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="710" column="12" declfile="Source/pin/pin/image.PH" declline="710" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__BBL_1gacb48343e32bd7a793b487224ac857b19" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL BBL_Valid</definition>
        <argsstring>(BBL x)</argsstring>
        <name>BBL_Valid</name>
        <param>
          <type>BBL</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if x is not BBL_INVALID()</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="720" column="13" declfile="Source/pin/pin/image.PH" declline="720" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaab0ca5b8bfb42ab0f3cef7f17d4153da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RTN</type>
        <definition>RTN INS_Rtn</definition>
        <argsstring>(INS x)</argsstring>
        <name>INS_Rtn</name>
        <param>
          <type>INS</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Routine that contains this instruction</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="730" column="12" declfile="Source/pin/pin/image.PH" declline="730" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga41b5451478a4122627b6cd2eeda1a16c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INS</type>
        <definition>INS INS_Next</definition>
        <argsstring>(INS x)</argsstring>
        <name>INS_Next</name>
        <param>
          <type>INS</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Instruction that follows x, or <ref refid="group__INS__INSPECTION_1ga95ed2863ea5b8db8aaf5b06547beeba1" kindref="member">INS_Invalid()</ref> if x is the last in the rtn or trace</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="740" column="12" declfile="Source/pin/pin/image.PH" declline="740" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga8215f6ed3d87e4ba3b6c7f570a32459a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INS</type>
        <definition>INS INS_Prev</definition>
        <argsstring>(INS x)</argsstring>
        <name>INS_Prev</name>
        <param>
          <type>INS</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Instruction that precedes x, or <ref refid="group__INS__INSPECTION_1ga95ed2863ea5b8db8aaf5b06547beeba1" kindref="member">INS_Invalid()</ref> if x is the first in the rtn or trace</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="750" column="12" declfile="Source/pin/pin/image.PH" declline="750" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga95ed2863ea5b8db8aaf5b06547beeba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INS</type>
        <definition>INS INS_Invalid</definition>
        <argsstring>()</argsstring>
        <name>INS_Invalid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Invalid instruction used in iterators <ref refid="group__INS__INSPECTION_1ga8215f6ed3d87e4ba3b6c7f570a32459a" kindref="member">INS_Prev</ref> and <ref refid="group__INS__INSPECTION_1ga41b5451478a4122627b6cd2eeda1a16c" kindref="member">INS_Next</ref></para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="760" column="12" declfile="Source/pin/pin/image.PH" declline="760" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga09f3096b5ea86d2896bb6eef02890958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_Valid</definition>
        <argsstring>(INS x)</argsstring>
        <name>INS_Valid</name>
        <param>
          <type>INS</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Invalid instruction used in iterators <ref refid="group__INS__INSPECTION_1ga8215f6ed3d87e4ba3b6c7f570a32459a" kindref="member">INS_Prev</ref> and <ref refid="group__INS__INSPECTION_1ga41b5451478a4122627b6cd2eeda1a16c" kindref="member">INS_Next</ref></para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="770" column="13" declfile="Source/pin/pin/image.PH" declline="770" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab16f7dbf05bc9f916da996e8e6bd7bf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT INS_Address</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_Address</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Address of instruction</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="780" column="16" declfile="Source/pin/pin/image.PH" declline="780" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga9658738a9670bafe1f7060ed131c2062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USIZE</type>
        <definition>USIZE INS_Size</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_Size</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Size of instruction in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="785" column="14" declfile="Source/pin/pin/image.PH" declline="785" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga2270a4a2dde88f77acbfdf065caada7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PIN_DEPRECATED_API ADDRINT</type>
        <definition>PIN_DEPRECATED_API ADDRINT INS_DirectBranchOrCallTargetAddress</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_DirectBranchOrCallTargetAddress</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>For direct branches or calls, the target address </para>
</simplesect>
<simplesect kind="note"><para>DEPRECATED: see <ref refid="group__INS__INSPECTION_1ga201b13c2d99e665a9758950d83c28bef" kindref="member">INS_DirectControlFlowTargetAddress()</ref> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="791" column="35" declfile="Source/pin/pin/image.PH" declline="791" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga201b13c2d99e665a9758950d83c28bef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT INS_DirectControlFlowTargetAddress</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_DirectControlFlowTargetAddress</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the target address for direct control-flow instructions. must verify that <ref refid="group__INS__INSPECTION_1gaac6f6422ce76cfbaad86c7f432f818ab" kindref="member">INS_IsDirectControlFlow()</ref> is true before using this function. Refer to <ref refid="group__INS__INSPECTION_1ga308d89e7d9f39b8a0daf908778513457" kindref="member">INS_IsControlFlow()</ref> for more details on control-flow instructions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="798" column="16" declfile="Source/pin/pin/image.PH" declline="798" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga13f921362eb07927951010f074677bcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT INS_NextAddress</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_NextAddress</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the address of the next instruction. <simplesect kind="return"><para>Address of instruction that follows this one </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="804" column="16" declfile="Source/pin/pin/image.PH" declline="804" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__SYMBOLS_1ga5b8694c228627870fa2a43595b8ffc86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SYM</type>
        <definition>SYM SYM_Next</definition>
        <argsstring>(SYM x)</argsstring>
        <name>SYM_Next</name>
        <param>
          <type>SYM</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Routine that follows x, or <ref refid="group__SYMBOLS_1ga17e013be5a1296fa67398439718d2391" kindref="member">SYM_Invalid()</ref> if x is the last in the section </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="810" column="12" declfile="Source/pin/pin/image.PH" declline="810" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__SYMBOLS_1ga23bee60e01a98b84bf5620e941dd5ba6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SYM</type>
        <definition>SYM SYM_Prev</definition>
        <argsstring>(SYM x)</argsstring>
        <name>SYM_Prev</name>
        <param>
          <type>SYM</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Routine that precedes x, or <ref refid="group__SYMBOLS_1ga17e013be5a1296fa67398439718d2391" kindref="member">SYM_Invalid()</ref> if x is the first in the section </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="815" column="12" declfile="Source/pin/pin/image.PH" declline="815" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__SYMBOLS_1gaef5c779a90d7eb566bb2c940dcbf1efd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; SYM_Name</definition>
        <argsstring>(SYM x)</argsstring>
        <name>SYM_Name</name>
        <param>
          <type>SYM</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Name of symbol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="820" column="26" declfile="Source/pin/pin/image.PH" declline="820" declcolumn="26"/>
      </memberdef>
      <memberdef kind="function" id="group__SYMBOLS_1ga17e013be5a1296fa67398439718d2391" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>SYM</type>
        <definition>SYM SYM_Invalid</definition>
        <argsstring>()</argsstring>
        <name>SYM_Invalid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Used to indicate no symbol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="825" column="12" declfile="Source/pin/pin/image.PH" declline="825" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__SYMBOLS_1ga22feb0e88290967f67e25ffc8a520dc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL SYM_Valid</definition>
        <argsstring>(SYM x)</argsstring>
        <name>SYM_Valid</name>
        <param>
          <type>SYM</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if x is not <ref refid="group__SYMBOLS_1ga17e013be5a1296fa67398439718d2391" kindref="member">SYM_Invalid()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="830" column="13" declfile="Source/pin/pin/image.PH" declline="830" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__SYMBOLS_1gad6c2b77869913517813f1e000778f6ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL SYM_Dynamic</definition>
        <argsstring>(SYM x)</argsstring>
        <name>SYM_Dynamic</name>
        <param>
          <type>SYM</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if x is a dynamic symbol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="835" column="13" declfile="Source/pin/pin/image.PH" declline="835" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__SYMBOLS_1gade3b1d3f6321f6ce86f6b51d5eebb030" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL SYM_GeneratedByPin</definition>
        <argsstring>(SYM x)</argsstring>
        <name>SYM_GeneratedByPin</name>
        <param>
          <type>SYM</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if x is a symbol which did not appear in the image&apos;s original symbol table and was added by Pin (for example when resolving an ifunc). False if the symbol existed in the image&apos;s symbol table </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="842" column="13" declfile="Source/pin/pin/image.PH" declline="842" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__SYMBOLS_1ga2f78e9f7400e375397964fd28bb92983" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL SYM_IFuncImplementation</definition>
        <argsstring>(SYM x)</argsstring>
        <name>SYM_IFuncImplementation</name>
        <param>
          <type>SYM</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if x is an IFUNC implementation symbol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="847" column="13" declfile="Source/pin/pin/image.PH" declline="847" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__SYMBOLS_1ga73d2a2d0f34a5a75318977bc1096d68b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL SYM_IFuncResolver</definition>
        <argsstring>(SYM x)</argsstring>
        <name>SYM_IFuncResolver</name>
        <param>
          <type>SYM</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>True if x is an IFUNC resolver symbol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="852" column="13" declfile="Source/pin/pin/image.PH" declline="852" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__SYMBOLS_1ga9ed3c0327b560e2dc81ef1d0c5b2df99" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT SYM_Value</definition>
        <argsstring>(SYM x)</argsstring>
        <name>SYM_Value</name>
        <param>
          <type>SYM</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Value of symbol, usually an address relative to beginning of image </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="857" column="16" declfile="Source/pin/pin/image.PH" declline="857" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__SYMBOLS_1gab899cf983d7958d851b392686c66714a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 SYM_Index</definition>
        <argsstring>(SYM x)</argsstring>
        <name>SYM_Index</name>
        <param>
          <type>SYM</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>section index of a symbol </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="862" column="15" declfile="Source/pin/pin/image.PH" declline="862" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__SYMBOLS_1gabe81096b16c38fdc442bc336c707530b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT SYM_Address</definition>
        <argsstring>(SYM x)</argsstring>
        <name>SYM_Address</name>
        <param>
          <type>SYM</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>address of the symbol in memory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="867" column="16" declfile="Source/pin/pin/image.PH" declline="867" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1gac668f1d1f428a27bb860df384b54f589" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 IMG_Id</definition>
        <argsstring>(IMG x)</argsstring>
        <name>IMG_Id</name>
        <param>
          <type>IMG</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns a unique ID for the image. If an image is unloaded, the ID is not reused for a different image. If an image is unloaded and the same one is loaded back, the ID is different. <simplesect kind="return"><para>Unique ID for the image.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
 <bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
 <bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="941" column="15" declfile="Source/pin/pin/image.PH" declline="941" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1ga3a7305685873fd2f1459bb9b57252746" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID *</type>
        <definition>VOID* IMG_DynamicRawData</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_DynamicRawData</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the pointer to the object that was passed by the application for reporting the creation of a dynamic image via the Jit Profiling API. The pointer is available only for dynamic images, and only during the image load and routine instrumentation callbacks. In all other cases, the function returns NULL.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">img</parametername>
</parameternamelist>
<parameterdescription>
<para>The Pin image handle.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>pointer to the object, or NULL. </para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
 <bold>O/S</bold>: Linux*<linebreak/>
 <bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="959" column="13" declfile="Source/pin/pin/image.PH" declline="959" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1gac39eff1de20a6acbcecc203f5075d825" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IMG</type>
        <definition>IMG IMG_FindImgById</definition>
        <argsstring>(UINT32 id)</argsstring>
        <name>IMG_FindImgById</name>
        <param>
          <type>UINT32</type>
          <declname>id</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find image by Id <simplesect kind="return"><para>IMG object, valid or invalid</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
 <bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
 <bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="970" column="12" declfile="Source/pin/pin/image.PH" declline="970" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1gae21bb2ba431c4dd7964736c8102e656e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IMG</type>
        <definition>IMG IMG_FindByAddress</definition>
        <argsstring>(ADDRINT address)</argsstring>
        <name>IMG_FindByAddress</name>
        <param>
          <type>ADDRINT</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Find image by address. For each image, check if the address is within the mapped memory region of one of its segments. <simplesect kind="return"><para>IMG object, valid or invalid</para>
</simplesect>
<simplesect kind="note"><para>The pin client lock is obtained during the call of this API.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="985" column="12" declfile="Source/pin/pin/image.PH" declline="985" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1ga63bd82d1e10ee8c83d67529845f5ca46" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PIN__CALLBACKS_1ga80ecde10e25aa90133f29e875d21d61d" kindref="member">PIN_CALLBACK</ref></type>
        <definition>PIN_CALLBACK RTN_AddInstrumentFunction</definition>
        <argsstring>(RTN_INSTRUMENT_CALLBACK fun, VOID *val)</argsstring>
        <name>RTN_AddInstrumentFunction</name>
        <param>
          <type><ref refid="group__RTN_1gafc6d6cdd1f6c3b8a2d87081c0fb65b22" kindref="member">RTN_INSTRUMENT_CALLBACK</ref></type>
          <declname>fun</declname>
        </param>
        <param>
          <type>VOID *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add a function used to instrument at routine granularity <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fun</parametername>
</parameternamelist>
<parameterdescription>
<para>Instrumentation function for routines </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>val</parametername>
</parameternamelist>
<parameterdescription>
<para>Passed as the second argument to the instrumentation function</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PIN_CALLBACK A handle to a callback that can be used to further modify this callback&apos;s properties</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="999" column="21" declfile="Source/pin/pin/image.PH" declline="999" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1ga4a067152140ead3e23279ab2bd6cd723" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PIN__CALLBACKS_1ga80ecde10e25aa90133f29e875d21d61d" kindref="member">PIN_CALLBACK</ref></type>
        <definition>PIN_CALLBACK IMG_AddInstrumentFunction</definition>
        <argsstring>(IMAGECALLBACK fun, VOID *v)</argsstring>
        <name>IMG_AddInstrumentFunction</name>
        <param>
          <type><ref refid="group__IMG_1ga7d103a7d0bfc05892cdf2f9d39df9eba" kindref="member">IMAGECALLBACK</ref></type>
          <declname>fun</declname>
        </param>
        <param>
          <type>VOID *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Use this to register a call back to catch the loading of an image <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fun</parametername>
</parameternamelist>
<parameterdescription>
<para>Instrumentation function for images, it is passed an image and v </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the value of to pass to fun when an image is loaded</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PIN_CALLBACK A handle to a callback that can be used to further modify this callback&apos;s properties</para>
</simplesect>
<simplesect kind="note"><para>The pin client lock is obtained during the call of this API.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1015" column="21" declfile="Source/pin/pin/image.PH" declline="1015" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1ga4717fe8d7cd73c9efe6a414897ad96a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PIN__CALLBACKS_1ga80ecde10e25aa90133f29e875d21d61d" kindref="member">PIN_CALLBACK</ref></type>
        <definition>PIN_CALLBACK IMG_AddUnloadFunction</definition>
        <argsstring>(IMAGECALLBACK fun, VOID *v)</argsstring>
        <name>IMG_AddUnloadFunction</name>
        <param>
          <type><ref refid="group__IMG_1ga7d103a7d0bfc05892cdf2f9d39df9eba" kindref="member">IMAGECALLBACK</ref></type>
          <declname>fun</declname>
        </param>
        <param>
          <type>VOID *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Register fun as a call back to be used when an image is unloaded. This is not an instrumentation function<ndash/>it doesn&apos;t make sense to instrument a function when it removed from memory. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>fun</parametername>
</parameternamelist>
<parameterdescription>
<para>passed an image and v when an image is unloaded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>v</parametername>
</parameternamelist>
<parameterdescription>
<para>the value to pass to fun when an image is unloaded</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>PIN_CALLBACK A handle to a callback that can be used to further modify this callback&apos;s properties</para>
</simplesect>
<simplesect kind="note"><para>The pin client lock is obtained during the call of this API. </para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1031" column="21" declfile="Source/pin/pin/image.PH" declline="1031" declcolumn="21"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1ga24ddd9b74a3cb10bf8c8c56935af0fb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USIZE</type>
        <definition>USIZE RTN_Range</definition>
        <argsstring>(RTN rtn)</argsstring>
        <name>RTN_Range</name>
        <param>
          <type>RTN</type>
          <declname>rtn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>range of routine in bytes (until the next known symbol or end of current code region).</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1042" column="14" declfile="Source/pin/pin/image.PH" declline="1042" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1ga4989c730ab99a9dc194a0db4061863df" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USIZE</type>
        <definition>USIZE RTN_Size</definition>
        <argsstring>(RTN rtn)</argsstring>
        <name>RTN_Size</name>
        <param>
          <type>RTN</type>
          <declname>rtn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>size of routine in bytes</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1052" column="14" declfile="Source/pin/pin/image.PH" declline="1052" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1gac500e13529b48fcd8d4802b46b09c706" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RTN</type>
        <definition>RTN RTN_IFuncResolver</definition>
        <argsstring>(RTN rtn)</argsstring>
        <name>RTN_IFuncResolver</name>
        <param>
          <type>RTN</type>
          <declname>rtn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The resolver function that led to this implementation (ifunc)</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1062" column="12" declfile="Source/pin/pin/image.PH" declline="1062" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1gab9bbb5e3883706a2ae185e2798fd7c05" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RTN</type>
        <definition>RTN RTN_IFuncImplementation</definition>
        <argsstring>(RTN rtn)</argsstring>
        <name>RTN_IFuncImplementation</name>
        <param>
          <type>RTN</type>
          <declname>rtn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The implementation function that this ifunc points to</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1072" column="12" declfile="Source/pin/pin/image.PH" declline="1072" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1ga0a2ed1c58e7215da29194d1800ceee86" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IMG</type>
        <definition>IMG IMG_Open</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>IMG_Open</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allows one to open an image and browse it statically. There can only be one image open at a time. File names are encoded in UTF8 (a superset of ASCII).</para>
<para><simplesect kind="note"><para>This API can only be used at a safe point, which is before calling <ref refid="group__PIN__CONTROL_1gab466cd00518ff315446c92f98f7ea1a0" kindref="member">PIN_StartProgram()</ref>(/or similar)</para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The image file name. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The opened image, or IMG_INVALID() if the image cannot be opened.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1088" column="12" declfile="Source/pin/pin/image.PH" declline="1088" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1ga93a7a90e8bba62212028ed33bbfe83b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID</type>
        <definition>VOID IMG_Close</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_Close</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Close the open image.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">img</parametername>
</parameternamelist>
<parameterdescription>
<para>The IMG that was previously opened.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1100" column="13" declfile="Source/pin/pin/image.PH" declline="1100" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1ga7306ea5299f94bcad78d637c5c530d15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string RTN_FindNameByAddress</definition>
        <argsstring>(ADDRINT address)</argsstring>
        <name>RTN_FindNameByAddress</name>
        <param>
          <type>ADDRINT</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return the name of a function. If more than one name is associated with this address, the first name found is returned.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Address</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory address that corresponds to the RTN </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Name of routine, or &quot;&quot; if it is not found</para>
</simplesect>
<simplesect kind="note"><para>The pin client lock is obtained during the call of this API.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1116" column="20" declfile="Source/pin/pin/image.PH" declline="1116" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1gad835205e761f6c5299287c5f42b861a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RTN</type>
        <definition>RTN RTN_FindByAddress</definition>
        <argsstring>(ADDRINT address)</argsstring>
        <name>RTN_FindByAddress</name>
        <param>
          <type>ADDRINT</type>
          <declname>address</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Address</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory address that corresponds to the RTN </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Handle to the RTN found. If not found returns <ref refid="group__RTN_1ga2e23300e596b670a387ad7b3ed9c8d59" kindref="member">RTN_Invalid()</ref> In a multithreaded program, the returned RTN handle could go stale if another thread unloaded the shared object that contains the RTN. Use <ref refid="group__PIN__CONTROL_1ga49581d3c0504c1b73c135c2ea58ce514" kindref="member">PIN_LockClient()</ref> before calling this routine and <ref refid="group__PIN__CONTROL_1ga28de790a20fcd1a8fd572a96e9c0064b" kindref="member">PIN_UnlockClient()</ref> after the last use of the returned RTN handle. Locking is automatic from an instrumentation routine, so it is unnecessary (but harmless) to lock calls to this function from an instrumentation routine. If you just want the name, call <ref refid="group__RTN_1ga7306ea5299f94bcad78d637c5c530d15" kindref="member">RTN_FindNameByAddress</ref>, which automatically does the locking and returns a string which will not go stale if the shared library is unloaded</para>
</simplesect>
<simplesect kind="note"><para>The pin client lock is obtained during the call of this API.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1138" column="12" declfile="Source/pin/pin/image.PH" declline="1138" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1ga55c41bc78903d1ef9b93a5d758c1e157" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RTN</type>
        <definition>RTN RTN_FindByName</definition>
        <argsstring>(IMG img, const CHAR *name)</argsstring>
        <name>RTN_FindByName</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <param>
          <type>const CHAR *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>Img</parametername>
</parameternamelist>
<parameterdescription>
<para>Image in which to search for RTN </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Name</parametername>
</parameternamelist>
<parameterdescription>
<para>Name of the RTN to search in IMG </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Handle to the RTN found. If not found returns <ref refid="group__RTN_1ga2e23300e596b670a387ad7b3ed9c8d59" kindref="member">RTN_Invalid()</ref></para>
</simplesect>
<simplesect kind="note"><para>The pin client lock is obtained during the call of this API.</para>
</simplesect>
<simplesect kind="note"><para>In case this function is an Ifunc the return value will be the RTN that holds the implementation of that ifunc (Notice! this RTN can be on another image. If the resolver function is needed use <ref refid="group__RTN_1gac500e13529b48fcd8d4802b46b09c706" kindref="member">RTN_IFuncResolver()</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1157" column="12" declfile="Source/pin/pin/image.PH" declline="1157" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1gab6ea217190b6d7bfb1e1380e66f7885f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID</type>
        <definition>VOID RTN_Open</definition>
        <argsstring>(RTN rtn)</argsstring>
        <name>RTN_Open</name>
        <param>
          <type>RTN</type>
          <declname>rtn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Open the given rtn. This must be called before <ref refid="group__RTN_1ga75cda09f353a70e23f2c4a96d64b2a01" kindref="member">RTN_InsHead()</ref> or <ref refid="group__RTN_1ga806d0aa9f49fa888b684cad52591cdec" kindref="member">RTN_InsertCall()</ref> or <ref refid="group__RTN_1ga41d9df454a1ae3d4c96b64bcd5b542e6" kindref="member">RTN_InsHeadOnly()</ref></para>
<para><simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1168" column="13" declfile="Source/pin/pin/image.PH" declline="1168" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1gaf62cbb3ac07fd24f42a8ba927eb6d964" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID</type>
        <definition>VOID RTN_Close</definition>
        <argsstring>(RTN rtn)</argsstring>
        <name>RTN_Close</name>
        <param>
          <type>RTN</type>
          <declname>rtn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Close the given rtn. This must be called before opening a new rtn.</para>
<para><simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1178" column="13" declfile="Source/pin/pin/image.PH" declline="1178" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1ga75cda09f353a70e23f2c4a96d64b2a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INS</type>
        <definition>INS RTN_InsHead</definition>
        <argsstring>(RTN rtn)</argsstring>
        <name>RTN_InsHead</name>
        <param>
          <type>RTN</type>
          <declname>rtn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>You must call <ref refid="group__RTN_1gab6ea217190b6d7bfb1e1380e66f7885f" kindref="member">RTN_Open()</ref> before the first time this is called for an rtn <simplesect kind="return"><para>First instruction of rtn, or <ref refid="group__INS__INSPECTION_1ga95ed2863ea5b8db8aaf5b06547beeba1" kindref="member">INS_Invalid()</ref> if no instructions.</para>
</simplesect>
Note that Pin find the INSs of the RTN through static discovery, so Pin does <emphasis>not</emphasis> guarantee that it will find all the INSs in the RTN. If you need completely reliable instructions, use normal JIT time instrumentation, where Pin can guarantee that the instructions are correct.</para>
<para><simplesect kind="see"><para><ref refid="group__RTN_1ga41d9df454a1ae3d4c96b64bcd5b542e6" kindref="member">RTN_InsHeadOnly()</ref>, which is provided for performance purposes. If a tool wishes to examine only the first INS of an <ref refid="group__RTN" kindref="compound">RTN: Routine Object</ref> it should use <ref refid="group__RTN_1ga41d9df454a1ae3d4c96b64bcd5b542e6" kindref="member">RTN_InsHeadOnly()</ref> instead of <ref refid="group__RTN_1ga75cda09f353a70e23f2c4a96d64b2a01" kindref="member">RTN_InsHead()</ref>.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1197" column="12" declfile="Source/pin/pin/image.PH" declline="1197" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1ga41d9df454a1ae3d4c96b64bcd5b542e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INS</type>
        <definition>INS RTN_InsHeadOnly</definition>
        <argsstring>(RTN rtn)</argsstring>
        <name>RTN_InsHeadOnly</name>
        <param>
          <type>RTN</type>
          <declname>rtn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>You must call <ref refid="group__RTN_1gab6ea217190b6d7bfb1e1380e66f7885f" kindref="member">RTN_Open()</ref> before the first time this is called for an rtn <simplesect kind="return"><para>First instruction of rtn, or <ref refid="group__INS__INSPECTION_1ga95ed2863ea5b8db8aaf5b06547beeba1" kindref="member">INS_Invalid()</ref> if no instructions.</para>
</simplesect>
Note that tools should use this function when they want to examine ONLY the first INS of an RTN, and NO others. The <ref refid="group__INS__INSPECTION_1ga41b5451478a4122627b6cd2eeda1a16c" kindref="member">INS_Next()</ref> of the INS returned by this function may be <ref refid="group__INS__INSPECTION_1ga95ed2863ea5b8db8aaf5b06547beeba1" kindref="member">INS_Invalid()</ref> even if there are more INSs in the RTN. Tools that want to examine further INSs of the RTN should call the <ref refid="group__RTN_1ga75cda09f353a70e23f2c4a96d64b2a01" kindref="member">RTN_InsHead()</ref> function instead of this one.</para>
<para><simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1213" column="12" declfile="Source/pin/pin/image.PH" declline="1213" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1gad2c954694837fab4c439d59c4c474831" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INS</type>
        <definition>INS RTN_InsTail</definition>
        <argsstring>(RTN rtn)</argsstring>
        <name>RTN_InsTail</name>
        <param>
          <type>RTN</type>
          <declname>rtn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>You must call <ref refid="group__RTN_1gab6ea217190b6d7bfb1e1380e66f7885f" kindref="member">RTN_Open()</ref> before the first time this is called for an rtn <simplesect kind="return"><para>Last instruction of rtn, or <ref refid="group__INS__INSPECTION_1ga95ed2863ea5b8db8aaf5b06547beeba1" kindref="member">INS_Invalid()</ref> if no instructions</para>
</simplesect>
Note that Pin finds the INSs of the RTN through static discovery, so Pin does <emphasis>not</emphasis> guarantee that it will find all the INSs in the RTN. If you need completely reliable instructions, use normal JIT time instrumentation, where Pin can guarantee that the instructions are correct.</para>
<para><simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1228" column="12" declfile="Source/pin/pin/image.PH" declline="1228" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1gab69c11b824c822eecab72bb18b01644a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 RTN_NumIns</definition>
        <argsstring>(RTN rtn)</argsstring>
        <name>RTN_NumIns</name>
        <param>
          <type>RTN</type>
          <declname>rtn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Compute number of static INSs inside RTN.</para>
<para><simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1238" column="15" declfile="Source/pin/pin/image.PH" declline="1238" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1ga806d0aa9f49fa888b684cad52591cdec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID</type>
        <definition>VOID RTN_InsertCall</definition>
        <argsstring>(RTN rtn, IPOINT action, AFUNPTR funptr,...)</argsstring>
        <name>RTN_InsertCall</name>
        <param>
          <type>RTN</type>
          <declname>rtn</declname>
        </param>
        <param>
          <type><ref refid="group__INST__ARGS_1ga707ea08e31f44f4a81e2a7766123bad7" kindref="member">IPOINT</ref></type>
          <declname>action</declname>
        </param>
        <param>
          <type>AFUNPTR</type>
          <declname>funptr</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Insert call relative to a rtn. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>rtn</parametername>
</parameternamelist>
<parameterdescription>
<para>Routine to instrument </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>action</parametername>
</parameternamelist>
<parameterdescription>
<para>Use IPOINT_BEFORE to call funptr before execution, or IPOINT_AFTER for immediately before the return NOTE: IPOINT_AFTER is implemented by instrumenting each return instruction in a routine. Pin tries to find all return instructions, but success is not guaranteed </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>funptr</parametername>
</parameternamelist>
<parameterdescription>
<para>Analysis function to call </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="group__INST__ARGS_1ga089c27ca15e9ff139dd3a3f8a6f8451d" kindref="member">IARG_TYPE</ref>. Arguments to pass to funptr</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
NOTE: Pin does not support calling this function from either the TRACE or INS InstrumentationFunction callback </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1255" column="13" declfile="Source/pin/pin/image.PH" declline="1255" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1ga711efcb54c649bd2d891a7ae730c91d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT RTN_Address</definition>
        <argsstring>(RTN rtn)</argsstring>
        <name>RTN_Address</name>
        <param>
          <type>RTN</type>
          <declname>rtn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Address in memory of rtn</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1265" column="16" declfile="Source/pin/pin/image.PH" declline="1265" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1gad780d7c43d06f2197051a05ffb7f7b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RTN</type>
        <definition>RTN RTN_CreateAt</definition>
        <argsstring>(ADDRINT address, std::string name)</argsstring>
        <name>RTN_CreateAt</name>
        <param>
          <type>ADDRINT</type>
          <declname>address</declname>
        </param>
        <param>
          <type>std::string</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a routine object at given address. In some situations user can calculate address of routine, but Pin doesn&apos;t see it because there is no symbol at this point. <ref refid="group__RTN_1gad780d7c43d06f2197051a05ffb7f7b96" kindref="member">RTN_CreateAt()</ref> allows user to create a routine at a given address and assign a name to it. When it is done, the routine can be searched for by address or by name. The information is kept in Pin as long as the containing image is in memory.</para>
<para>The address should point to code (an executable section or segment). Since the whole code is &quot;covered&quot; by routine objects, the address should fall in one of the existing routines. Pin shortens the routine, which contains the given address, and creates a new routine which starts at the given address and continues till the next routine or the end of the code section. Close any open routine before calling this interface with <ref refid="group__RTN_1gaf62cbb3ac07fd24f42a8ba927eb6d964" kindref="member">RTN_Close()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>The start address of the new routine </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">name</parametername>
</parameternamelist>
<parameterdescription>
<para>The assigned name of the new routine </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">isIFunc</parametername>
</parameternamelist>
<parameterdescription>
<para>True if the symbol&apos;s type which corresponds to the new routine location is ifunc symbol.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>RTN object The routine object is valid if the address fails into code section.</para>
</simplesect>
<simplesect kind="note"><para>The pin client lock is obtained during the call of this API. </para>
</simplesect>
<simplesect kind="note"><para>If there is another routine object which starts at the same address this function replaces its name.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1299" column="12" declfile="Source/pin/pin/image.PH" declline="1299" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__RTN_1ga178f9e8bb73b7ea9bf3b1b374889f5a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL RTN_IsDynamic</definition>
        <argsstring>(RTN rtn)</argsstring>
        <name>RTN_IsDynamic</name>
        <param>
          <type>RTN</type>
          <declname>rtn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if the routine is dynamically created</para>
</simplesect>
A routine can be marked as dynamically created using Jit Profiling API only.</para>
<para><simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1311" column="13" declfile="Source/pin/pin/image.PH" declline="1311" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__SEC_1ga22539f22877029495af9b7bcc2bed05d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT SEC_Address</definition>
        <argsstring>(SEC sec)</argsstring>
        <name>SEC_Address</name>
        <param>
          <type>SEC</type>
          <declname>sec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Address in memory of sec</para>
</simplesect>
If image is loaded by system loader, the real virtual address of section will be returned. If the image is mapped by <ref refid="group__IMG_1ga0a2ed1c58e7215da29194d1800ceee86" kindref="member">IMG_Open()</ref> the address will be inside the mapped image. On Unix, if the section is not loadable, 0 will be returned in the both cases. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1320" column="16" declfile="Source/pin/pin/image.PH" declline="1320" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__SEC_1ga7250812be76096d1f7164ab0d863896c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL SEC_IsReadable</definition>
        <argsstring>(SEC sec)</argsstring>
        <name>SEC_IsReadable</name>
        <param>
          <type>SEC</type>
          <declname>sec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if section is readable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1325" column="13" declfile="Source/pin/pin/image.PH" declline="1325" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__SEC_1gac00ebe99a13ad14af6a9309c1beb3311" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL SEC_IsWriteable</definition>
        <argsstring>(SEC sec)</argsstring>
        <name>SEC_IsWriteable</name>
        <param>
          <type>SEC</type>
          <declname>sec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if section is writable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1330" column="13" declfile="Source/pin/pin/image.PH" declline="1330" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__SEC_1gac203291f24113eaa74ab022c1a8d1b80" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL SEC_IsExecutable</definition>
        <argsstring>(SEC sec)</argsstring>
        <name>SEC_IsExecutable</name>
        <param>
          <type>SEC</type>
          <declname>sec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if section is executable </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1335" column="13" declfile="Source/pin/pin/image.PH" declline="1335" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__SEC_1gaf2b76e650b100d4dfd2003893a8b3774" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USIZE</type>
        <definition>USIZE SEC_Size</definition>
        <argsstring>(SEC sec)</argsstring>
        <name>SEC_Size</name>
        <param>
          <type>SEC</type>
          <declname>sec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Size of section </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1340" column="14" declfile="Source/pin/pin/image.PH" declline="1340" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__BBL_1gad0a08cca57fae0af6ca98f1002a067bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL BBL_Original</definition>
        <argsstring>(BBL bbl)</argsstring>
        <name>BBL_Original</name>
        <param>
          <type>BBL</type>
          <declname>bbl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Whether the BBL data structure has been instrumented or optimized since it was created</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1350" column="13" declfile="Source/pin/pin/image.PH" declline="1350" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__BBL_1gaa7aa68a764898661e115091ba524c6ba" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT BBL_Address</definition>
        <argsstring>(BBL bbl)</argsstring>
        <name>BBL_Address</name>
        <param>
          <type>BBL</type>
          <declname>bbl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Address of a bbl</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1360" column="16" declfile="Source/pin/pin/image.PH" declline="1360" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__BBL_1gafc9ce3354eb08c36f2ff849e170e182c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USIZE</type>
        <definition>USIZE BBL_Size</definition>
        <argsstring>(BBL bbl)</argsstring>
        <name>BBL_Size</name>
        <param>
          <type>BBL</type>
          <declname>bbl</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Size of bbl code, in bytes</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1370" column="14" declfile="Source/pin/pin/image.PH" declline="1370" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1ga58c32c83de8c12d086286a5cf6c7fee8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IMG</type>
        <definition>IMG APP_ImgHead</definition>
        <argsstring>()</argsstring>
        <name>APP_ImgHead</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The first image loaded into memory</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1380" column="12" declfile="Source/pin/pin/image.PH" declline="1380" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__IMG_1gad77f6e89bae77270f990e7564f885dab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IMG</type>
        <definition>IMG APP_ImgTail</definition>
        <argsstring>()</argsstring>
        <name>APP_ImgTail</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The last image loaded into memory</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1390" column="12" declfile="Source/pin/pin/image.PH" declline="1390" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__SYMBOLS_1ga5d57f95572040c8a7db5488702716b9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string PIN_UndecorateSymbolName</definition>
        <argsstring>(const std::string &amp;symbolName, UNDECORATION style)</argsstring>
        <name>PIN_UndecorateSymbolName</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>symbolName</declname>
        </param>
        <param>
          <type><ref refid="group__SYMBOLS_1ga8b0c33dda59c8d399096714c6307f23d" kindref="member">UNDECORATION</ref></type>
          <declname>style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Undecorate symbol name. <linebreak/>
Provides undecoration of C++ names and decorated C names. The behavior of this function <linebreak/>
is compiler and OS specific. <linebreak/>
 The C++ mangled name is undecorated either to its full signature (UNDECORATION_COMPLETE style) <linebreak/>
or to [scope::]name form (UNDECORATION_NAME_ONLY style). <linebreak/>
 Example of undecoration of symbol generated by Microsoft compiler in Windows:<linebreak/>
 <programlisting><codeline><highlight class="normal">Style<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Original<sp/>name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Undecorated<sp/>name</highlight></codeline>
<codeline><highlight class="normal">=====================<sp/><sp/><sp/>==================<sp/><sp/><sp/>======================================</highlight></codeline>
<codeline><highlight class="normal">UNDECORATION_COMPLETE<sp/><sp/><sp/>?foo@ccc@@QAEPADH@Z<sp/><sp/>public:<sp/>char<sp/>*<sp/>__thiscall<sp/>ccc::foo(int)</highlight></codeline>
<codeline><highlight class="normal">UNDECORATION_NAME_ONLY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ccc::foo</highlight></codeline>
</programlisting></para>
<para>Symbol name decorated according to Windows IA32 C calling conventions is undecorated as follows: <linebreak/>
<programlisting><codeline><highlight class="normal">_foo<sp/><sp/><sp/><sp/><sp/>-&gt;<sp/><sp/>foo<sp/><sp/><sp/><sp/>(__cdecl<sp/><sp/><sp/><sp/>convention)</highlight></codeline>
<codeline><highlight class="normal">_foo@4<sp/><sp/><sp/>-&gt;<sp/><sp/>foo<sp/><sp/><sp/><sp/>(__stdcall<sp/><sp/>convention)</highlight></codeline>
<codeline><highlight class="normal">@foo@12<sp/><sp/>-&gt;<sp/><sp/>foo<sp/><sp/><sp/><sp/>(__fastcall<sp/>convention)</highlight></codeline>
</programlisting></para>
<para>Example of undecoration of symbol generated by GCC compiler on Linux:<linebreak/>
 <programlisting><codeline><highlight class="normal">Style<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Original<sp/>name<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Undecorated<sp/>name</highlight></codeline>
<codeline><highlight class="normal">=====================<sp/><sp/><sp/>==================<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>======================================</highlight></codeline>
<codeline><highlight class="normal">UNDECORATION_COMPLETE<sp/><sp/><sp/>_ZN1A7method1ERKSt6vectorIiSaIiEE<sp/><sp/>A::method1(std::vector&lt;int,<sp/>std::allocator&lt;int&gt;<sp/>&gt;<sp/>const&amp;)</highlight></codeline>
<codeline><highlight class="normal">UNDECORATION_NAME_ONLY<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>A::method1</highlight></codeline>
</programlisting></para>
<para>Undecoration of macOS* symbols is done similarly to Linux (Remove the leading &apos;_&apos; and undecorate like Linux)</para>
<para>You should be careful if using this function, since some of the undecorated names it generates for symbols generated by the compiler may not be valid C++ symbol names. For example on Linux demangling can give names like <computeroutput>construction vtable for std::istream-in-std::iostream</computeroutput>, or <computeroutput>non-virtual thunk to std::strstream::~strstream()</computeroutput>, which are not valid C++ names.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">symbolName</parametername>
</parameternamelist>
<parameterdescription>
<para>Decorated name <linebreak/>
</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">style</parametername>
</parameternamelist>
<parameterdescription>
<para>Undecoration style, relevant only to C++ undecoration <linebreak/>
 Values: <linebreak/>
 UNDECORATION_COMPLETE undecorate to full signature <linebreak/>
 UNDECORATION_NAME_ONLY undecorate to [scope::]name <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>string containing undecorated symbol name. <linebreak/>
 If undecoration fails or not supported, the function returns the unmodified original name. <linebreak/>
 </para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Windows, Linux &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="1447" column="20" declfile="Source/pin/pin/image.PH" declline="1447" declcolumn="20"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2020-2021<sp/>Intel<sp/>Corporation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PIN_G_IMAGE_PH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>duplicate<sp/>inclusion<sp/>of<sp/>image</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_G_IMAGE_PH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>IMG<sp/><ref refid="group__REPLAY_1gadd939297fe51b34aedcbcb8b627a89f2" kindref="member">IMG_CreateAt</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>filename,<sp/>ADDRINT<sp/>start,<sp/>USIZE<sp/>size,<sp/>ADDRINT<sp/>loadOffset,<sp/>BOOL<sp/>mainExecutable);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>VOID<sp/><ref refid="group__REPLAY_1ga07759b799516b378bd7f3faa0a0a8325" kindref="member">IMG_ReplayImageLoad</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>VOID*<sp/><ref refid="group__APPDEBUG_1ga0d438691aafd8e03aadbd6b60049dae9" kindref="member">IMG_GetLoaderInfo</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>VOID<sp/><ref refid="group__APPDEBUG_1ga73ff2524249eac7fa68f269b642a7dac" kindref="member">IMG_SetLoaderInfo</ref>(IMG<sp/>img,<sp/>VOID*<sp/>loaderInfo);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>IMG<sp/><ref refid="group__IMG_1gacba3766aac7698896fdb8b02df2a283e" kindref="member">IMG_Next</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>IMG<sp/><ref refid="group__IMG_1gaaa82261cabe74bad0613c43d2346a5cd" kindref="member">IMG_Prev</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>IMG<sp/><ref refid="group__IMG_1gab591ec18986fb117120a714f06a35942" kindref="member">IMG_Invalid</ref>();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__IMG_1ga231a58e55838a4d4cbce3f7c0bfa9f0a" kindref="member">IMG_Valid</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SEC<sp/><ref refid="group__IMG_1ga2f97057faee2f7ed7e23b88b339f62f8" kindref="member">IMG_SecHead</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SEC<sp/><ref refid="group__IMG_1gad01a20a588a5110b1bb1361eb60eb166" kindref="member">IMG_SecTail</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SYM<sp/><ref refid="group__IMG_1ga2d7ae0d04e4da064200e61750c2677ac" kindref="member">IMG_RegsymHead</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>PIN_DEPRECATED_API<sp/>ADDRINT<sp/><ref refid="group__DEPRECATED_1ga96eef889e1a1d4925cee55139f64fc06" kindref="member">IMG_Entry</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="group__IMG_1gab35f17d40de6a4ecc51db591354d7841" kindref="member">IMG_EntryAddress</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__IMG_1ga4f3f8677449add4d0379b5424f5dcfd9" kindref="member">IMG_HasProperty</ref>(IMG<sp/>img,<sp/><ref refid="group__IMG_1ga38ea70f6ce2ffef5488aefbcc5494bce" kindref="member">IMG_PROPERTY</ref><sp/>property);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="group__IMG_1gab3bddc2c79c3879f91e61a11c2401f05" kindref="member">IMG_Name</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="group__IMG_1gab4b4e29c1e70d42071380597aafd08a8" kindref="member">IMG_Gp</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="group__IMG_1gad01265ee1c2e8f4779092dae99bb2ee4" kindref="member">IMG_LoadOffset</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="group__IMG_1gafb09205aa6b44d2b9302fc1e422c3d75" kindref="member">IMG_LowAddress</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="group__IMG_1ga83595d9924300a59f727626ca9b8e88d" kindref="member">IMG_HighAddress</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="group__IMG_1gae2299d042776b36435d4240a0363c28a" kindref="member">IMG_StartAddress</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="322"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>USIZE<sp/><ref refid="group__IMG_1ga76799de259e3c3b0873a9d4c81745e1c" kindref="member">IMG_SizeMapped</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="group__IMG_1ga94a20481f21c96ad7ad5147b5148ecb0" kindref="member">IMG_TYPE</ref><sp/><ref refid="group__IMG_1ga987423843679af4f9d3c33b22ddec5af" kindref="member">IMG_Type</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__IMG_1ga2be7f100f47a86fadee6d0d65641e0c0" kindref="member">IMG_IsMainExecutable</ref>(IMG<sp/>x);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__IMG_1ga13e68ba11d7f7922750167713cae89bd" kindref="member">IMG_hasLinesData</ref>(IMG<sp/>x);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__IMG_1ga5b0db709955ea80522d6a6355a3a1f40" kindref="member">IMG_IsInterpreter</ref>(IMG<sp/>x);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__IMG_1ga8ce8a798f255f0f5f9bc4763ac73ae79" kindref="member">IMG_IsStaticExecutable</ref>(IMG<sp/>x);</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__IMG_1ga78ab192435225bca4332a518af45a6bc" kindref="member">IMG_IsVDSO</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="group__IMG_1gaf5fbd7cd458878d79b0fc54615fcf851" kindref="member">IMG_NumRegions</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="group__IMG_1gaf67b1793bdcc17e3ba1283adb79baf47" kindref="member">IMG_RegionHighAddress</ref>(IMG<sp/>img,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"></highlight></codeline>
<codeline lineno="427"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="group__IMG_1gad39ae770c8ef64ac89ddf46f68fa9398" kindref="member">IMG_RegionLowAddress</ref>(IMG<sp/>img,<sp/>UINT32<sp/>n);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>IMG<sp/><ref refid="group__SEC_1gac542c5ae233d0c42d2eaf1faacef5a82" kindref="member">SEC_Img</ref>(SEC<sp/>sec);</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SEC<sp/><ref refid="group__SEC_1ga1b5419aa605f3d8d2a67bc39273c4702" kindref="member">SEC_Next</ref>(SEC<sp/>sec);</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SEC<sp/><ref refid="group__SEC_1ga50ae8d91ee870b9904f341f706657588" kindref="member">SEC_Prev</ref>(SEC<sp/>sec);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="467"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SEC<sp/><ref refid="group__SEC_1ga3ffd6d6c315bc044167b1ff53262470c" kindref="member">SEC_Invalid</ref>();</highlight></codeline>
<codeline lineno="468"><highlight class="normal"></highlight></codeline>
<codeline lineno="477"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__SEC_1ga39bbbb0d30fc82506540d39d2fc1dc1f" kindref="member">SEC_Valid</ref>(SEC<sp/>x);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RTN<sp/><ref refid="group__SEC_1ga83f823574b987c84827acd508b6df53f" kindref="member">SEC_RtnHead</ref>(SEC<sp/>sec);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RTN<sp/><ref refid="group__SEC_1gaffa1bb4f87ad3b6e7263a9f4b3c0ab30" kindref="member">SEC_RtnTail</ref>(SEC<sp/>sec);</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="group__SEC_1gac9f957818ba035d1d365ea95e7875bb0" kindref="member">SEC_Name</ref>(SEC<sp/>sec);</highlight></codeline>
<codeline lineno="508"><highlight class="normal"></highlight></codeline>
<codeline lineno="517"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="group__SEC_1ga7fc7b3d12ebe2f3b13fe0bf7e3b1542e" kindref="member">SEC_TYPE</ref><sp/><ref refid="group__SEC_1gae44a85e614a3b05a950ac81e3c6cc7c4" kindref="member">SEC_Type</ref>(SEC<sp/>sec);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__SEC_1ga73822e20bc73df6d74f0f31e50db26a4" kindref="member">SEC_Mapped</ref>(SEC<sp/>sec);</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VOID*<sp/><ref refid="group__SEC_1ga126f11c6a7c886168fc517e60d053545" kindref="member">SEC_Data</ref>(SEC<sp/>sec);</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SEC<sp/><ref refid="group__RTN_1ga4f6081e93a7d5557a9b1cc8203ee195b" kindref="member">RTN_Sec</ref>(RTN<sp/>x);</highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RTN<sp/><ref refid="group__RTN_1gaa0e342698304cf65e9293e8db37acc4f" kindref="member">RTN_Next</ref>(RTN<sp/>x);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RTN<sp/><ref refid="group__RTN_1gae39bb9ac21e987ce1f31eb7552f622d4" kindref="member">RTN_Prev</ref>(RTN<sp/>x);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="586"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RTN<sp/><ref refid="group__RTN_1ga2e23300e596b670a387ad7b3ed9c8d59" kindref="member">RTN_Invalid</ref>();</highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__RTN_1ga4e8498c1e4e5f115bc1686acd28b89b1" kindref="member">RTN_Valid</ref>(RTN<sp/>x);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="group__RTN_1ga3ae6eb28b0f7ef2257e725c97863bcc6" kindref="member">RTN_Name</ref>(RTN<sp/>x);</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight></codeline>
<codeline lineno="625"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__RTN_1ga3bde1755939385c02b8348754a7a9d52" kindref="member">RTN_IsArtificial</ref>(RTN<sp/>x);</highlight></codeline>
<codeline lineno="626"><highlight class="normal"></highlight></codeline>
<codeline lineno="635"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SYM<sp/><ref refid="group__RTN_1gab56e9fdbac3ac2a1f17f8742fdbe5bd0" kindref="member">RTN_Sym</ref>(RTN<sp/>x);</highlight></codeline>
<codeline lineno="636"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UINT<sp/><ref refid="group__RTN_1gacd45b2279082cf7fad260c13b4081bcd" kindref="member">RTN_DynamicMethodId</ref>(RTN<sp/>x);</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="655"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>AFUNPTR<sp/><ref refid="group__RTN_1gae91a4e8f2bbae721afe2d988614b8fd1" kindref="member">RTN_Funptr</ref>(RTN<sp/>x);</highlight></codeline>
<codeline lineno="656"><highlight class="normal"></highlight></codeline>
<codeline lineno="670"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="group__RTN_1gad564f1e50a7cfb0cfbece91603f6642d" kindref="member">RTN_Id</ref>(RTN<sp/>x);</highlight></codeline>
<codeline lineno="671"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>INS<sp/><ref refid="group__BBL_1gade725392ec92f3042e8c5b980ca61a8a" kindref="member">BBL_InsHead</ref>(BBL<sp/>x);</highlight></codeline>
<codeline lineno="681"><highlight class="normal"></highlight></codeline>
<codeline lineno="690"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>INS<sp/><ref refid="group__BBL_1ga2740970dd7511488ba2aea081b9298ca" kindref="member">BBL_InsTail</ref>(BBL<sp/>x);</highlight></codeline>
<codeline lineno="691"><highlight class="normal"></highlight></codeline>
<codeline lineno="700"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BBL<sp/><ref refid="group__BBL_1ga79b074eb89b45ec1cf8e0aa9532b9581" kindref="member">BBL_Next</ref>(BBL<sp/>x);</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="710"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BBL<sp/><ref refid="group__BBL_1ga24f17f1c38cee6deb1ac18c8465d6fc0" kindref="member">BBL_Prev</ref>(BBL<sp/>x);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"></highlight></codeline>
<codeline lineno="720"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__BBL_1gacb48343e32bd7a793b487224ac857b19" kindref="member">BBL_Valid</ref>(BBL<sp/>x);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"></highlight></codeline>
<codeline lineno="730"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RTN<sp/><ref refid="group__INS__INSPECTION_1gaab0ca5b8bfb42ab0f3cef7f17d4153da" kindref="member">INS_Rtn</ref>(INS<sp/>x);</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="740"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>INS<sp/><ref refid="group__INS__INSPECTION_1ga41b5451478a4122627b6cd2eeda1a16c" kindref="member">INS_Next</ref>(INS<sp/>x);</highlight></codeline>
<codeline lineno="741"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>INS<sp/><ref refid="group__INS__INSPECTION_1ga8215f6ed3d87e4ba3b6c7f570a32459a" kindref="member">INS_Prev</ref>(INS<sp/>x);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="760"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>INS<sp/><ref refid="group__INS__INSPECTION_1ga95ed2863ea5b8db8aaf5b06547beeba1" kindref="member">INS_Invalid</ref>();</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="770"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__INS__INSPECTION_1ga09f3096b5ea86d2896bb6eef02890958" kindref="member">INS_Valid</ref>(INS<sp/>x);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="780"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="group__INS__INSPECTION_1gab16f7dbf05bc9f916da996e8e6bd7bf8" kindref="member">INS_Address</ref>(INS<sp/>ins);</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="785"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>USIZE<sp/><ref refid="group__INS__INSPECTION_1ga9658738a9670bafe1f7060ed131c2062" kindref="member">INS_Size</ref>(INS<sp/>ins);</highlight></codeline>
<codeline lineno="786"><highlight class="normal"></highlight></codeline>
<codeline lineno="791"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>PIN_DEPRECATED_API<sp/>ADDRINT<sp/><ref refid="group__INS__INSPECTION_1ga2270a4a2dde88f77acbfdf065caada7c" kindref="member">INS_DirectBranchOrCallTargetAddress</ref>(INS<sp/>ins);</highlight></codeline>
<codeline lineno="792"><highlight class="normal"></highlight></codeline>
<codeline lineno="798"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="group__INS__INSPECTION_1ga201b13c2d99e665a9758950d83c28bef" kindref="member">INS_DirectControlFlowTargetAddress</ref>(INS<sp/>ins);</highlight></codeline>
<codeline lineno="799"><highlight class="normal"></highlight></codeline>
<codeline lineno="804"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="group__INS__INSPECTION_1ga13f921362eb07927951010f074677bcc" kindref="member">INS_NextAddress</ref>(INS<sp/>ins);</highlight></codeline>
<codeline lineno="805"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SYM<sp/><ref refid="group__SYMBOLS_1ga5b8694c228627870fa2a43595b8ffc86" kindref="member">SYM_Next</ref>(SYM<sp/>x);</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="815"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SYM<sp/><ref refid="group__SYMBOLS_1ga23bee60e01a98b84bf5620e941dd5ba6" kindref="member">SYM_Prev</ref>(SYM<sp/>x);</highlight></codeline>
<codeline lineno="816"><highlight class="normal"></highlight></codeline>
<codeline lineno="820"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/><ref refid="group__SYMBOLS_1gaef5c779a90d7eb566bb2c940dcbf1efd" kindref="member">SYM_Name</ref>(SYM<sp/>x);</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="825"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>SYM<sp/><ref refid="group__SYMBOLS_1ga17e013be5a1296fa67398439718d2391" kindref="member">SYM_Invalid</ref>();</highlight></codeline>
<codeline lineno="826"><highlight class="normal"></highlight></codeline>
<codeline lineno="830"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__SYMBOLS_1ga22feb0e88290967f67e25ffc8a520dc1" kindref="member">SYM_Valid</ref>(SYM<sp/>x);</highlight></codeline>
<codeline lineno="831"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__SYMBOLS_1gad6c2b77869913517813f1e000778f6ff" kindref="member">SYM_Dynamic</ref>(SYM<sp/>x);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="842"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__SYMBOLS_1gade3b1d3f6321f6ce86f6b51d5eebb030" kindref="member">SYM_GeneratedByPin</ref>(SYM<sp/>x);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="847"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__SYMBOLS_1ga2f78e9f7400e375397964fd28bb92983" kindref="member">SYM_IFuncImplementation</ref>(SYM<sp/>x);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__SYMBOLS_1ga73d2a2d0f34a5a75318977bc1096d68b" kindref="member">SYM_IFuncResolver</ref>(SYM<sp/>x);</highlight></codeline>
<codeline lineno="853"><highlight class="normal"></highlight></codeline>
<codeline lineno="857"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="group__SYMBOLS_1ga9ed3c0327b560e2dc81ef1d0c5b2df99" kindref="member">SYM_Value</ref>(SYM<sp/>x);</highlight></codeline>
<codeline lineno="858"><highlight class="normal"></highlight></codeline>
<codeline lineno="862"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="group__SYMBOLS_1gab899cf983d7958d851b392686c66714a" kindref="member">SYM_Index</ref>(SYM<sp/>x);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"></highlight></codeline>
<codeline lineno="867"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="group__SYMBOLS_1gabe81096b16c38fdc442bc336c707530b" kindref="member">SYM_Address</ref>(SYM<sp/>x);</highlight></codeline>
<codeline lineno="868"><highlight class="normal"></highlight></codeline>
<codeline lineno="872"><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>VOID<sp/>(*<ref refid="group__IMG_1ga7d103a7d0bfc05892cdf2f9d39df9eba" kindref="member">IMAGECALLBACK</ref>)(IMG,<sp/>VOID*);</highlight></codeline>
<codeline lineno="873"><highlight class="normal"></highlight></codeline>
<codeline lineno="878"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="group__PIN__CONTROL_1ga32ad8725a818ddded04963a3b35a317c" kindref="member">SYMBOL_INFO_MODE</ref></highlight></codeline>
<codeline lineno="879"><highlight class="normal">{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PIN__CONTROL_1gga32ad8725a818ddded04963a3b35a317ca638dc98de833dc4037e14bc6b0e2293d" kindref="member">NO_SYMBOLS</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PIN__CONTROL_1gga32ad8725a818ddded04963a3b35a317ca7deba6e46686ecdd822e1481e3fa32ef" kindref="member">EXPORT_SYMBOLS</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>0),<sp/></highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PIN__CONTROL_1gga32ad8725a818ddded04963a3b35a317ca69ec95d319e1326991d9a661c7b5a349" kindref="member">DEBUG_SYMBOLS</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>1),<sp/></highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PIN__CONTROL_1gga32ad8725a818ddded04963a3b35a317ca1c55b53fa60ae1040208433b28c4f833" kindref="member">IFUNC_SYMBOLS</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>(1<sp/>&lt;&lt;<sp/>2),<sp/></highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="group__PIN__CONTROL_1gga32ad8725a818ddded04963a3b35a317ca377cc21f8510135927d79a96d656a726" kindref="member">DEBUG_OR_EXPORT_SYMBOLS</ref><sp/>=<sp/>(<ref refid="group__PIN__CONTROL_1gga32ad8725a818ddded04963a3b35a317ca69ec95d319e1326991d9a661c7b5a349" kindref="member">DEBUG_SYMBOLS</ref><sp/>|<sp/><ref refid="group__PIN__CONTROL_1gga32ad8725a818ddded04963a3b35a317ca7deba6e46686ecdd822e1481e3fa32ef" kindref="member">EXPORT_SYMBOLS</ref>)<sp/></highlight></codeline>
<codeline lineno="885"><highlight class="normal">};</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="891" refid="classSymbolAddressRange" refkind="compound"><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="classSymbolAddressRange" kindref="compound">SymbolAddressRange</ref></highlight></codeline>
<codeline lineno="892"><highlight class="normal">{</highlight></codeline>
<codeline lineno="893"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="894"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSymbolAddressRange" kindref="compound">SymbolAddressRange</ref>()<sp/>:<sp/>base(0),<sp/>size(0),<sp/>name(</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="895"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSymbolAddressRange" kindref="compound">SymbolAddressRange</ref>(std::string<sp/>sym_name,<sp/>ADDRINT<sp/>sym_base,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sym_size)<sp/>:<sp/>base(sym_base),<sp/>size(sym_size),<sp/>name(sym_name)</highlight></codeline>
<codeline lineno="896"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="897"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSymbolAddressRange" kindref="compound">SymbolAddressRange</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classSymbolAddressRange" kindref="compound">SymbolAddressRange</ref>&amp;<sp/>obj)</highlight></codeline>
<codeline lineno="898"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="899"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>obj.base;</highlight></codeline>
<codeline lineno="900"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>obj.size;</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>obj.name;</highlight></codeline>
<codeline lineno="902"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="903"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSymbolAddressRange" kindref="compound">SymbolAddressRange</ref>&amp;<sp/>operator=(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classSymbolAddressRange" kindref="compound">SymbolAddressRange</ref>&amp;<sp/>obj)</highlight></codeline>
<codeline lineno="904"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="905"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>base<sp/>=<sp/>obj.base;</highlight></codeline>
<codeline lineno="906"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>size<sp/>=<sp/>obj.size;</highlight></codeline>
<codeline lineno="907"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>name<sp/>=<sp/>obj.name;</highlight></codeline>
<codeline lineno="908"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="909"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="910"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOL<sp/>operator&lt;(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="classSymbolAddressRange" kindref="compound">SymbolAddressRange</ref>&amp;<sp/>range)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(base<sp/>&lt;<sp/>range.base);<sp/>}</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/>BOOL<sp/>Contains(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ADDRINT<sp/>addr)</highlight><highlight class="keyword"><sp/>const<sp/></highlight><highlight class="normal">{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>((addr<sp/>-<sp/>base)<sp/>&lt;<sp/>size);<sp/>}</highlight></codeline>
<codeline lineno="912"><highlight class="normal"></highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/>ADDRINT<sp/>base;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size;</highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="917"><highlight class="normal">};</highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="922" refid="structSymbolDebugInfo" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structSymbolDebugInfo" kindref="compound">SymbolDebugInfo</ref></highlight></codeline>
<codeline lineno="923"><highlight class="normal">{</highlight></codeline>
<codeline lineno="924"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structSymbolDebugInfo" kindref="compound">SymbolDebugInfo</ref>(std::string<sp/>sym_name,<sp/>ADDRINT<sp/>sym_base,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>sym_size)<sp/>:<sp/>name(sym_name),<sp/>range(sym_name,<sp/>sym_base,<sp/>sym_size)</highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/>{}</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>name;</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="classSymbolAddressRange" kindref="compound">SymbolAddressRange</ref><sp/>range;</highlight></codeline>
<codeline lineno="928"><highlight class="normal">};</highlight></codeline>
<codeline lineno="929"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="group__IMG_1gac668f1d1f428a27bb860df384b54f589" kindref="member">IMG_Id</ref>(IMG<sp/>x);</highlight></codeline>
<codeline lineno="942"><highlight class="normal"></highlight></codeline>
<codeline lineno="959"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>VOID*<sp/><ref refid="group__IMG_1ga3a7305685873fd2f1459bb9b57252746" kindref="member">IMG_DynamicRawData</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>IMG<sp/><ref refid="group__IMG_1gac39eff1de20a6acbcecc203f5075d825" kindref="member">IMG_FindImgById</ref>(UINT32<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="971"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>IMG<sp/><ref refid="group__IMG_1gae21bb2ba431c4dd7964736c8102e656e" kindref="member">IMG_FindByAddress</ref>(ADDRINT<sp/>address);</highlight></codeline>
<codeline lineno="986"><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="group__PIN__CALLBACKS_1ga80ecde10e25aa90133f29e875d21d61d" kindref="member">PIN_CALLBACK</ref><sp/><ref refid="group__RTN_1ga63bd82d1e10ee8c83d67529845f5ca46" kindref="member">RTN_AddInstrumentFunction</ref>(<ref refid="group__RTN_1gafc6d6cdd1f6c3b8a2d87081c0fb65b22" kindref="member">RTN_INSTRUMENT_CALLBACK</ref><sp/>fun,<sp/>VOID*<sp/>val);</highlight></codeline>
<codeline lineno="1000"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="group__PIN__CALLBACKS_1ga80ecde10e25aa90133f29e875d21d61d" kindref="member">PIN_CALLBACK</ref><sp/><ref refid="group__IMG_1ga4a067152140ead3e23279ab2bd6cd723" kindref="member">IMG_AddInstrumentFunction</ref>(<ref refid="group__IMG_1ga7d103a7d0bfc05892cdf2f9d39df9eba" kindref="member">IMAGECALLBACK</ref><sp/>fun,<sp/>VOID*<sp/>v);</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"></highlight></codeline>
<codeline lineno="1031"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="group__PIN__CALLBACKS_1ga80ecde10e25aa90133f29e875d21d61d" kindref="member">PIN_CALLBACK</ref><sp/><ref refid="group__IMG_1ga4717fe8d7cd73c9efe6a414897ad96a3" kindref="member">IMG_AddUnloadFunction</ref>(<ref refid="group__IMG_1ga7d103a7d0bfc05892cdf2f9d39df9eba" kindref="member">IMAGECALLBACK</ref><sp/>fun,<sp/>VOID*<sp/>v);</highlight></codeline>
<codeline lineno="1032"><highlight class="normal"></highlight></codeline>
<codeline lineno="1042"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>USIZE<sp/><ref refid="group__RTN_1ga24ddd9b74a3cb10bf8c8c56935af0fb5" kindref="member">RTN_Range</ref>(RTN<sp/>rtn);</highlight></codeline>
<codeline lineno="1043"><highlight class="normal"></highlight></codeline>
<codeline lineno="1052"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>USIZE<sp/><ref refid="group__RTN_1ga4989c730ab99a9dc194a0db4061863df" kindref="member">RTN_Size</ref>(RTN<sp/>rtn);</highlight></codeline>
<codeline lineno="1053"><highlight class="normal"></highlight></codeline>
<codeline lineno="1062"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RTN<sp/><ref refid="group__RTN_1gac500e13529b48fcd8d4802b46b09c706" kindref="member">RTN_IFuncResolver</ref>(RTN<sp/>rtn);</highlight></codeline>
<codeline lineno="1063"><highlight class="normal"></highlight></codeline>
<codeline lineno="1072"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RTN<sp/><ref refid="group__RTN_1gab9bbb5e3883706a2ae185e2798fd7c05" kindref="member">RTN_IFuncImplementation</ref>(RTN<sp/>rtn);</highlight></codeline>
<codeline lineno="1073"><highlight class="normal"></highlight></codeline>
<codeline lineno="1088"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>IMG<sp/><ref refid="group__IMG_1ga0a2ed1c58e7215da29194d1800ceee86" kindref="member">IMG_Open</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>filename);</highlight></codeline>
<codeline lineno="1089"><highlight class="normal"></highlight></codeline>
<codeline lineno="1100"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>VOID<sp/><ref refid="group__IMG_1ga93a7a90e8bba62212028ed33bbfe83b2" kindref="member">IMG_Close</ref>(IMG<sp/>img);</highlight></codeline>
<codeline lineno="1101"><highlight class="normal"></highlight></codeline>
<codeline lineno="1116"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="group__RTN_1ga7306ea5299f94bcad78d637c5c530d15" kindref="member">RTN_FindNameByAddress</ref>(ADDRINT<sp/>address);</highlight></codeline>
<codeline lineno="1117"><highlight class="normal"></highlight></codeline>
<codeline lineno="1138"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RTN<sp/><ref refid="group__RTN_1gad835205e761f6c5299287c5f42b861a1" kindref="member">RTN_FindByAddress</ref>(ADDRINT<sp/>address);</highlight></codeline>
<codeline lineno="1139"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RTN<sp/><ref refid="group__RTN_1ga55c41bc78903d1ef9b93a5d758c1e157" kindref="member">RTN_FindByName</ref>(IMG<sp/>img,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>CHAR*<sp/>name);</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"></highlight></codeline>
<codeline lineno="1168"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>VOID<sp/><ref refid="group__RTN_1gab6ea217190b6d7bfb1e1380e66f7885f" kindref="member">RTN_Open</ref>(RTN<sp/>rtn);</highlight></codeline>
<codeline lineno="1169"><highlight class="normal"></highlight></codeline>
<codeline lineno="1178"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>VOID<sp/><ref refid="group__RTN_1gaf62cbb3ac07fd24f42a8ba927eb6d964" kindref="member">RTN_Close</ref>(RTN<sp/>rtn);</highlight></codeline>
<codeline lineno="1179"><highlight class="normal"></highlight></codeline>
<codeline lineno="1197"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>INS<sp/><ref refid="group__RTN_1ga75cda09f353a70e23f2c4a96d64b2a01" kindref="member">RTN_InsHead</ref>(RTN<sp/>rtn);</highlight></codeline>
<codeline lineno="1198"><highlight class="normal"></highlight></codeline>
<codeline lineno="1213"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>INS<sp/><ref refid="group__RTN_1ga41d9df454a1ae3d4c96b64bcd5b542e6" kindref="member">RTN_InsHeadOnly</ref>(RTN<sp/>rtn);</highlight></codeline>
<codeline lineno="1214"><highlight class="normal"></highlight></codeline>
<codeline lineno="1228"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>INS<sp/><ref refid="group__RTN_1gad2c954694837fab4c439d59c4c474831" kindref="member">RTN_InsTail</ref>(RTN<sp/>rtn);</highlight></codeline>
<codeline lineno="1229"><highlight class="normal"></highlight></codeline>
<codeline lineno="1238"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="group__RTN_1gab69c11b824c822eecab72bb18b01644a" kindref="member">RTN_NumIns</ref>(RTN<sp/>rtn);</highlight></codeline>
<codeline lineno="1239"><highlight class="normal"></highlight></codeline>
<codeline lineno="1255"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>VOID<sp/><ref refid="group__RTN_1ga806d0aa9f49fa888b684cad52591cdec" kindref="member">RTN_InsertCall</ref>(RTN<sp/>rtn,<sp/><ref refid="group__INST__ARGS_1ga707ea08e31f44f4a81e2a7766123bad7" kindref="member">IPOINT</ref><sp/>action,<sp/>AFUNPTR<sp/>funptr,<sp/>...);</highlight></codeline>
<codeline lineno="1256"><highlight class="normal"></highlight></codeline>
<codeline lineno="1265"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="group__RTN_1ga711efcb54c649bd2d891a7ae730c91d0" kindref="member">RTN_Address</ref>(RTN<sp/>rtn);</highlight></codeline>
<codeline lineno="1266"><highlight class="normal"></highlight></codeline>
<codeline lineno="1299"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>RTN<sp/><ref refid="group__RTN_1gad780d7c43d06f2197051a05ffb7f7b96" kindref="member">RTN_CreateAt</ref>(ADDRINT<sp/>address,<sp/>std::string<sp/>name);</highlight></codeline>
<codeline lineno="1300"><highlight class="normal"></highlight></codeline>
<codeline lineno="1311"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__RTN_1ga178f9e8bb73b7ea9bf3b1b374889f5a5" kindref="member">RTN_IsDynamic</ref>(RTN<sp/>rtn);</highlight></codeline>
<codeline lineno="1312"><highlight class="normal"></highlight></codeline>
<codeline lineno="1320"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="group__SEC_1ga22539f22877029495af9b7bcc2bed05d" kindref="member">SEC_Address</ref>(SEC<sp/>sec);</highlight></codeline>
<codeline lineno="1321"><highlight class="normal"></highlight></codeline>
<codeline lineno="1325"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__SEC_1ga7250812be76096d1f7164ab0d863896c" kindref="member">SEC_IsReadable</ref>(SEC<sp/>sec);</highlight></codeline>
<codeline lineno="1326"><highlight class="normal"></highlight></codeline>
<codeline lineno="1330"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__SEC_1gac00ebe99a13ad14af6a9309c1beb3311" kindref="member">SEC_IsWriteable</ref>(SEC<sp/>sec);</highlight></codeline>
<codeline lineno="1331"><highlight class="normal"></highlight></codeline>
<codeline lineno="1335"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__SEC_1gac203291f24113eaa74ab022c1a8d1b80" kindref="member">SEC_IsExecutable</ref>(SEC<sp/>sec);</highlight></codeline>
<codeline lineno="1336"><highlight class="normal"></highlight></codeline>
<codeline lineno="1340"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>USIZE<sp/><ref refid="group__SEC_1gaf2b76e650b100d4dfd2003893a8b3774" kindref="member">SEC_Size</ref>(SEC<sp/>sec);</highlight></codeline>
<codeline lineno="1341"><highlight class="normal"></highlight></codeline>
<codeline lineno="1350"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__BBL_1gad0a08cca57fae0af6ca98f1002a067bf" kindref="member">BBL_Original</ref>(BBL<sp/>bbl);</highlight></codeline>
<codeline lineno="1351"><highlight class="normal"></highlight></codeline>
<codeline lineno="1360"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>ADDRINT<sp/><ref refid="group__BBL_1gaa7aa68a764898661e115091ba524c6ba" kindref="member">BBL_Address</ref>(BBL<sp/>bbl);</highlight></codeline>
<codeline lineno="1361"><highlight class="normal"></highlight></codeline>
<codeline lineno="1370"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>USIZE<sp/><ref refid="group__BBL_1gafc9ce3354eb08c36f2ff849e170e182c" kindref="member">BBL_Size</ref>(BBL<sp/>bbl);</highlight></codeline>
<codeline lineno="1371"><highlight class="normal"></highlight></codeline>
<codeline lineno="1380"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>IMG<sp/><ref refid="group__IMG_1ga58c32c83de8c12d086286a5cf6c7fee8" kindref="member">APP_ImgHead</ref>();</highlight></codeline>
<codeline lineno="1381"><highlight class="normal"></highlight></codeline>
<codeline lineno="1390"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>IMG<sp/><ref refid="group__IMG_1gad77f6e89bae77270f990e7564f885dab" kindref="member">APP_ImgTail</ref>();</highlight></codeline>
<codeline lineno="1391"><highlight class="normal"></highlight></codeline>
<codeline lineno="1447"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>std::string<sp/><ref refid="group__SYMBOLS_1ga5d57f95572040c8a7db5488702716b9d" kindref="member">PIN_UndecorateSymbolName</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>symbolName,<sp/><ref refid="group__SYMBOLS_1ga8b0c33dda59c8d399096714c6307f23d" kindref="member">UNDECORATION</ref><sp/>style);</highlight></codeline>
<codeline lineno="1448"><highlight class="normal"></highlight></codeline>
<codeline lineno="1449"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PIN_G_IMAGE_PH</highlight></codeline>
    </programlisting>
    <location file="Source/pin/pin/image.PH"/>
  </compounddef>
</doxygen>
