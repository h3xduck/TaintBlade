<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="backtrace__u_8PH" kind="file" language="C++">
    <compoundname>backtrace_u.PH</compoundname>
      <sectiondef kind="define">
      <memberdef kind="define" id="backtrace__u_8PH_1a7c5aa7a97f3d6f7ef127de50f3d34431" prot="public" static="no">
        <name>PIN_G_BACKTRACE_U_PH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin_u/backtrace_u.PH" line="9" column="10" bodyfile="Source/pin/pin_u/backtrace_u.PH" bodystart="9" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__CONTEXT_1ga992f6073d146d7c5a61476f3a1ce474a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PIN_GetInitialContextForUnwind</definition>
        <argsstring>(const CONTEXT *ctxt, void *cursor)</argsstring>
        <name>PIN_GetInitialContextForUnwind</name>
        <param>
          <type>const <ref refid="structCONTEXT" kindref="compound">CONTEXT</ref> *</type>
          <declname>ctxt</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>cursor</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>libbacktrace equivalent implementation</para>
<para>This function is the equivalent Pin version of unw_getcontext(): While unw_getcontext() generates a context for libunwind based on the native context, <ref refid="group__CONTEXT_1ga992f6073d146d7c5a61476f3a1ce474a" kindref="member">PIN_GetInitialContextForUnwind()</ref> generates a context for libunwind based on Pin <ref refid="structCONTEXT" kindref="compound">CONTEXT</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctxt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pin context to convert to libunwind&apos;s context </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">cursor</parametername>
</parameternamelist>
<parameterdescription>
<para>Points to valid object of type unw_cursor_t which was initialized using unw_init_local(). </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>UNW_ESUCCESS in case of success.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> All<linebreak/>
<bold>O/S</bold>: Linux &amp; macOS*<linebreak/>
<bold>CPU:</bold> IA-32 and Intel(R) 64 architectures<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin_u/backtrace_u.PH" line="27" column="12" declfile="Source/pin/pin_u/backtrace_u.PH" declline="27" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__CONTEXT_1ga9e0232d7642468e8bfbd4eca00983ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int PIN_Backtrace</definition>
        <argsstring>(const CONTEXT *ctxt, void **buffer, int size)</argsstring>
        <name>PIN_Backtrace</name>
        <param>
          <type>const <ref refid="structCONTEXT" kindref="compound">CONTEXT</ref> *</type>
          <declname>ctxt</declname>
        </param>
        <param>
          <type>void **</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>int</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function is the equivalent Pin version of backtrace(): While backtrace() generates a backtrace for the Pin (and Pin tool) call stack, <ref refid="group__CONTEXT_1ga9e0232d7642468e8bfbd4eca00983ecf" kindref="member">PIN_Backtrace()</ref> generates a backtrace for the application that Pin is instrumenting.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ctxt</parametername>
</parameternamelist>
<parameterdescription>
<para>context of the application - the backtrace will be generated based upon it. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Points to an array on which the backtrace will be stored. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">size</parametername>
</parameternamelist>
<parameterdescription>
<para>specifies the maximum number of addresses that can be stored in buffer. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of addresses returned in buffer, which is not greater than <bold>size</bold>.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> All<linebreak/>
<bold>O/S</bold>: Linux &amp; macOS*<linebreak/>
<bold>CPU:</bold> IA-32 and Intel(R) 64 architectures<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin_u/backtrace_u.PH" line="44" column="12" declfile="Source/pin/pin_u/backtrace_u.PH" declline="44" declcolumn="12"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2020-2021<sp/>Intel<sp/>Corporation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PIN_G_BACKTRACE_U_PH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>duplicate<sp/>inclusion<sp/>of<sp/>backtrace_u</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_G_BACKTRACE_U_PH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__CONTEXT_1ga992f6073d146d7c5a61476f3a1ce474a" kindref="member">PIN_GetInitialContextForUnwind</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structCONTEXT" kindref="compound">CONTEXT</ref>*<sp/>ctxt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>cursor);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__CONTEXT_1ga9e0232d7642468e8bfbd4eca00983ecf" kindref="member">PIN_Backtrace</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structCONTEXT" kindref="compound">CONTEXT</ref>*<sp/>ctxt,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**<sp/>buffer,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>size);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PIN_G_BACKTRACE_U_PH</highlight></codeline>
    </programlisting>
    <location file="Source/pin/pin_u/backtrace_u.PH"/>
  </compounddef>
</doxygen>
