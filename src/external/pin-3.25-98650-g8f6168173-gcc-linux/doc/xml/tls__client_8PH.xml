<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="tls__client_8PH" kind="file" language="C++">
    <compoundname>tls_client.PH</compoundname>
      <sectiondef kind="define">
      <memberdef kind="define" id="tls__client_8PH_1a79e366d41a0f22a1b45ed3339394ab4c" prot="public" static="no">
        <name>PIN_G_TLS_CLIENT_PH</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/tls_client.PH" line="9" column="10" bodyfile="Source/pin/pin/tls_client.PH" bodystart="9" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__THREADS_1ga06fc87d81c62e9abb8790b6e5713c55b" prot="public" static="no" strong="no">
        <type></type>
        <name>@0</name>
        <enumvalue id="group__THREADS_1gga06fc87d81c62e9abb8790b6e5713c55badbdeb2ee3b82b6bc5a77b8190a65e38b" prot="public">
          <name>TLS_KEY_INTERNAL_EXCEPTION</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__THREADS_1gga06fc87d81c62e9abb8790b6e5713c55ba55ef2f7bf729f457e01bd2104328e816" prot="public">
          <name>TLS_KEY_CLIENT_FIRST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__THREADS_1gga06fc87d81c62e9abb8790b6e5713c55bafd6cef2565e5a169326dc627a220f9c5" prot="public">
          <name>TLS_KEY_CLIENT_LAST</name>
          <initializer>= TLS_KEY_CLIENT_FIRST + 63</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Keys to access client data in the thread local storage </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/tls_client.PH" line="18" column="1" bodyfile="Source/pin/pin/tls_client.PH" bodystart="17" bodyend="26"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__THREADS_1gafa0cadbcbcfe2cc7825893c8f228317c" prot="public" static="no" mutable="no">
        <type>const UINT32</type>
        <definition>const UINT32 MAX_CLIENT_TLS_KEYS</definition>
        <argsstring></argsstring>
        <name>MAX_CLIENT_TLS_KEYS</name>
        <initializer>= (TLS_KEY_CLIENT_LAST - TLS_KEY_CLIENT_FIRST + 1)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Maximum number of TLS keys that can be allocated by tool </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/tls_client.PH" line="31" column="14" bodyfile="Source/pin/pin/tls_client.PH" bodystart="31" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__THREADS_1gad90ea83ef63975cdbd767d3cc68f80cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__THREADS_1ga08319cb7eb56ee92a74dd9a97476c1eb" kindref="member">TLS_KEY</ref></type>
        <definition>TLS_KEY PIN_CreateThreadDataKey</definition>
        <argsstring>(DESTRUCTFUN destruct_func)</argsstring>
        <name>PIN_CreateThreadDataKey</name>
        <param>
          <type>DESTRUCTFUN</type>
          <declname>destruct_func</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate a new TLS key and associate it with a given data destruction function. Upon successful return, any thread of the process can use <ref refid="group__DEPRECATED_1ga83442cefc4872a7a1ef65dcd8d7a5212" kindref="member">PIN_SetThreadData()</ref> and <ref refid="group__DEPRECATED_1ga61a18ab0c0480233459762b242fe1f5a" kindref="member">PIN_GetThreadData()</ref> functions to store and retrieve values in its own slot, referenced by the allocated key. The initial value associated with the key in all threads is NULL. At the thread exit, if a key has a non-NULL pointer to the cleanup (destruction) function, and the thread has a non-NULL value in the corresponding slot, the function is called with the slot&apos;s value as its sole argument. The order in which destructors are invoked is undefined. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">destructFun</parametername>
</parameternamelist>
<parameterdescription>
<para>optional parameter that specifies data destruction function to be associated with the new key. This function is called just after notifying the client about VM thread exit. By default (NULL destructor), the data is not cleaned up. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>allocated TLS key, upon success; -1, if number of already allocated keys reached the MAX_CLIENT_TLS_KEYS limit.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/tls_client.PH" line="55" column="16" declfile="Source/pin/pin/tls_client.PH" declline="55" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__THREADS_1gac708db5e650bd8bea16364453d79d896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL PIN_DeleteThreadDataKey</definition>
        <argsstring>(TLS_KEY key)</argsstring>
        <name>PIN_DeleteThreadDataKey</name>
        <param>
          <type><ref refid="group__THREADS_1ga08319cb7eb56ee92a74dd9a97476c1eb" kindref="member">TLS_KEY</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Release TLS key, allocated by a previous call to the <ref refid="group__THREADS_1gad90ea83ef63975cdbd767d3cc68f80cd" kindref="member">PIN_CreateThreadDataKey()</ref> function. The function has no effect if specified key is not allocated/already released. After the key is released, a client should not attempt to use it for any further TLS access. Doing otherwise results in undefined behavior. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>TLS key to be released </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE, upon success; FALSE, if if specified key is invalid</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/tls_client.PH" line="71" column="13" declfile="Source/pin/pin/tls_client.PH" declline="71" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__DEPRECATED_1ga83442cefc4872a7a1ef65dcd8d7a5212" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL PIN_SetThreadData</definition>
        <argsstring>(TLS_KEY key, const VOID *data)</argsstring>
        <name>PIN_SetThreadData</name>
        <param>
          <type><ref refid="group__THREADS_1ga08319cb7eb56ee92a74dd9a97476c1eb" kindref="member">TLS_KEY</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type>const VOID *</type>
          <declname>data</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Store specified value in the specified TLS slot of the thread.</para>
<para><simplesect kind="note"><para>DEPRECATED and NO LONGER SUPPORTED. Please use the version of this function which takes a THREADID argument.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/tls_client.PH" line="86" column="13" bodyfile="Source/pin/pin/tls_client.PH" bodystart="86" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="group__THREADS_1ga43216c2d5e64dc66a1a5c02821ee2877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL PIN_SetThreadData</definition>
        <argsstring>(TLS_KEY key, const VOID *data, THREADID threadId)</argsstring>
        <name>PIN_SetThreadData</name>
        <param>
          <type><ref refid="group__THREADS_1ga08319cb7eb56ee92a74dd9a97476c1eb" kindref="member">TLS_KEY</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type>const VOID *</type>
          <declname>data</declname>
        </param>
        <param>
          <type><ref refid="group__THREADS_1ga645289be59039349ad77ad2fa7b0e2f3" kindref="member">THREADID</ref></type>
          <declname>threadId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Store specified value in the specified TLS slot of the thread. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>TLS key, referencing the slot, where the value will be stored upon successful return. The key should be allocated by a previous call to the <ref refid="group__THREADS_1gad90ea83ef63975cdbd767d3cc68f80cd" kindref="member">PIN_CreateThreadDataKey()</ref> function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">data</parametername>
</parameternamelist>
<parameterdescription>
<para>value to be stored in the TLS slot of the current thread. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">threadId</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID assigned by pin of the thread for which TLS access is desired, not necessarily the current thread. This ID can be obtained by the <ref refid="group__THREADS_1gabe759ff297488936fd2ad6d37eb60670" kindref="member">PIN_ThreadId()</ref> function call or received as the value of the IARG_THREAD_ID argument. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE, if specified key is currently allocated; FALSE, if specified key is invalid or the given thread is not yet registered in the pin thread database; undefined, if specified key is valid, but it is not currently allocated</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/tls_client.PH" line="117" column="13" declfile="Source/pin/pin/tls_client.PH" declline="117" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__DEPRECATED_1ga61a18ab0c0480233459762b242fe1f5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>VOID *</type>
        <definition>VOID* PIN_GetThreadData</definition>
        <argsstring>(TLS_KEY key)</argsstring>
        <name>PIN_GetThreadData</name>
        <param>
          <type><ref refid="group__THREADS_1ga08319cb7eb56ee92a74dd9a97476c1eb" kindref="member">TLS_KEY</ref></type>
          <declname>key</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the value stored in the specified TLS slot of the thread.</para>
<para><simplesect kind="note"><para>DEPRECATED and NO LONGER SUPPORTED. Please use the version of this function which takes a THREADID argument.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/tls_client.PH" line="132" column="13" bodyfile="Source/pin/pin/tls_client.PH" bodystart="132" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="group__THREADS_1gaf179edfddb0b623e41d84d954a32dbc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID *</type>
        <definition>VOID* PIN_GetThreadData</definition>
        <argsstring>(TLS_KEY key, THREADID threadId)</argsstring>
        <name>PIN_GetThreadData</name>
        <param>
          <type><ref refid="group__THREADS_1ga08319cb7eb56ee92a74dd9a97476c1eb" kindref="member">TLS_KEY</ref></type>
          <declname>key</declname>
        </param>
        <param>
          <type><ref refid="group__THREADS_1ga645289be59039349ad77ad2fa7b0e2f3" kindref="member">THREADID</ref></type>
          <declname>threadId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the value stored in the specified TLS slot of the thread. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">key</parametername>
</parameternamelist>
<parameterdescription>
<para>TLS key, referencing the slot, whose value is requested. The key should be allocated by a previous call to the <ref refid="group__THREADS_1gad90ea83ef63975cdbd767d3cc68f80cd" kindref="member">PIN_CreateThreadDataKey()</ref> function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">threadId</parametername>
</parameternamelist>
<parameterdescription>
<para>Thread ID assigned by pin of the thread for which TLS access is desired, not necessarily the current thread. This ID can be obtained by the <ref refid="group__THREADS_1gabe759ff297488936fd2ad6d37eb60670" kindref="member">PIN_ThreadId()</ref> function call or received as the value of the IARG_THREAD_ID argument. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>value stored in the specified slot of the thread, if specified key is currently allocated; NULL, if specified key is invalid or the given thread is not yet registered in the pin thread database; undefined, if specified key is valid, but it is not currently allocated</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/tls_client.PH" line="162" column="13" declfile="Source/pin/pin/tls_client.PH" declline="162" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2007-2021<sp/>Intel<sp/>Corporation.</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>SPDX-License-Identifier:<sp/>MIT</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>PIN_G_TLS_CLIENT_PH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#error<sp/>duplicate<sp/>inclusion<sp/>of<sp/>tls_client</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>PIN_G_TLS_CLIENT_PH</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="keyword">enum</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal">{</highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reserved<sp/>for<sp/>internal<sp/>exception<sp/>handling</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/>TLS_KEY_INTERNAL_EXCEPTION,</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>TLS_KEY_CLIENT_FIRST,</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Keys<sp/>in<sp/>the<sp/>[TLS_KEY_CLIENT_FIRST,<sp/>TLS_KEY_CLIENT_LAST]<sp/>range<sp/>can<sp/>be</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>allocated<sp/>by<sp/>tool</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>TLS_KEY_CLIENT_LAST<sp/>=<sp/>TLS_KEY_CLIENT_FIRST<sp/>+<sp/>63</highlight></codeline>
<codeline lineno="26"><highlight class="normal">};</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="keyword">const</highlight><highlight class="normal"><sp/>UINT32<sp/><ref refid="group__THREADS_1gafa0cadbcbcfe2cc7825893c8f228317c" kindref="member">MAX_CLIENT_TLS_KEYS</ref><sp/>=<sp/>(TLS_KEY_CLIENT_LAST<sp/>-<sp/>TLS_KEY_CLIENT_FIRST<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/><ref refid="group__THREADS_1ga08319cb7eb56ee92a74dd9a97476c1eb" kindref="member">TLS_KEY</ref><sp/><ref refid="group__THREADS_1gad90ea83ef63975cdbd767d3cc68f80cd" kindref="member">PIN_CreateThreadDataKey</ref>(DESTRUCTFUN<sp/>destruct_func);</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__THREADS_1gac708db5e650bd8bea16364453d79d896" kindref="member">PIN_DeleteThreadDataKey</ref>(<ref refid="group__THREADS_1ga08319cb7eb56ee92a74dd9a97476c1eb" kindref="member">TLS_KEY</ref><sp/>key);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>version<sp/>of<sp/>PIN_SetThreadData<sp/>is<sp/>now<sp/>deprecated.<sp/>Please<sp/>use<sp/>the<sp/>version<sp/>of<sp/>this<sp/>function<sp/>which<sp/>takes</highlight></codeline>
<codeline lineno="74"><highlight class="comment"><sp/>*<sp/>a<sp/>THREADID<sp/>argument.</highlight></codeline>
<codeline lineno="75"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="86"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__DEPRECATED_1ga83442cefc4872a7a1ef65dcd8d7a5212" kindref="member">PIN_SetThreadData</ref>(<ref refid="group__THREADS_1ga08319cb7eb56ee92a74dd9a97476c1eb" kindref="member">TLS_KEY</ref><sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VOID*<sp/>data)</highlight></codeline>
<codeline lineno="87"><highlight class="normal">{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(FALSE,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>version<sp/>of<sp/>PIN_SetThreadData<sp/>is<sp/>now<sp/>deprecated.<sp/>Please<sp/>use<sp/>the<sp/>version<sp/>of<sp/>this<sp/>function<sp/>which<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;takes<sp/>a<sp/>THREADID<sp/>argument.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>BOOL<sp/><ref refid="group__DEPRECATED_1ga83442cefc4872a7a1ef65dcd8d7a5212" kindref="member">PIN_SetThreadData</ref>(<ref refid="group__THREADS_1ga08319cb7eb56ee92a74dd9a97476c1eb" kindref="member">TLS_KEY</ref><sp/>key,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>VOID*<sp/>data,<sp/><ref refid="group__THREADS_1ga645289be59039349ad77ad2fa7b0e2f3" kindref="member">THREADID</ref><sp/>threadId);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>This<sp/>version<sp/>of<sp/>PIN_GetThreadData<sp/>is<sp/>now<sp/>deprecated.<sp/>Please<sp/>use<sp/>the<sp/>version<sp/>of<sp/>this<sp/>function<sp/>which<sp/>takes</highlight></codeline>
<codeline lineno="120"><highlight class="comment"><sp/>*<sp/>a<sp/>THREADID<sp/>argument.</highlight></codeline>
<codeline lineno="121"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="132"><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>VOID*<sp/><ref refid="group__DEPRECATED_1ga61a18ab0c0480233459762b242fe1f5a" kindref="member">PIN_GetThreadData</ref>(<ref refid="group__THREADS_1ga08319cb7eb56ee92a74dd9a97476c1eb" kindref="member">TLS_KEY</ref><sp/>key)</highlight></codeline>
<codeline lineno="133"><highlight class="normal">{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>ASSERT(FALSE,<sp/></highlight><highlight class="stringliteral">&quot;This<sp/>version<sp/>of<sp/>PIN_GetThreadData<sp/>is<sp/>now<sp/>deprecated.<sp/>Please<sp/>use<sp/>the<sp/>version<sp/>of<sp/>this<sp/>function<sp/>which<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;takes<sp/>a<sp/>THREADID<sp/>argument.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>FALSE;</highlight></codeline>
<codeline lineno="137"><highlight class="normal">}</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="keyword">extern</highlight><highlight class="normal"><sp/>VOID*<sp/><ref refid="group__DEPRECATED_1ga61a18ab0c0480233459762b242fe1f5a" kindref="member">PIN_GetThreadData</ref>(<ref refid="group__THREADS_1ga08319cb7eb56ee92a74dd9a97476c1eb" kindref="member">TLS_KEY</ref><sp/>key,<sp/><ref refid="group__THREADS_1ga645289be59039349ad77ad2fa7b0e2f3" kindref="member">THREADID</ref><sp/>threadId);</highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/>//<sp/>PIN_G_TLS_CLIENT_PH</highlight></codeline>
    </programlisting>
    <location file="Source/pin/pin/tls_client.PH"/>
  </compounddef>
</doxygen>
