<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__REPLAY" kind="group">
    <compoundname>REPLAY</compoundname>
    <title>REPLAY</title>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__REPLAY_1gadd939297fe51b34aedcbcb8b627a89f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>IMG</type>
        <definition>IMG IMG_CreateAt</definition>
        <argsstring>(const char *filename, ADDRINT start, USIZE size, ADDRINT loadOffset, BOOL mainExecutable)</argsstring>
        <name>IMG_CreateAt</name>
        <param>
          <type>const char *</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>ADDRINT</type>
          <declname>start</declname>
        </param>
        <param>
          <type>USIZE</type>
          <declname>size</declname>
        </param>
        <param>
          <type>ADDRINT</type>
          <declname>loadOffset</declname>
        </param>
        <param>
          <type>BOOL</type>
          <declname>mainExecutable</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Static model for instrumenting IMG&apos;s once they are loaded into memory.</para>
<para>Returns a IMG object for image loaded outside of PIN&apos;s loader. Tool should use this IMG object to mark the routines inside it, using <ref refid="group__RTN_1gad780d7c43d06f2197051a05ffb7f7b96" kindref="member">RTN_CreateAt()</ref>. After all the routines are marked, tool should call <ref refid="group__REPLAY_1ga07759b799516b378bd7f3faa0a0a8325" kindref="member">IMG_ReplayImageLoad()</ref> to finalize the image load procedure.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the image visible to Pin tools </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>memory address where first byte of the image is loaded to </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>size</parametername>
</parameternamelist>
<parameterdescription>
<para>the size of the image in memory. This means that the image region in memory will be at [start .. start+size) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>loadOffset</parametername>
</parameternamelist>
<parameterdescription>
<para>the offset between the memory addresses specified in the executable/library files and the memory addresses where this image was actaully loaded </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>mainImage</parametername>
</parameternamelist>
<parameterdescription>
<para>TRUE if this is the main image</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>IMG object that represents the image. Please make sure to call <ref refid="group__REPLAY_1ga07759b799516b378bd7f3faa0a0a8325" kindref="member">IMG_ReplayImageLoad()</ref> on the IMG object after you&apos;re done creating all the routines in the IMG object.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: All<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="37" column="12" declfile="Source/pin/pin/image.PH" declline="37" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__REPLAY_1ga07759b799516b378bd7f3faa0a0a8325" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID</type>
        <definition>VOID IMG_ReplayImageLoad</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_ReplayImageLoad</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Replays the image load of an IMG object (created by <ref refid="group__REPLAY_1gadd939297fe51b34aedcbcb8b627a89f2" kindref="member">IMG_CreateAt()</ref>). This means that all the image load callbacks will be called for the specified IMG object. If <ref refid="group__PIN__CONTROL_1gab466cd00518ff315446c92f98f7ea1a0" kindref="member">PIN_StartProgram()</ref> wasn&apos;t called yet, PIN will enqueue this request and will process this request after <ref refid="group__PIN__CONTROL_1gab466cd00518ff315446c92f98f7ea1a0" kindref="member">PIN_StartProgram()</ref> was called</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">img</parametername>
</parameternamelist>
<parameterdescription>
<para>The image object to replay its load</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The vm and pin client locks are obtained during the call of this API.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: All<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="56" column="13" declfile="Source/pin/pin/image.PH" declline="56" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__REPLAY_1ga56cbe508bdf0333f5427112711699e9c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID</type>
        <definition>VOID PIN_ReplayContextChange</definition>
        <argsstring>(THREADID tid, const CONTEXT *from, CONTEXT *to, CONTEXT_CHANGE_REASON reason, INT32 info)</argsstring>
        <name>PIN_ReplayContextChange</name>
        <param>
          <type><ref refid="group__THREADS_1ga645289be59039349ad77ad2fa7b0e2f3" kindref="member">THREADID</ref></type>
          <declname>tid</declname>
        </param>
        <param>
          <type>const <ref refid="structCONTEXT" kindref="compound">CONTEXT</ref> *</type>
          <declname>from</declname>
        </param>
        <param>
          <type><ref refid="structCONTEXT" kindref="compound">CONTEXT</ref> *</type>
          <declname>to</declname>
        </param>
        <param>
          <type><ref refid="group__PIN__CONTROL_1ga8e4e6511a0e09fdc5ec7d6dbf395b3a8" kindref="member">CONTEXT_CHANGE_REASON</ref></type>
          <declname>reason</declname>
        </param>
        <param>
          <type>INT32</type>
          <declname>info</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This API is intended for use by tools that replay the execution of an application and need to replay an asynchronous context change that was received by the application at record time. This API is not intended as a general way to send a forced context change (signal, exception, APC) to the application. To do that, see <ref refid="group__EXCEPTION_1ga35d13dc3ce578945eda8228b0db1c138" kindref="member">PIN_RaiseException()</ref>.</para>
<para>Calling this API causes Pin to call back on the tool&apos;s context-changed notification function if one was set up with <ref refid="group__PIN__CONTROL_1ga1cc0f28140cb83a035ebabdddf81861f" kindref="member">PIN_AddContextChangeFunction()</ref>. Thus, the tool is notified about the context change as though the application really received it. Calling this API may also notify an external debugger if one is attached to Pin via the -appdebug switch, which gives the debugger a chance to stop execution of the application when it receives the replayed context change. (Whether this happens depends on the CONTEXT_CHANGE_REASON, and the expected behavior of the debugger on different platforms).</para>
<para><ref refid="group__REPLAY_1ga56cbe508bdf0333f5427112711699e9c" kindref="member">PIN_ReplayContextChange()</ref> does not return to its caller. If the <emphasis>to</emphasis> parameter is not NULL, execution resumes at that context after it has been potentially modified by the tool&apos;s context-changed call-back. If <emphasis>reason</emphasis> is CONTEXT_CHANGE_REASON_FATALSIGNAL, Pin emulates a fatal signal and execution terminates gracefully after calling the tool&apos;s Fini functions.</para>
<para>This API can be called from an analysis routine or a replacement routine, but not from a callback.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">tid</parametername>
</parameternamelist>
<parameterdescription>
<para>The ID of the calling thread. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">from</parametername>
</parameternamelist>
<parameterdescription>
<para>The register state prior to the context change (e.g. the register state at the point when the signal is received for CONTEXT_CHANGE_REASON_SIGNAL). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">to</parametername>
</parameternamelist>
<parameterdescription>
<para>The register state immediately after the context change. This should be NULL for CONTEXT_CHANGE_REASON_FATALSIGNAL. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">reason</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the context change. <linebreak/>
 </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">info</parametername>
</parameternamelist>
<parameterdescription>
<para>Additional information, depending on <emphasis>reason</emphasis>. (Ignored for <emphasis>reason</emphasis> codes not listed below.) <itemizedlist>
<listitem><para>CONTEXT_CHANGE_REASON_FATALSIGNAL: The Unix signal number. </para>
</listitem>
<listitem><para>CONTEXT_CHANGE_REASON_SIGNAL: The Unix signal number. </para>
</listitem>
<listitem><para>CONTEXT_CHANGE_REASON_EXCEPTION: The Windows exception code. </para>
</listitem>
</itemizedlist>
</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function does not return.</para>
</simplesect>
<simplesect kind="note"><para>The vm and pin client locks are obtained during the call of this API.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: Linux &amp; Windows<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/pin_client_replay.PH" line="116" column="13" declfile="Source/pin/pin/pin_client_replay.PH" declline="116" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__REPLAY_1ga67068d9c22e4da2fb9522098dcf18bde" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID</type>
        <definition>VOID IMG_ReplayImageUnload</definition>
        <argsstring>(IMG img)</argsstring>
        <name>IMG_ReplayImageUnload</name>
        <param>
          <type>IMG</type>
          <declname>img</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ask Pin to perform all the functions it would normally do when it detects that a shared library has been unloaded. This is intended for use in a replay system, where the replay tool has recorded library unload operations, and now wants to replay them.</para>
<para>Note that a replay system need not explicitly call this function to cause image unload callbacks at the end of process execution. Pin will generate those callbacks itself provided that images were created using the <ref refid="group__REPLAY_1ga07759b799516b378bd7f3faa0a0a8325" kindref="member">IMG_ReplayImageLoad</ref> call. However, this function is required to handle explicit image unloads (for instance those caused by <computeroutput>dlclose()</computeroutput> )</para>
<para>IMG_ReplayImageUnload can be called from analysis or callback routines. If called from an analysis routine, the Pin client lock must be claimed before calling IMG_ReplayImageUnload (the Pin client lock is already held when in a callback routine, so there is no need to claim it again).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>img</parametername>
</parameternamelist>
<parameterdescription>
<para>the IMG to be unloaded</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The pin client lock is obtained during the call of this API.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: Linux (others to follow)<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/pin_client_replay.PH" line="141" column="13" declfile="Source/pin/pin/pin_client_replay.PH" declline="141" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__REPLAY_1ga66fc4a31f4b1b0ac74fef23c08bf759d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL PIN_WasMemoryReservedInLoadTime</definition>
        <argsstring>()</argsstring>
        <name>PIN_WasMemoryReservedInLoadTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return TRUE if PIN was successfully reserved the neccessary memory at application load time (specified on the -reserve_memory knob), and was successfully restricted the memory from the loader (specified on the -restrict_memory knob). It is guaranteed this is the return value is FALSE then none the memory specified in the mentioned knobs was reserved/restricted</para>
<para><simplesect kind="return"><para>TRUE if all the memory was reserved/restricted</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT<linebreak/>
<bold>O/S</bold>: Linux<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/pin_client_replay.PH" line="157" column="13" declfile="Source/pin/pin/pin_client_replay.PH" declline="157" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
