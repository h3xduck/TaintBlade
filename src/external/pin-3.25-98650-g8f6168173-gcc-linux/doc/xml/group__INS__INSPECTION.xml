<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__INS__INSPECTION" kind="group">
    <compoundname>INS_INSPECTION</compoundname>
    <title>Inspection API for IA-32 and Intel(R) 64 instructions</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__INS__INSPECTION_1gaa0f5cf48b3b01ce2e18a76312cf5ebbd" prot="public" static="no" strong="no">
        <type></type>
        <name>PREDICATE</name>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbda7e1481ea9f8640824c67debe5da81253" prot="public">
          <name>PREDICATE_ALWAYS_TRUE</name>
          <briefdescription>
<para>Default predication on IA-32 and Intel(R) 64 architectures. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbda66af83fcb6f5fab6abe26a5b04d83203" prot="public">
          <name>PREDICATE_INVALID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbdae481604bc682f660cd96d45c95fbf541" prot="public">
          <name>PREDICATE_BELOW</name>
          <briefdescription>
<para>Below (CF==1) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbda1cd755066bf408356fb8fc32d61e8028" prot="public">
          <name>PREDICATE_BELOW_OR_EQUAL</name>
          <briefdescription>
<para>Below or Equal (CF==1 or ZF==1) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbda2b6e7cdf781ec2170815815dff531edd" prot="public">
          <name>PREDICATE_LESS</name>
          <briefdescription>
<para>Less (SF!=OF) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbdaf90b5f1b923d7cd99479059e4ef44add" prot="public">
          <name>PREDICATE_LESS_OR_EQUAL</name>
          <briefdescription>
<para>Less or Equal (ZF==1 or SF!=OF) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbdacbcad233874b6109daa00b55d85171fa" prot="public">
          <name>PREDICATE_NOT_BELOW</name>
          <briefdescription>
<para>Not Below (CF==0) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbda23b2d827875950b7040425fb0a305715" prot="public">
          <name>PREDICATE_NOT_BELOW_OR_EQUAL</name>
          <briefdescription>
<para>Above (CF==0 and ZF==0) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbdacb6e8e25dc96a0f93d59c23d8b5ac1dc" prot="public">
          <name>PREDICATE_NOT_LESS</name>
          <briefdescription>
<para>Greater or Equal (SF==OF) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbda752dda94b045552647b706d6a96b1eb1" prot="public">
          <name>PREDICATE_NOT_LESS_OR_EQUAL</name>
          <briefdescription>
<para>Greater (ZF==0 and SF==OF) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbdada1eedda919626c9b51b268619a329f2" prot="public">
          <name>PREDICATE_NOT_OVERFLOW</name>
          <briefdescription>
<para>Not Overflow (OF==0) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbdac0a8c6561a8983e0e2178c009330e2a2" prot="public">
          <name>PREDICATE_NOT_PARITY</name>
          <briefdescription>
<para>Not Parity (PF==0) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbda706783e8f9e34d7083d7aa84c0dbfccf" prot="public">
          <name>PREDICATE_NOT_SIGN</name>
          <briefdescription>
<para>Not Sign (SF==0) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbdad49e0b746316ca0be5408872c30020d1" prot="public">
          <name>PREDICATE_NOT_ZERO</name>
          <briefdescription>
<para>Not Zero (ZF==0) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbda06b3bd17f023d86b9725e02620c86372" prot="public">
          <name>PREDICATE_OVERFLOW</name>
          <briefdescription>
<para>Overflow (OF==1) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbda258c8b6217af698176f5c9404dca93bd" prot="public">
          <name>PREDICATE_PARITY</name>
          <briefdescription>
<para>Parity (PF==1) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbda1af450bb6f4d982568b26851b4fc7160" prot="public">
          <name>PREDICATE_SIGN</name>
          <briefdescription>
<para>Sign (SF==1) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbda3fbef07e5130ea58b82281b1790b00da" prot="public">
          <name>PREDICATE_ZERO</name>
          <briefdescription>
<para>Zero (ZF==1) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbdab01725a848b042ffec91e289aba07eed" prot="public">
          <name>PREDICATE_CX_NON_ZERO</name>
          <briefdescription>
<para>CX != 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbdaf819f6469d1f5df95a3986ada62aafd3" prot="public">
          <name>PREDICATE_ECX_NON_ZERO</name>
          <briefdescription>
<para>ECX != 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbda4600380331061ce93c1230ba8f1e8605" prot="public">
          <name>PREDICATE_RCX_NON_ZERO</name>
          <briefdescription>
<para>RCX != 0. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbda49026823fba6b564052314d23c62380b" prot="public">
          <name>PREDICATE_SAVED_GCX_NON_ZERO</name>
          <briefdescription>
<para>(Internal) Use the saved value of one of the previous three tests </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaa0f5cf48b3b01ce2e18a76312cf5ebbda645537727f3c2cda148c56a8c385d243" prot="public">
          <name>PREDICATE_LAST</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Predicate abstraction for IA-32 and Intel(R) 64 instructions. </para>
        </briefdescription>
        <detaileddescription>
<para>This file contains basic abstractions for IA32 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/base_ia32/base_ia32.PH" line="17" column="1" bodyfile="Source/pin/base_ia32/base_ia32.PH" bodystart="16" bodyend="47"/>
      </memberdef>
      <memberdef kind="enum" id="group__INS__INSPECTION_1ga849849b78d72c1dbc699d8de0862f99f" prot="public" static="no" strong="no">
        <type></type>
        <name>MEMORY_TYPE</name>
        <enumvalue id="group__INS__INSPECTION_1gga849849b78d72c1dbc699d8de0862f99fa8fbda158d617e51ebdb970e7105e0164" prot="public">
          <name>MEMORY_TYPE_READ</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1gga849849b78d72c1dbc699d8de0862f99fab663f9ff0d8e90b7f086b594a9fe4d92" prot="public">
          <name>MEMORY_TYPE_WRITE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1gga849849b78d72c1dbc699d8de0862f99faaafd99e1e823cd08f14271ec55e799e7" prot="public">
          <name>MEMORY_TYPE_READ2</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Memory type of argument </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core/ins.PH" line="22" column="1" bodyfile="Source/pin/core/ins.PH" bodystart="21" bodyend="26"/>
      </memberdef>
      <memberdef kind="enum" id="group__INS__INSPECTION_1gaf903f1f8ddcb9710d191943763e6474a" prot="public" static="no" strong="no">
        <type></type>
        <name>SYSCALL_STANDARD</name>
        <enumvalue id="group__INS__INSPECTION_1ggaf903f1f8ddcb9710d191943763e6474aa5db970f2d14d9d57fdce5d01abf23e2f" prot="public">
          <name>SYSCALL_STANDARD_INVALID</name>
          <briefdescription>
<para>Invalid value; the instruction is not a system call. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaf903f1f8ddcb9710d191943763e6474aa69930e50071ec752f31c32456bff58b2" prot="public">
          <name>SYSCALL_STANDARD_IA32_LINUX</name>
          <briefdescription>
<para>Linux system call on IA-32 architecture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaf903f1f8ddcb9710d191943763e6474aaafc5144a517a838cb36d5b2ccbcd3f29" prot="public">
          <name>SYSCALL_STANDARD_IA32_LINUX_SYSENTER</name>
          <briefdescription>
<para>Linux system call via &apos;sysenter&apos; on IA-32 architecture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaf903f1f8ddcb9710d191943763e6474aa05e78d10b4fd27077cf80a367dab1cd9" prot="public">
          <name>SYSCALL_STANDARD_IA32E_LINUX</name>
          <briefdescription>
<para>Linux system call on Intel(R) 64 architecture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaf903f1f8ddcb9710d191943763e6474aa35a2680a0748049a4af27ff712f1ab17" prot="public">
          <name>SYSCALL_STANDARD_IA32E_LINUX_VSYSCALL</name>
          <briefdescription>
<para>Linux virtual system call on Intel(R) 64 architecture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaf903f1f8ddcb9710d191943763e6474aa4563431ff4eb6c56dbd02a36eabd7ce7" prot="public">
          <name>SYSCALL_STANDARD_IA32_MAC</name>
          <briefdescription>
<para>macOS* system call in IA-32 architecture </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaf903f1f8ddcb9710d191943763e6474aa355377c83c5f82eccbfec209f8f0039c" prot="public">
          <name>SYSCALL_STANDARD_IA32E_MAC</name>
          <briefdescription>
<para>macOS* system call in Intel(R) 64 architecture </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaf903f1f8ddcb9710d191943763e6474aa5b3664fc9691e21bae092c595167400f" prot="public">
          <name>SYSCALL_STANDARD_IA32_WINDOWS_FAST</name>
          <briefdescription>
<para>&quot;Fast&quot; (SYSENTER) Windows system call in IA-32 architecture </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaf903f1f8ddcb9710d191943763e6474aaafbea58d993a4a04acedcc193ad40085" prot="public">
          <name>SYSCALL_STANDARD_IA32E_WINDOWS_FAST</name>
          <briefdescription>
<para>&quot;Fast&quot; (SYSCALL) Windows system call in Intel(R) 64 architecture </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaf903f1f8ddcb9710d191943763e6474aa0dddcc9510d9b6baed3073a57e255aee" prot="public">
          <name>SYSCALL_STANDARD_IA32_WINDOWS_ALT</name>
          <briefdescription>
<para>Alternative (INT2E) Windows system call in IA-32 architecture. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaf903f1f8ddcb9710d191943763e6474aac1f978ca25c3786a3c8b0a6b5eb85d3b" prot="public">
          <name>SYSCALL_STANDARD_WOW64</name>
          <briefdescription>
<para>System call in WOW64 (32 bit process in 64-bit Windows) </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__INS__INSPECTION_1ggaf903f1f8ddcb9710d191943763e6474aae5e8c050bc24d144b3dcd6bbb76aa3d5" prot="public">
          <name>SYSCALL_STANDARD_WINDOWS_INT</name>
          <briefdescription>
<para>Software interruption (INT n) in Windows. </para>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calling standard of the system call instruction. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core/ins.PH" line="32" column="1" bodyfile="Source/pin/core/ins.PH" bodystart="31" bodyend="45"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__INS__INSPECTION_1ga5da3b48943c5402e8abfe5876525529c" prot="public" static="no" mutable="no">
        <type>const UINT32</type>
        <definition>const UINT32 VSYSCALL_NR</definition>
        <argsstring></argsstring>
        <name>VSYSCALL_NR</name>
        <initializer>= 0xABCDDCBA</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This file contains INS primitives</para>
<para>system call number for function called from vsyscall </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core/ins.PH" line="16" column="14" bodyfile="Source/pin/core/ins.PH" bodystart="16" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__INS__INSPECTION_1gaec452037ed224616326f47e68456cf74" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_HasRealRep</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_HasRealRep</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>this file contains functions visible in level_core it uses primitives from level_core_with_ia32_ins but does not leak out any IA32 stuff!</para>
<para><simplesect kind="return"><para>whether the instruction has a real REP/REPZ/REPNZ prefix (i.e. one which is not just part of the opcode encoding but does cause the instruction to repeat). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="19" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="19" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gae682a5640e4fc234895c16dbc45d3266" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsStandardMemop</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsStandardMemop</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>false if this instruction has a memory operand which has unconventional meaning (e.g. vectorized memory reference of the GATHER/SCATTER instructions or some of the XSAVE instructions). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="26" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="26" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gafd61789fb5b6cc5f6bc5b92f73834529" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsCacheLineFlush</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsCacheLineFlush</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if instruction causes cache line flush </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="31" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="31" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga3d71d53c5043092d5dbc7c96a2c30b5b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INT32</type>
        <definition>INT32 INS_Category</definition>
        <argsstring>(const INS ins)</argsstring>
        <name>INS_Category</name>
        <param>
          <type>const INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The category of an instruction is a higher level semantic description of an instruction than its opcode (<ref refid="group__INS__INSPECTION_1ga016c475100a4665f5f8e8dfdbf518da5" kindref="member">INS_Opcode</ref>). So, for instance, you can test for a conditional branch by using INS_Category(ins) == XED_CATEGORY_COND_BR, whereas using INS_Opcode(ins) would require that you enumerate all twenty conditional branch opcodes.</para>
<para>The full mapping of opcodes to categories can be found in the idata.txt file in the Intel(R) X86 Encoder Decoder distribution (which is distributed as part of the Pin kit). The category enumeration can be found in the file &quot;xed-category-enum.h&quot;.</para>
<para>A category can be converted into a string by using <ref refid="group__INS__INSPECTION_1ga9aff372b50f9c5710ee2127d5f2cc90c" kindref="member">CATEGORY_StringShort</ref>.</para>
<para><simplesect kind="return"><para>Instruction category </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="47" column="14" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="47" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga263a91b2234b8650b858675450a72085" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INT32</type>
        <definition>INT32 INS_Extension</definition>
        <argsstring>(const INS ins)</argsstring>
        <name>INS_Extension</name>
        <param>
          <type>const INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Instruction extension, Use EXTENSION_StringShort to make it a string </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="52" column="14" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="52" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga4757e2b80c1f7d07cf2d3b12a71e4c0a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_EffectiveAddressWidth</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_EffectiveAddressWidth</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the width of the effective address in bits </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="58" column="15" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="58" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gad66ba6f0f0822848ddbf287e84f87df8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PIN_DEPRECATED_API USIZE</type>
        <definition>PIN_DEPRECATED_API USIZE INS_MemoryWriteSize</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_MemoryWriteSize</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size of the memory write in bytes (for REP prefixed instructions this is the size of the operand written on each iteration of the REP, so 1,2,4 or 8). </para>
</simplesect>
<simplesect kind="note"><para>DEPRECATED: see <ref refid="group__INS__INSPECTION_1gaa905931fcdcac481c789192e0bd30014" kindref="member">INS_MemoryOperandSize()</ref> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="65" column="33" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="65" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaeb34a54f477c20bcd3006e44d0798c0d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PIN_DEPRECATED_API USIZE</type>
        <definition>PIN_DEPRECATED_API USIZE INS_MemoryReadSize</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_MemoryReadSize</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the size of the memory read in bytes (for REP prefixed instructions this is the size of the operand read on each iteration of the REP, so 1,2,4 or 8). </para>
</simplesect>
<simplesect kind="note"><para>DEPRECATED: see <ref refid="group__INS__INSPECTION_1gaa905931fcdcac481c789192e0bd30014" kindref="member">INS_MemoryOperandSize()</ref> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="72" column="33" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="72" declcolumn="33"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gabc091ecbe538934b9ea83ce7882d1c31" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__INS__INSPECTION_1gaa0f5cf48b3b01ce2e18a76312cf5ebbd" kindref="member">PREDICATE</ref></type>
        <definition>PREDICATE INS_GetPredicate</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_GetPredicate</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>predicate for instruction (see <ref refid="group__INS__INSPECTION_1gaa0f5cf48b3b01ce2e18a76312cf5ebbd" kindref="member">PREDICATE</ref>)</para>
</simplesect>
CMOVcc and FMOVcc instructions are treated as predicated. Rep string ops are treated as predicated. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="80" column="18" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="80" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab1170badee8568aebff586fa7d131b37" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsMemoryRead</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsMemoryRead</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this instruction reads memory</para>
</simplesect>
<simplesect kind="note"><para>Segment prefix operands (i.e. gs:0x14 ) are memory operands. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="87" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="87" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga88783aed583f78262e7bbcbcaeb5fe09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsMemoryWrite</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsMemoryWrite</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this instruction writes memory</para>
</simplesect>
<simplesect kind="note"><para>Segment prefix operands (i.e. gs:0x14 ) are memory operands. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="94" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="94" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga6d0d259ec5db15fba1ee77f073ac6e33" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_HasMemoryRead2</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_HasMemoryRead2</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this instruction has 2 memory read operands </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="99" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="99" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga7602edb17e52e209492bab2c65fc1612" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_HasFallThrough</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_HasFallThrough</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If <ref refid="group__INS__INSPECTION_1ga7602edb17e52e209492bab2c65fc1612" kindref="member">INS_HasFallThrough(INS)</ref> is TRUE, then the instruction may execute the &quot;natural&quot; next instruction (i.e. the one which starts immediately after this one), if it is FALSE, then the instruction following the one tested will not (normally) be executed next. So HasFallThrough is TRUE for instructions which don&apos;t change the control flow (most instructions), or for conditional branches (which might change the control flow, but might not), and FALSE for unconditional branches and calls (where the next instruction to be executed is always explicitly specified).</para>
<para>Note that an unconditional branch or call to the next instruction still doesn&apos;t have a fall-through, since a fall through is the implicitly following instruction, and an unconditional branch never uses that.</para>
<para><simplesect kind="return"><para>true if the instruction type has a fallthrough path based on the opcode </para>
</simplesect>
<simplesect kind="note"><para>for system calls function returns false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="121" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="121" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaa769aebdca13544d020bf2a8ce12457e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsSysenter</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsSysenter</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the instruction is a SysEnter </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="126" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="126" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gadc9313292e087d5a37871013bbf4455d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsXbegin</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsXbegin</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the instruction is a Xbegin </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="131" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="131" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga5ea902b08b21cd0b9a25d6b497b71ecc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsXend</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsXend</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the instruction is a Xend </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="136" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="136" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga72a8648d1c8afbcb00081cf6767aa5e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsLea</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsLea</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if the instruction is Lea. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="141" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="141" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga8c2a537d225974e306deac478094e207" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsNop</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsNop</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if the instruction is a nop. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="146" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="146" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaf5f24968bc08823284ca34b5b05e02ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string OPCODE_StringShort</definition>
        <argsstring>(UINT32 opcode)</argsstring>
        <name>OPCODE_StringShort</name>
        <param>
          <type>UINT32</type>
          <declname>opcode</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String with the opcode of the instruction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="151" column="20" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="151" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gafcdc1ff2798f1bd76628c2de1487a284" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string INS_Mnemonic</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_Mnemonic</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Only use this function if you really want a printable version of the instruction&apos;s opcode.</para>
<para>If you are trying to test what the opcode of an instruction is, use <ref refid="group__INS__INSPECTION_1ga016c475100a4665f5f8e8dfdbf518da5" kindref="member">INS_Opcode</ref> and compare it with one of the XED_ICLASS values, or use one of the INS_Is... calls such as <ref refid="group__INS__INSPECTION_1gab6f52ff1102a22d51990f0122c108759" kindref="member">INS_IsMov</ref>, rather than using this function and comparing a string. Generating and comparing strings is much slower than comparing small integer values!</para>
<para><simplesect kind="return"><para>String form of mnemonic </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="163" column="20" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="163" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga7b9e0d9a23e7e7734ba7a7fbc7438e50" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsBranch</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsBranch</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ins is a branch instruction. A branch can be conditional or unconditional. </para>
</simplesect>
<simplesect kind="note"><para>In some cases branch instructions are actually system calls. In case ins is in practice a system call, the function returns false. For example, JMP_FAR in Windows IA-32 can be a system call under certain conditions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="172" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="172" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga1211486a7015b74165c5f49c56e786b7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsDirectBranch</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsDirectBranch</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>These are supposed to be near relative branches. <simplesect kind="return"><para>true if the target address is an offset from the instruction pointer or is an immediate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="179" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="179" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaf9585dfe3e965a348cd8f2bec5b33cd8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsDirectCall</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsDirectCall</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>These are supposed to be near relative branches. <simplesect kind="return"><para>true if the target address is an offset from the instruction pointer or is an immediate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="186" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="186" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga9645bebf4e0f7b32a7d7985a49a3a3f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PIN_DEPRECATED_API BOOL</type>
        <definition>PIN_DEPRECATED_API BOOL INS_IsDirectBranchOrCall</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsDirectBranchOrCall</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>These are supposed to be near relative branches. <simplesect kind="return"><para>true if the target address is an offset from the instruction pointer or is an immediate. </para>
</simplesect>
<simplesect kind="note"><para>DEPRECATED: see <ref refid="group__INS__INSPECTION_1gaac6f6422ce76cfbaad86c7f432f818ab" kindref="member">INS_IsDirectControlFlow()</ref> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="194" column="32" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="194" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaac6f6422ce76cfbaad86c7f432f818ab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsDirectControlFlow</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsDirectControlFlow</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if ins is a control-flow instruction, and its target address is an offset from the instruction pointer or is an immediate. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="200" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="200" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga8f770f9a1da3b0a924fb582ab92f4be7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsHalt</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsHalt</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the ins is a halt or reserved undefined (UD2) instruction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="205" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="205" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga17175054ff9f2ac0a213c4ab7bf023a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PIN_DEPRECATED_API BOOL</type>
        <definition>PIN_DEPRECATED_API BOOL INS_IsBranchOrCall</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsBranchOrCall</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if ins is a Branch or Call instruction, includes both direct and indirect instruction types.<linebreak/>
</para>
</simplesect>
<simplesect kind="note"><para>DEPRECATED: Use <ref refid="group__INS__INSPECTION_1gab13f78210172b7647bf5979b4e7f764f" kindref="member">INS_IsValidForIpointTakenBranch()</ref> instead to check if you can use IPOINT_TAKEN_BRANCH. Or use <ref refid="group__INS__INSPECTION_1ga308d89e7d9f39b8a0daf908778513457" kindref="member">INS_IsControlFlow()</ref> to check if instruction is a control flow. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="213" column="32" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="213" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga80ad206699f655a22e9a7cf46592dca5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_Stutters</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_Stutters</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ins &quot;stutters&quot;, so re-executes even though it is not a branch or call. REP prefixed string ops do this. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="219" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="219" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga54c2afb6ee9de26b18b8581d4d578f0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsPcMaterialization</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsPcMaterialization</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this is a call to the next instruction, which is an idiom for materializing the instruction pointer </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="225" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="225" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gabc3f11f960e327ff50cd4c0899fa42d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsCall</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsCall</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ins is a Call instruction. Note: In case ins is in practice a system call, the function returns false. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="231" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="231" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga308d89e7d9f39b8a0daf908778513457" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsControlFlow</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsControlFlow</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ins is a Control Flow instruction. </para>
</simplesect>
<simplesect kind="note"><para>In general, any Branch, Call or Ret is a control flow instruction. However, we exclude any instruction which in practice is a system call (e.g. FAR_JMP in Windows with IA32 is sometimes a syscall).<linebreak/>
In addition, note that it returns true for Xbegin and Xend instructions. Use this function to verify that an instruction is valid for instrumentation with <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451daa1b650f4229df434f3ac5ef61f14d0ed" kindref="member">IARG_BRANCH_TARGET_ADDR</ref>. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="240" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="240" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga3f681d101030540ee15712d23e89c5ea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsFarCall</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsFarCall</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ins is a Far Call instruction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="245" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="245" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gabe125bae2f10dc5a82bafb1cbd99ec03" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsFarJump</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsFarJump</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ins is a Far Jump instruction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="250" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="250" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga8b2917c493864644cd85597e4d85e79a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsDirectFarJump</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsDirectFarJump</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the target address is a direct far jump </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="255" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="255" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaef208009ec86a213f7574b65fe2603c0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsValidForIpointAfter</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsValidForIpointAfter</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if ins can be instrumented at location IPOINT_AFTER. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="260" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="260" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab13f78210172b7647bf5979b4e7f764f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsValidForIpointTakenBranch</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsValidForIpointTakenBranch</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if ins can be instrumented at location IPOINT_TAKEN_BRANCH. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="265" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="265" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga98f086d31ad53876afa5d3e98b0d0b52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsVgather</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsVgather</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE iff the ins is a VGATHER* instruction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="270" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="270" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaa361d3578e67bf041170c9580a4912ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsVscatter</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsVscatter</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE iff the ins is a VSCATTER* instruction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="275" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="275" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaac7bf03b0bd4f696a57f6beed7815896" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_HasMemoryVector</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_HasMemoryVector</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE iff the ins has a memory vector, i.e. the memory is accessed using a base address and an index vector with a scale. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="281" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="281" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gad1ade5b21d590fd2a53b6e98a835c553" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_HasScatteredMemoryAccess</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_HasScatteredMemoryAccess</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE iff the ins has scattered memory access. Scattered memory access means that the instruction does not access the memory as a single sequential block, but rather is scattered into multiple memory blocks. For exmaple, with the vscatter/vgather instructions, the index vector register is broken down to multiple index values that are used together with the base address, scale and displacement to access multiple blocks. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="292" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="292" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gac5503a690bc11074480b303c2ba5d04a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsAmx</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsAmx</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return TRUE iff the ins is an AMX instruction </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="297" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="297" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gad8f09aca94ec4149d51312f28bb15bb4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID</type>
        <definition>VOID INS_GetFarPointer</definition>
        <argsstring>(INS ins, UINT16 &amp;segment_selector, UINT32 &amp;displacement)</argsstring>
        <name>INS_GetFarPointer</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT16 &amp;</type>
          <declname>segment_selector</declname>
        </param>
        <param>
          <type>UINT32 &amp;</type>
          <declname>displacement</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the segment selector and displacement from a direct far jump. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="302" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="302" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga06ee153ecc802fb954da9a9afe39d868" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsProcedureCall</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsProcedureCall</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ins is a procedure call. This filters out call instructions that are (ab)used for other purposes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="308" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="308" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaa13314e8a43b158f580047ead78b72cd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsInterrupt</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsInterrupt</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return TRUE if the INS is an interrupt category instruction </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="313" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="313" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gae1bf4fca7d6060e4d6f2b12a3b5d06a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsRet</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsRet</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the given ins is a ret instruction. <simplesect kind="note"><para>This function will return true for iret instructions as well. </para>
</simplesect>
<simplesect kind="note"><para>See also <ref refid="group__INS__INSPECTION_1ga4ca6657c4f2a1dd2aec83c7bea228f3d" kindref="member">INS_IsIRet</ref>. </para>
</simplesect>
<simplesect kind="return"><para>true if the instruction is ret or iret. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="321" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="321" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaeafeb11038db885475c9acd01d28fe85" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsSysret</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsSysret</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ins is a System Return instruction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="326" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="326" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga096d2054bf6155352c96ffdb685a93d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsFarRet</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsFarRet</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ins is a far ret instruction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="331" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="331" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga8f601e4e60712eb4bf2df0ee58c8afd0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsPrefetch</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsPrefetch</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this instruction is a prefetch </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="336" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="336" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gac2a95e056295b1da4cdb9964aa591112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsSub</definition>
        <argsstring>(const INS ins)</argsstring>
        <name>INS_IsSub</name>
        <param>
          <type>const INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns true if this instruction is a subtract. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="341" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="341" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab6f52ff1102a22d51990f0122c108759" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsMov</definition>
        <argsstring>(const INS ins)</argsstring>
        <name>INS_IsMov</name>
        <param>
          <type>const INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns true if this instruction is a move. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="346" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="346" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaafabdd0df85dd9b153c7ff98a6762a4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsMovdir64b</definition>
        <argsstring>(const INS ins)</argsstring>
        <name>INS_IsMovdir64b</name>
        <param>
          <type>const INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns true if this instruction is movdir64. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="351" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="351" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga15e022f900d0831f350aa65928e27ea1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsMovFullRegRegSame</definition>
        <argsstring>(const INS ins)</argsstring>
        <name>INS_IsMovFullRegRegSame</name>
        <param>
          <type>const INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns true if this instruction is a mov reg1, reg1. And reg1 is a full reg </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="356" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="356" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaa517ca64b89debd7e4e1f39132edd0af" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsAtomicUpdate</definition>
        <argsstring>(const INS ins)</argsstring>
        <name>INS_IsAtomicUpdate</name>
        <param>
          <type>const INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this instruction performs an atomic update of memory. </para>
</simplesect>
<simplesect kind="note"><para>An XCHG instruction accessing memory is atomic with or without a LOCK prefix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="362" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="362" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga527fcdaa01b21e9def864cc83d4648ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsRDTSC</definition>
        <argsstring>(const INS ins)</argsstring>
        <name>INS_IsRDTSC</name>
        <param>
          <type>const INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this instruction is an rdtsc or rdtscp. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="367" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="367" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gac5aca7e74c0603e20a742f0980b7cda3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsMaskMov</definition>
        <argsstring>(const INS ins)</argsstring>
        <name>INS_IsMaskMov</name>
        <param>
          <type>const INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this instruction is a maskmovq or maskmovdqu. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="372" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="372" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga32d37a0dcd2f199ed5165f5ff90edf25" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
        <definition>REG INS_RepCountRegister</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_RepCountRegister</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>register used as the repeat counter by this REP prefixed instruction, or <ref refid="group__REG_1gadc4695959b1508fbcf668927ab92ef18" kindref="member">REG_INVALID()</ref> if the instruction does not have a real REP prefix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="378" column="12" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="378" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gad02da07511bf7980f121828324c93a52" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PIN_DEPRECATED_API BOOL</type>
        <definition>PIN_DEPRECATED_API BOOL INS_IsIndirectBranchOrCall</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsIndirectBranchOrCall</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the branch target comes from a register or memory. result is valid only if <ref refid="group__INS__INSPECTION_1ga308d89e7d9f39b8a0daf908778513457" kindref="member">INS_IsControlFlow()</ref> is true. </para>
</simplesect>
<simplesect kind="note"><para>DEPRECATED: see <ref refid="group__INS__INSPECTION_1ga13dea1531859ee5759d376a9e5617918" kindref="member">INS_IsIndirectControlFlow()</ref> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="385" column="32" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="385" declcolumn="32"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga13dea1531859ee5759d376a9e5617918" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsIndirectControlFlow</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsIndirectControlFlow</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ins is a control-flow instruction, and its target address is provided through memory or through a register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="391" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="391" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gae044036c57a49ff5c29d6994445bade8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
        <definition>REG INS_SegmentRegPrefix</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_SegmentRegPrefix</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Segment overide prefix used by INS </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="396" column="12" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="396" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaa682a21a59a07397feac5a7107b7c7e7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_HasExplicitMemoryReference</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_HasExplicitMemoryReference</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Test if this instruction has an explict memory operand. We include the memory operand in lea.</para>
<para><simplesect kind="return"><para>TRUE if the instruction is has an explicit memory operand </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="404" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="404" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaf25e644f3d8ee4907ea96e60b759b828" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID</type>
        <definition>VOID PIN_SetSyntaxIntel</definition>
        <argsstring>()</argsstring>
        <name>PIN_SetSyntaxIntel</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the disassembly syntax to Intel format. (Destination on the left) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="409" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="409" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gacb29bf88df0b86e5bed6f7f1c6d4219d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID</type>
        <definition>VOID PIN_SetSyntaxATT</definition>
        <argsstring>()</argsstring>
        <name>PIN_SetSyntaxATT</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the disassembly syntax to ATT SYSV format. (Destination on the right) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="414" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="414" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga568a93b99e9e70be947fb428cc0c6f9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID</type>
        <definition>VOID PIN_SetSyntaxXED</definition>
        <argsstring>()</argsstring>
        <name>PIN_SetSyntaxXED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Sets the disassembly syntax to Intel(R) X86 Encoder Decoder detailed format which lists all resources read and written. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="419" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="419" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga484023161d148e5b68a0efb19346421d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
        <definition>REG INS_RegR</definition>
        <argsstring>(INS x, UINT32 k)</argsstring>
        <name>INS_RegR</name>
        <param>
          <type>INS</type>
          <declname>x</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>kth read register of instruction x, including implicit reads (e.g. stack pointer is read by push on IA-32 architectures) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="425" column="12" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="425" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gacd975d0a7a75984d4f32349ef0ed7747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
        <definition>REG INS_RegW</definition>
        <argsstring>(INS x, UINT32 k)</argsstring>
        <name>INS_RegW</name>
        <param>
          <type>INS</type>
          <declname>x</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>k</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>kth write register of instruction x, including implicit writes (e.g. stack pointer is written by push on IA-32 architectures) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="431" column="12" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="431" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga016c475100a4665f5f8e8dfdbf518da5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>OPCODE</type>
        <definition>OPCODE INS_Opcode</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_Opcode</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>On ia-32 and Intel64 the opcodes are constants of the form XED_ICLASS_name. The full list of valid opcodes can be found in the idata.txt file in the Intel(R) X86 Encoder Decoder distribution (which is distributed as part of the Pin kit), and the enum definitions are in the file &quot;xed-iclass-enum.h&quot;.</para>
<para>Use <ref refid="group__INS__INSPECTION_1gafcdc1ff2798f1bd76628c2de1487a284" kindref="member">INS_Mnemonic</ref> if you want a string.</para>
<para><simplesect kind="return"><para>Opcode of instruction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="443" column="15" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="443" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga9aff372b50f9c5710ee2127d5f2cc90c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string CATEGORY_StringShort</definition>
        <argsstring>(UINT32 num)</argsstring>
        <name>CATEGORY_StringShort</name>
        <param>
          <type>UINT32</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String form of category </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="448" column="20" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="448" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaa4bb9e749f4a4c80215f29c116a7e279" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string EXTENSION_StringShort</definition>
        <argsstring>(UINT32 num)</argsstring>
        <name>EXTENSION_StringShort</name>
        <param>
          <type>UINT32</type>
          <declname>num</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>String form of ISA extension </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="453" column="20" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="453" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaa06399e42f72b6906c94df623a23fa0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_SegPrefixIsMemoryRead</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_SegPrefixIsMemoryRead</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this Seg prefixed instruction reads memory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="458" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="458" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga700b74c8ab57f909f1e2c2d1094fc6b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_SegPrefixIsMemoryWrite</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_SegPrefixIsMemoryWrite</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this Seg prefixed instruction writes to memory </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="463" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="463" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga08c8427ca46f8776050a64ce28544725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_AddressSizePrefix</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_AddressSizePrefix</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the instruction has an address size prefix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="468" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="468" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga6a95871422336f9f56751ae8f9d502f6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_BranchNotTakenPrefix</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_BranchNotTakenPrefix</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the instruction has an branch not taken hint prefix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="473" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="473" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga2e4e0575a9639c8ca07e447038c00cbe" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_BranchTakenPrefix</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_BranchTakenPrefix</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the instruction has an branch taken hint prefix </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="478" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="478" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaedec63f23d754647667cd714c8001af3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_LockPrefix</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_LockPrefix</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the instruction has a lock prefix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="483" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="483" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga0e4cbbd8fe8eb79b6629f8150a16571a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandSizePrefix</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_OperandSizePrefix</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the instruction has an operand size prefix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="488" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="488" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gacd76a6f0a537b66f5fb08d871561c180" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_RepPrefix</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_RepPrefix</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the instruction has an REP (0xF3) prefix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="493" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="493" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gad3b2ca2ecd0f47029a3dbd5767e698f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_RepnePrefix</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_RepnePrefix</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the instruction has an REPNE (0xF2) prefix. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="498" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="498" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga0c255e9311ec629c0fd4f0aa53e2a166" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_SegmentPrefix</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_SegmentPrefix</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the instruction has a segment prefix; Call <ref refid="group__INS__INSPECTION_1gae044036c57a49ff5c29d6994445bade8" kindref="member">INS_SegmentRegPrefix()</ref> to get the actual prefix register name. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="504" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="504" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga6da2eb08991e003c2bf7344100278ffd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsXchg</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsXchg</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the instruction is an &quot;xchg&quot; </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="509" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="509" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga5d5c26ac8a093cb3ea326ce1f91e21c5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsStringop</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsStringop</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if the instruction is a string op (can be REP prefixed). </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="514" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="514" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga4ca6657c4f2a1dd2aec83c7bea228f3d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsIRet</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsIRet</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true iff the given ins is an iret instruction. <simplesect kind="note"><para>See also <ref refid="group__INS__INSPECTION_1gae1bf4fca7d6060e4d6f2b12a3b5d06a4" kindref="member">INS_IsRet</ref>. </para>
</simplesect>
<simplesect kind="return"><para>true if the instruction is an iret. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_api_xed_ia32.PH" line="521" column="13" declfile="Source/pin/core_ia32/ins_api_xed_ia32.PH" declline="521" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaca49479dff7386abb7da962d45aa716b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_MaxNumRRegs</definition>
        <argsstring>(INS x)</argsstring>
        <name>INS_MaxNumRRegs</name>
        <param>
          <type>INS</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ELF specific stuff related to INS</para>
<para><simplesect kind="return"><para>Maximum number of read operands </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_ia32.PH" line="17" column="15" declfile="Source/pin/core_ia32/ins_ia32.PH" declline="17" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga82aeda45eb9634fceb3e12e70839de34" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_MaxNumWRegs</definition>
        <argsstring>(INS x)</argsstring>
        <name>INS_MaxNumWRegs</name>
        <param>
          <type>INS</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Maximum number of write operands </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_ia32.PH" line="22" column="15" declfile="Source/pin/core_ia32/ins_ia32.PH" declline="22" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga21c9b5ea337536bc28a6d1cfb985c639" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_RegRContain</definition>
        <argsstring>(const INS ins, const REG reg)</argsstring>
        <name>INS_RegRContain</name>
        <param>
          <type>const INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>const <ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ins uses reg as a read operand </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_ia32.PH" line="27" column="13" declfile="Source/pin/core_ia32/ins_ia32.PH" declline="27" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab319902e019d907d773a1c6799d4ea32" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_RegWContain</definition>
        <argsstring>(const INS ins, const REG reg)</argsstring>
        <name>INS_RegWContain</name>
        <param>
          <type>const INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>const <ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ins uses reg as a write operand </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_ia32.PH" line="32" column="13" declfile="Source/pin/core_ia32/ins_ia32.PH" declline="32" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaae788ba063300f59ab21fc67c4129250" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_FullRegRContain</definition>
        <argsstring>(const INS ins, const REG reg)</argsstring>
        <name>INS_FullRegRContain</name>
        <param>
          <type>const INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>const <ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ins uses reg as a read operand </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_ia32.PH" line="37" column="13" declfile="Source/pin/core_ia32/ins_ia32.PH" declline="37" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga3ba87ee35e6c55f0a18bc57a4a2f2765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_FullRegWContain</definition>
        <argsstring>(const INS ins, const REG reg)</argsstring>
        <name>INS_FullRegWContain</name>
        <param>
          <type>const INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>const <ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if ins uses reg as a write operand </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_ia32.PH" line="42" column="13" declfile="Source/pin/core_ia32/ins_ia32.PH" declline="42" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab4bcc02676e0ae2a108e24ae1e4b6ecf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsStackRead</definition>
        <argsstring>(const INS ins)</argsstring>
        <name>INS_IsStackRead</name>
        <param>
          <type>const INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Access to the stack simply means that the instruction accesses memory relative to the stack pointer (ESP or RSP), or the frame pointer (EBP or RBP). In code compiled without a frame pointer (where EBP/RBP is used as a general register), this may give a misleading result.</para>
<para><simplesect kind="return"><para>TRUE if ins is a read from the stack </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_ia32.PH" line="52" column="13" declfile="Source/pin/core_ia32/ins_ia32.PH" declline="52" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga5a3cbd97d1e9feec3459c8630a401cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsStackWrite</definition>
        <argsstring>(const INS ins)</argsstring>
        <name>INS_IsStackWrite</name>
        <param>
          <type>const INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Detection of stack accesses is done in the same way as for <ref refid="group__INS__INSPECTION_1gab4bcc02676e0ae2a108e24ae1e4b6ecf" kindref="member">INS_IsStackRead</ref>, so the same caveats apply here too.</para>
<para><simplesect kind="return"><para>TRUE if ins is a write to the stack </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_ia32.PH" line="60" column="13" declfile="Source/pin/core_ia32/ins_ia32.PH" declline="60" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga52fb144aef5a1962cd6050b0dd9e872b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsIpRelRead</definition>
        <argsstring>(const INS ins)</argsstring>
        <name>INS_IsIpRelRead</name>
        <param>
          <type>const INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is an IP-relative read </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_ia32.PH" line="65" column="13" declfile="Source/pin/core_ia32/ins_ia32.PH" declline="65" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga2e46a2329a9ec52511fc3c0e6f97e354" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsIpRelWrite</definition>
        <argsstring>(const INS ins)</argsstring>
        <name>INS_IsIpRelWrite</name>
        <param>
          <type>const INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Is an IP-relative write </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_ia32.PH" line="70" column="13" declfile="Source/pin/core_ia32/ins_ia32.PH" declline="70" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga1cfa7fb07799f93822756da2359d0f98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsPredicated</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsPredicated</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>We treat these instructions as predicated conditional move (CMOVcc) floating conditional move (FCMOVcc) rep string ops (since they don&apos;t execute if GCX==0) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_ia32.PH" line="78" column="13" declfile="Source/pin/core_ia32/ins_ia32.PH" declline="78" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga7cf9a2c0cd1041fcb8d672bf2fe89859" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsOriginal</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsOriginal</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this is an original instruction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_ia32.PH" line="83" column="13" declfile="Source/pin/core_ia32/ins_ia32.PH" declline="83" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga7158e5bde981e182f3163f1cad673caf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string INS_Disassemble</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_Disassemble</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>std::string disassembly of instruction </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_ia32.PH" line="88" column="20" declfile="Source/pin/core_ia32/ins_ia32.PH" declline="88" declcolumn="20"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gad63a5e54b1ba36a4450b484e6a151117" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRDELTA</type>
        <definition>ADDRDELTA INS_MemoryDisplacement</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_MemoryDisplacement</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The memory displacement of an instrucation with memory operand. </para>
</simplesect>
<simplesect kind="note"><para>: the displacement is a signed number. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_ia32.PH" line="94" column="18" declfile="Source/pin/core_ia32/ins_ia32.PH" declline="94" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga28ea7c27eff42264de45ee427531fc1c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
        <definition>REG INS_MemoryBaseReg</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_MemoryBaseReg</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The base register used in the instruction&apos;s memory operand, or <ref refid="group__REG_1gadc4695959b1508fbcf668927ab92ef18" kindref="member">REG_INVALID()</ref> if there is no base register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_ia32.PH" line="100" column="12" declfile="Source/pin/core_ia32/ins_ia32.PH" declline="100" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga5b04a25a5e366081e919a661474e6f5f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
        <definition>REG INS_MemoryIndexReg</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_MemoryIndexReg</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The index register used in the instruction&apos;s memory operand, or <ref refid="group__REG_1gadc4695959b1508fbcf668927ab92ef18" kindref="member">REG_INVALID()</ref> if there is no index register. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_ia32.PH" line="106" column="12" declfile="Source/pin/core_ia32/ins_ia32.PH" declline="106" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga9bc15536ae05615d31335e4dacd76130" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_MemoryScale</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_MemoryScale</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The scale factor (1,2,4,8) by which the index register in the instruction&apos;s memory operand is multiplied. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_ia32.PH" line="112" column="15" declfile="Source/pin/core_ia32/ins_ia32.PH" declline="112" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga835a4c186436ac7a9c252da16b2a8bc2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_ChangeReg</definition>
        <argsstring>(const INS ins, const REG old_reg, const REG new_reg, const BOOL as_read)</argsstring>
        <name>INS_ChangeReg</name>
        <param>
          <type>const INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>const <ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
          <declname>old_reg</declname>
        </param>
        <param>
          <type>const <ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
          <declname>new_reg</declname>
        </param>
        <param>
          <type>const BOOL</type>
          <declname>as_read</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Change all occurrences of old_reg to new_reg in the r/w sets of the ins. Return TRUE if at least one occurrence changed. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_ia32.PH" line="118" column="13" declfile="Source/pin/core_ia32/ins_ia32.PH" declline="118" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga14e917d264aacc2b8e7e95963f768ccc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>xed_decoded_inst_t *</type>
        <definition>xed_decoded_inst_t* INS_XedDec</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_XedDec</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Intel(R) X86 Encoder Decoder low-level support routines.</para>
<para>This supports the other core_ia32 files and is the lowest level interface to Intel(R) XED encoding/decoding.</para>
<para><simplesect kind="return"><para>This provides the pointer to the decoded Intel(R) X86 Encoder Decoder instruction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_xed_ia32.PH" line="19" column="27" declfile="Source/pin/core_ia32/ins_xed_ia32.PH" declline="19" declcolumn="27"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga1ec5f46a0bd404ae2d9e04823f79072c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
        <definition>REG INS_XedExactMapToPinReg</definition>
        <argsstring>(xed_reg_enum_t xed_reg)</argsstring>
        <name>INS_XedExactMapToPinReg</name>
        <param>
          <type>xed_reg_enum_t</type>
          <declname>xed_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Intel(R) X86 Encoder Decoder xed_reg_enum_t register to a Pin REG type. <simplesect kind="return"><para>a valid pin register, but never an invalid one. Asserts if there is no exact map. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_xed_ia32.PH" line="25" column="12" declfile="Source/pin/core_ia32/ins_xed_ia32.PH" declline="25" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga37648c4d7d964df9973969c497f7eb90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PIN_DEPRECATED_API <ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
        <definition>PIN_DEPRECATED_API REG INS_XedExactMapToPinReg</definition>
        <argsstring>(unsigned int r)</argsstring>
        <name>INS_XedExactMapToPinReg</name>
        <param>
          <type>unsigned int</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a Intel(R) X86 Encoder Decoder xed_reg_enum_t register to a Pin REG type. <simplesect kind="return"><para>a valid pin register, but never an invalid one. Asserts if there is no exact map. </para>
</simplesect>
<simplesect kind="note"><para>DEPRECATED: Use <ref refid="group__INS__INSPECTION_1ga1ec5f46a0bd404ae2d9e04823f79072c" kindref="member">INS_XedExactMapToPinReg(xed_reg_enum_t xed_reg)</ref> instead </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_xed_ia32.PH" line="32" column="31" declfile="Source/pin/core_ia32/ins_xed_ia32.PH" declline="32" declcolumn="31"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaeddde4b64a0009640facf6482bed4850" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>xed_reg_enum_t</type>
        <definition>xed_reg_enum_t INS_XedExactMapFromPinReg</definition>
        <argsstring>(REG pin_reg)</argsstring>
        <name>INS_XedExactMapFromPinReg</name>
        <param>
          <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
          <declname>pin_reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert Pin REG type (application register) to an Intel(R) X86 Encoder Decoder xed_reg_enum_t register. <simplesect kind="return"><para>xed reg mapping to pin reg. if no map returns XED_REG_INVALID </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/ins_xed_ia32.PH" line="39" column="23" declfile="Source/pin/core_ia32/ins_xed_ia32.PH" declline="39" declcolumn="23"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga68a9e9a74a8028c7563375be7c230f3a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_OperandCount</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_OperandCount</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>ia32 specific stuff related to OPERAND</para>
<para>Tells the number of operands for the instruction. Several other APIs take an operand index as a parameter. Those APIs expect an index in the range [0, n-1], where n is the value returned by <ref refid="group__INS__INSPECTION_1ga68a9e9a74a8028c7563375be7c230f3a" kindref="member">INS_OperandCount()</ref>.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The number of operands for the instruction. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="22" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="22" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga3390b29d8191050119050c038f9dce8a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_OperandElementCount</definition>
        <argsstring>(INS ins, UINT32 opIdx)</argsstring>
        <name>INS_OperandElementCount</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>opIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">opIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>The operand index whose element count is required. The operand can be either a memory operand or a register operand. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the number of elements in the requested operand. For AMX instructions, this function will return 0 since the number is elements is not known at instrumentation time. See <ref refid="group__INS__INSPECTION_1ga75ca91e0ea573688572123db944fcda3" kindref="member">INS_OperandHasElements</ref>. Returns 1 if this operand has no elements. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="33" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="33" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga75ca91e0ea573688572123db944fcda3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandHasElements</definition>
        <argsstring>(INS ins, UINT32 opIdx)</argsstring>
        <name>INS_OperandHasElements</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>opIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">opIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>The operand index. The operand can be either a memory operand or a register operand. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the requested operand has elements, FALSE otherwise. For all instructions except AMX, this function will return TRUE when the value returned by INS_OperandElementCount is greater than 1. AMX is a special case because the number of elements is determined dynamically by both the encoded instruction and the tile configuration metadata (which is set dynamically with LDTILECFG). Therefore <ref refid="group__INS__INSPECTION_1ga3390b29d8191050119050c038f9dce8a" kindref="member">INS_OperandElementCount()</ref> cannot return its value at instrumentation time. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="46" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="46" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga1150b9fcd86aaf0807683412b909f22a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USIZE</type>
        <definition>USIZE INS_OperandElementSize</definition>
        <argsstring>(INS ins, UINT32 opIdx)</argsstring>
        <name>INS_OperandElementSize</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>opIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">opIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>The operand index whose element size is required. The operand can be either a memory operand or a register operand. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the size of the requested operand element in bytes. For scalar instructions, this function will return the same as INS_OperandSize. For vector instructions, this function will return the size of a single element. For vscatter/vgather, this function will return the size of a single load/store. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="57" column="14" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="57" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga210efa4d05fce960cf32656d10df6baf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_OperandNameId</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandNameId</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="61" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="61" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga742593b20994f62aaaa841794b97dba4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandIsMemory</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandIsMemory</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this operand is a memory reference</para>
</simplesect>
Note: this does not include LEA operands. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="68" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="68" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gae726545c04460e7696bb284df320f4f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
        <definition>REG INS_OperandMemoryBaseReg</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandMemoryBaseReg</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>register used as base register in memory operand, or <ref refid="group__REG_1gadc4695959b1508fbcf668927ab92ef18" kindref="member">REG_INVALID()</ref> Effective address = Displacement + BaseReg + IndexReg * Scale </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="74" column="12" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="74" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaaa9a52ca96e3cc0bc5150fa9e7f87c0e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
        <definition>REG INS_OperandMemoryIndexReg</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandMemoryIndexReg</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>register used as index register in memory operand, or <ref refid="group__REG_1gadc4695959b1508fbcf668927ab92ef18" kindref="member">REG_INVALID()</ref> Effective address = Displacement + BaseReg + IndexReg * Scale </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="80" column="12" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="80" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab55682e63100b3ebc5326237ad83c171" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
        <definition>REG INS_OperandMemorySegmentReg</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandMemorySegmentReg</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>register used as segment register in memory operand, or <ref refid="group__REG_1gadc4695959b1508fbcf668927ab92ef18" kindref="member">REG_INVALID()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="85" column="12" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="85" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga8a20d2d4be126df6469a5161f97eca6c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_OperandMemoryScale</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandMemoryScale</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>scale used for addressing in memory operand. Effective address = Displacement + BaseReg + IndexReg * Scale </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="91" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="91" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab15523f2c2dc93599a8f59dd61057973" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRDELTA</type>
        <definition>ADDRDELTA INS_OperandMemoryDisplacement</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandMemoryDisplacement</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The memory displacement of an instrucation with memory operand. </para>
</simplesect>
<simplesect kind="note"><para>the displacement is a signed number. Effective address = Displacement + BaseReg + IndexReg * Scale </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="98" column="18" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="98" declcolumn="18"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga1c5fa1253299975b9038e2f839f137b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandIsFixedMemop</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandIsFixedMemop</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if memory operand uses predefined base register and this register can not be changed Example: movs ds:(esi), es:(edi) There are two fixed operands </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="106" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="106" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab02e5d35eda9ffcb9a208120d932b4de" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID</type>
        <definition>VOID GetNumberAndSizeOfMemAccesses</definition>
        <argsstring>(INS ins, int *numAccesses, int *accessSize, int *indexSize)</argsstring>
        <name>GetNumberAndSizeOfMemAccesses</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>numAccesses</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>accessSize</declname>
        </param>
        <param>
          <type>int *</type>
          <declname>indexSize</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="110" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="110" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaa01f153aa19aeb478458cf2042d05a01" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_MemoryOperandCount</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_MemoryOperandCount</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of memory operands. Please note <ref refid="group__INS__INSPECTION_1ga48e9034dc81f2a2e5f1a61ec4c68b497" kindref="member">INS_MemoryOperandElementCount</ref> for reading the number of elements per memory operand.</para>
</simplesect>
<simplesect kind="note"><para>Segment prefix operands (i.e. gs:0x14 ) are memory operands. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="119" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="119" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga48e9034dc81f2a2e5f1a61ec4c68b497" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_MemoryOperandElementCount</definition>
        <argsstring>(INS ins, UINT32 memoryOp)</argsstring>
        <name>INS_MemoryOperandElementCount</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>memoryOp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the number of elements in the requested memory operand. For instructions where the memory operands has not elemenets, returns 1. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="125" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="125" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaa905931fcdcac481c789192e0bd30014" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USIZE</type>
        <definition>USIZE INS_MemoryOperandSize</definition>
        <argsstring>(INS ins, UINT32 memoryOp)</argsstring>
        <name>INS_MemoryOperandSize</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>memoryOp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>the instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">memoryOp</parametername>
</parameternamelist>
<parameterdescription>
<para>the memory operand index whose size is required.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the size of the requested memory operand in bytes (for REPped instructions this is the size accessed in each iteration of the implicit loop). The operand of instructions with scattered memory access (like vscatter/vgather) does not have a size, and this function should not be called for these functions. Use INS_HasScatteredMemoryAccess before calling this function. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="137" column="14" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="137" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gafa78b79577f4cdf4ca898b13e324d4f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USIZE</type>
        <definition>USIZE INS_MemoryOperandElementSize</definition>
        <argsstring>(INS ins, UINT32 memoryOp)</argsstring>
        <name>INS_MemoryOperandElementSize</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>memoryOp</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>the instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">memoryOp</parametername>
</parameternamelist>
<parameterdescription>
<para>the memory operand index whose element size is required.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>the size of the requested memory operand element in bytes. For scalar instructions, this function will return the same as INS_MemoryOperandSize. For vector instructions, this function will return the size of a single element. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="147" column="14" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="147" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gac610cf9dbd53deeba31c2277006d70fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandIsAddressGenerator</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandIsAddressGenerator</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this operand generates an address, but the address does not access memory (e.g. load effective address instruction) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="153" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="153" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab2869fa6158976e73fa91fb5a19ad054" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandIsBranchDisplacement</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandIsBranchDisplacement</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this operand is a displacement (e.g. branch offset) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="159" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="159" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga2db1205b7749b176d9145d911bad461c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_MemoryOperandIsRead</definition>
        <argsstring>(INS ins, UINT32 memopIdx)</argsstring>
        <name>INS_MemoryOperandIsRead</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>memopIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if memory operand memopIdx is read </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="164" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="164" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab66a50260dde64035e46a831f5d4b1dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_MemoryOperandIsWritten</definition>
        <argsstring>(INS ins, UINT32 memopIdx)</argsstring>
        <name>INS_MemoryOperandIsWritten</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>memopIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>TRUE if memory operand memopIdx is written </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="169" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="169" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga67a5b6c52c0cae6256557d4bc8729ab8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_MemoryOperandIndexToOperandIndex</definition>
        <argsstring>(INS ins, UINT32 memopIdx)</argsstring>
        <name>INS_MemoryOperandIndexToOperandIndex</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>memopIdx</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Convert a memory operand index into a simple operand index.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">memopIdx</parametername>
</parameternamelist>
<parameterdescription>
<para>Memory operand&apos;s index in the range [0, n-1], where n is from <ref refid="group__INS__INSPECTION_1gaa01f153aa19aeb478458cf2042d05a01" kindref="member">INS_MemoryOperandCount()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>operand index </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="180" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="180" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gae860ce689d370e278440310b882d0440" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandIsReg</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandIsReg</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this operand is a register </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="185" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="185" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaf1084ae5fd648934ffe2b4b12b1df935" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandIsSegmentReg</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandIsSegmentReg</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this operand is a segment register </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="190" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="190" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga4b3136c05e383bea3f91a5204b87a570" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
        <definition>REG INS_OperandReg</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandReg</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>register name for this operand, may return <ref refid="group__REG_1gadc4695959b1508fbcf668927ab92ef18" kindref="member">REG_INVALID()</ref> </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="195" column="12" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="195" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga43b03561626b62fd27a0e699692fde04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandIsImmediate</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandIsImmediate</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this operand is an immediate </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="200" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="200" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab53dc2b4142ff9f104cf4a9c4d952845" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT64</type>
        <definition>UINT64 INS_OperandImmediate</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandImmediate</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Although return type is UINT64, on 32-bit systems only the lower 32 bits are utilized. To see how to retrieve immediate values with correct width and sign information, see example in test tool PinTools/SimpleExamples/oper-imm.cpp. <simplesect kind="return"><para>immediate value for operand </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="209" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="209" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab022da45d7331aae8b2642a9e8ddbe4c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandIsImplicit</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandIsImplicit</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>true if this operand is implied by the opcode (e.g. the stack write in a push instruction) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="215" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="215" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga990a23fc02e9bd79b95a3e9360a1bf87" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_RegIsImplicit</definition>
        <argsstring>(INS ins, REG reg)</argsstring>
        <name>INS_RegIsImplicit</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
          <declname>reg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Assumes that reg is a PIN register <simplesect kind="return"><para>true if the ins has </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="221" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="221" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga4fc45dd076d7de4fb42ee273d0fb2ae8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_OperandWidth</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandWidth</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>operand width in bits. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="226" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="226" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaf95b32d966c70948bc2bd73226909869" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>UINT32</type>
        <definition>UINT32 INS_OperandSize</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandSize</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This function will generate an error for memory operands in instructions where <ref refid="group__INS__INSPECTION_1gad1ade5b21d590fd2a53b6e98a835c553" kindref="member">INS_HasScatteredMemoryAccess</ref> returns TRUE. <linebreak/>
<simplesect kind="return"><para>operand size in bytes. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="232" column="15" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="232" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga9233f304c34ac2a24c39345eb31e7b15" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandRead</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandRead</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells if an instruction operand is a source; it may also be a destination.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Operand&apos;s index in the range [0, n-1], where n is from <ref refid="group__INS__INSPECTION_1ga68a9e9a74a8028c7563375be7c230f3a" kindref="member">INS_OperandCount()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the operand is a source. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="243" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="243" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga5f878705486eb595557cf1af0f7be562" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandWritten</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandWritten</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells if an instruction operand is a destination; it may also be a source.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Operand&apos;s index in the range [0, n-1], where n is from <ref refid="group__INS__INSPECTION_1ga68a9e9a74a8028c7563375be7c230f3a" kindref="member">INS_OperandCount()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the operand is a destination. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="254" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="254" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga717be313a730cb54502d0e01a5529eea" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandReadOnly</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandReadOnly</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells if an instruction operand is just a source (and not a destination).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Operand&apos;s index in the range [0, n-1], where n is from <ref refid="group__INS__INSPECTION_1ga68a9e9a74a8028c7563375be7c230f3a" kindref="member">INS_OperandCount()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the operand is just a source. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="265" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="265" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga98490395bafb6b8798494a36cd064f09" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandWrittenOnly</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandWrittenOnly</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells if an instruction operand is just a destination (and not a source).</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Operand&apos;s index in the range [0, n-1], where n is from <ref refid="group__INS__INSPECTION_1ga68a9e9a74a8028c7563375be7c230f3a" kindref="member">INS_OperandCount()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the operand is just a destination. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="276" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="276" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga3de89936066fff8ed6ade7aa8cdb8822" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_OperandReadAndWritten</definition>
        <argsstring>(INS ins, UINT32 n)</argsstring>
        <name>INS_OperandReadAndWritten</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type>UINT32</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Tells if an instruction operand is both a source and a destination.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">n</parametername>
</parameternamelist>
<parameterdescription>
<para>Operand&apos;s index in the range [0, n-1], where n is from <ref refid="group__INS__INSPECTION_1ga68a9e9a74a8028c7563375be7c230f3a" kindref="member">INS_OperandCount()</ref>.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>TRUE if the operand is both a source and a destination. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="287" column="13" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="287" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga09a517bd84de8e70d6bfbce932eeffbd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__REG_1ga8f899d7ad1af070aae505a85cc998fa5" kindref="member">REG</ref></type>
        <definition>REG INS_MaskRegister</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_MaskRegister</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the mask register used in the given instruction if such exist, REG_INVALID otherwise.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector instruction in question.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The mask register used in vector instruction, or REG_INVALID if no mask register is used. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32/operand_ia32.PH" line="296" column="12" declfile="Source/pin/core_ia32/operand_ia32.PH" declline="296" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga25e16efec6fbac076c3997797b320344" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsSyscall</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsSyscall</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Syscall information for Unix/x86 systems</para>
<para><simplesect kind="return"><para>true if the instruction is a system call </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32_u/ins_syscall_ia32_unix.PH" line="17" column="13" declfile="Source/pin/core_ia32_u/ins_syscall_ia32_unix.PH" declline="17" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaa1c865a7582fea271d50c67710349d06" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__INS__INSPECTION_1gaf903f1f8ddcb9710d191943763e6474a" kindref="member">SYSCALL_STANDARD</ref></type>
        <definition>SYSCALL_STANDARD INS_SyscallStd</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_SyscallStd</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Check to see if the given instruction is a system call and return corresponding calling standard. <simplesect kind="return"><para>calling standard of the system call instruction or SYSCALL_STANDARD_INVALID if the instruction is not a system call. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/core_ia32_u/ins_syscall_ia32_unix.PH" line="25" column="25" declfile="Source/pin/core_ia32_u/ins_syscall_ia32_unix.PH" declline="25" declcolumn="25"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaab0ca5b8bfb42ab0f3cef7f17d4153da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>RTN</type>
        <definition>RTN INS_Rtn</definition>
        <argsstring>(INS x)</argsstring>
        <name>INS_Rtn</name>
        <param>
          <type>INS</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Routine that contains this instruction</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="730" column="12" declfile="Source/pin/pin/image.PH" declline="730" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga41b5451478a4122627b6cd2eeda1a16c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INS</type>
        <definition>INS INS_Next</definition>
        <argsstring>(INS x)</argsstring>
        <name>INS_Next</name>
        <param>
          <type>INS</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Instruction that follows x, or <ref refid="group__INS__INSPECTION_1ga95ed2863ea5b8db8aaf5b06547beeba1" kindref="member">INS_Invalid()</ref> if x is the last in the rtn or trace</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="740" column="12" declfile="Source/pin/pin/image.PH" declline="740" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga8215f6ed3d87e4ba3b6c7f570a32459a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INS</type>
        <definition>INS INS_Prev</definition>
        <argsstring>(INS x)</argsstring>
        <name>INS_Prev</name>
        <param>
          <type>INS</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Instruction that precedes x, or <ref refid="group__INS__INSPECTION_1ga95ed2863ea5b8db8aaf5b06547beeba1" kindref="member">INS_Invalid()</ref> if x is the first in the rtn or trace</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="750" column="12" declfile="Source/pin/pin/image.PH" declline="750" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga95ed2863ea5b8db8aaf5b06547beeba1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>INS</type>
        <definition>INS INS_Invalid</definition>
        <argsstring>()</argsstring>
        <name>INS_Invalid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Invalid instruction used in iterators <ref refid="group__INS__INSPECTION_1ga8215f6ed3d87e4ba3b6c7f570a32459a" kindref="member">INS_Prev</ref> and <ref refid="group__INS__INSPECTION_1ga41b5451478a4122627b6cd2eeda1a16c" kindref="member">INS_Next</ref></para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="760" column="12" declfile="Source/pin/pin/image.PH" declline="760" declcolumn="12"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga09f3096b5ea86d2896bb6eef02890958" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_Valid</definition>
        <argsstring>(INS x)</argsstring>
        <name>INS_Valid</name>
        <param>
          <type>INS</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Invalid instruction used in iterators <ref refid="group__INS__INSPECTION_1ga8215f6ed3d87e4ba3b6c7f570a32459a" kindref="member">INS_Prev</ref> and <ref refid="group__INS__INSPECTION_1ga41b5451478a4122627b6cd2eeda1a16c" kindref="member">INS_Next</ref></para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="770" column="13" declfile="Source/pin/pin/image.PH" declline="770" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gab16f7dbf05bc9f916da996e8e6bd7bf8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT INS_Address</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_Address</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Address of instruction</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="780" column="16" declfile="Source/pin/pin/image.PH" declline="780" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga9658738a9670bafe1f7060ed131c2062" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>USIZE</type>
        <definition>USIZE INS_Size</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_Size</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Size of instruction in bytes </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="785" column="14" declfile="Source/pin/pin/image.PH" declline="785" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga2270a4a2dde88f77acbfdf065caada7c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>PIN_DEPRECATED_API ADDRINT</type>
        <definition>PIN_DEPRECATED_API ADDRINT INS_DirectBranchOrCallTargetAddress</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_DirectBranchOrCallTargetAddress</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>For direct branches or calls, the target address </para>
</simplesect>
<simplesect kind="note"><para>DEPRECATED: see <ref refid="group__INS__INSPECTION_1ga201b13c2d99e665a9758950d83c28bef" kindref="member">INS_DirectControlFlowTargetAddress()</ref> instead. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="791" column="35" declfile="Source/pin/pin/image.PH" declline="791" declcolumn="35"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga201b13c2d99e665a9758950d83c28bef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT INS_DirectControlFlowTargetAddress</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_DirectControlFlowTargetAddress</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the target address for direct control-flow instructions. must verify that <ref refid="group__INS__INSPECTION_1gaac6f6422ce76cfbaad86c7f432f818ab" kindref="member">INS_IsDirectControlFlow()</ref> is true before using this function. Refer to <ref refid="group__INS__INSPECTION_1ga308d89e7d9f39b8a0daf908778513457" kindref="member">INS_IsControlFlow()</ref> for more details on control-flow instructions. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="798" column="16" declfile="Source/pin/pin/image.PH" declline="798" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1ga13f921362eb07927951010f074677bcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ADDRINT</type>
        <definition>ADDRINT INS_NextAddress</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_NextAddress</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get the address of the next instruction. <simplesect kind="return"><para>Address of instruction that follows this one </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/image.PH" line="804" column="16" declfile="Source/pin/pin/image.PH" declline="804" declcolumn="16"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gaa31c7176d19d938c7f399ecc5bdc21b9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsAddedForFunctionReplacement</definition>
        <argsstring>(INS ins)</argsstring>
        <name>INS_IsAddedForFunctionReplacement</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Return TRUE if ins is not an original instruction in the application, but is an instruction added by Pin for doing function replacement. Pin allows you to even instrument these non-original instructions in JIT mode.</para>
<para><simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/pin_client.PH" line="712" column="13" declfile="Source/pin/pin/pin_client.PH" declline="712" declcolumn="13"/>
      </memberdef>
      <memberdef kind="function" id="group__INS__INSPECTION_1gacd61a39496ab833613206747e16d3fa7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>BOOL</type>
        <definition>BOOL INS_IsValidForIarg</definition>
        <argsstring>(INS ins, IARG_TYPE argType)</argsstring>
        <name>INS_IsValidForIarg</name>
        <param>
          <type>INS</type>
          <declname>ins</declname>
        </param>
        <param>
          <type><ref refid="group__INST__ARGS_1ga089c27ca15e9ff139dd3a3f8a6f8451d" kindref="member">IARG_TYPE</ref></type>
          <declname>argType</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This file contains functions that inspect instructions with regard to IARGs.</para>
<para>This function checks whether the IARG can be used with the instruction. Currently the supported IARGs are <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451da581b5886a7e69629a45607ac34adbf2c" kindref="member">IARG_MULTI_ELEMENT_OPERAND</ref> and <ref refid="group__INST__ARGS_1gga089c27ca15e9ff139dd3a3f8a6f8451daf366ff3d1e14bc23162ad18c47b63c1f" kindref="member">IARG_REWRITE_SCATTERED_MEMOP</ref>. For all other IARGs the function will return TRUE.</para>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">ins</parametername>
</parameternamelist>
<parameterdescription>
<para>The instruction to inspect </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">argType</parametername>
</parameternamelist>
<parameterdescription>
<para>The IARG_TYPE enum to use with the instruction</para>
</parameterdescription>
</parameteritem>
</parameterlist>
@Return true if the specified IARG type can be used in the specified instruction, false otherwise. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/vm/ins_iarg.PH" line="25" column="13" declfile="Source/pin/vm/ins_iarg.PH" declline="25" declcolumn="13"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Functions to examine IA-32 and Intel(R) 64 instructions.</para>
<para><simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
 <bold>O/S</bold>: Linux &amp; Windows<linebreak/>
 <bold>CPU:</bold> IA-32 and Intel(R) 64 architectures<linebreak/>
</para>
</simplesect>
</para>
    </detaileddescription>
  </compounddef>
</doxygen>
