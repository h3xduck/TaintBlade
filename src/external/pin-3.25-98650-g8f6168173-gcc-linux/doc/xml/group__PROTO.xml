<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="group__PROTO" kind="group">
    <compoundname>PROTO</compoundname>
    <title>PROTO API</title>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="group__PROTO_1gacfd9f3c8dc22310ce9b9152e8c61b17c" prot="public" static="no" strong="no">
        <type></type>
        <name>CALLINGSTD_TYPE</name>
        <enumvalue id="group__PROTO_1ggacfd9f3c8dc22310ce9b9152e8c61b17cab9356d1105eea97545e153f33f7ddf9b" prot="public">
          <name>CALLINGSTD_INVALID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1ggacfd9f3c8dc22310ce9b9152e8c61b17cab4426e3fd0882208f24ac3bca5b0391b" prot="public">
          <name>CALLINGSTD_DEFAULT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1ggacfd9f3c8dc22310ce9b9152e8c61b17caae01501d96beda18d920f567cd347e82" prot="public">
          <name>CALLINGSTD_CDECL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1ggacfd9f3c8dc22310ce9b9152e8c61b17cad031a7ce159fab9cb7b922f6d211b296" prot="public">
          <name>CALLINGSTD_REGPARMS</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1ggacfd9f3c8dc22310ce9b9152e8c61b17ca20ddf5750cf961e73eb62db9cfcc99d4" prot="public">
          <name>CALLINGSTD_STDCALL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1ggacfd9f3c8dc22310ce9b9152e8c61b17ca8aa22a3e1f6e806363a2781606a80214" prot="public">
          <name>CALLINGSTD_ART</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type of calling standards used for compiling the function. See <ref refid="group__PROTO_1gae01d20f7fd56e3eeebebe41009e7ff89" kindref="member">PROTO_Allocate()</ref> for its use. CALLINGSTD_DEFAULT is the default calling standard for the platform. This is the recommended option. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="513" column="1" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="512" bodyend="520"/>
      </memberdef>
      <memberdef kind="enum" id="group__PROTO_1ga59e26fa7c51d677aaac419e05bfb1305" prot="public" static="no" strong="no">
        <type></type>
        <name>PARG_TYPE</name>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305aa954d54f3565ad3166570fa6d5fcaee9" prot="public">
          <name>PARG_INVALID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305a6537308671c5d1f53e6408463d0ba423" prot="public">
          <name>PARG_POINTER</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305af570117ca6bea4d34c51e386af1a73cd" prot="public">
          <name>PARG_BOOL</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305ace0e239e4d394e187d1fb5a598ea15c0" prot="public">
          <name>PARG_CHAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305aec9f4f42942bcefea4a8eaa165526831" prot="public">
          <name>PARG_UCHAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305a36a97ecda7cf827e8c8bbcd52a4c2757" prot="public">
          <name>PARG_SCHAR</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305a8f1277c9d0965d22c8b9ccaea85284fc" prot="public">
          <name>PARG_SHORT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305aed0c924324e06d6ef2a3de3ddde46670" prot="public">
          <name>PARG_USHORT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305a7d4e81b067c9e4cedbc35116efee0140" prot="public">
          <name>PARG_INT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305a9507a20369a01428003476448a49223b" prot="public">
          <name>PARG_UINT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305ac92a60ffb8d07d2f599905a687d64ac3" prot="public">
          <name>PARG_LONG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305af88e35563f4175519b83f2ab2f4f6dae" prot="public">
          <name>PARG_ULONG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305ad2623e324b42a2b14c5bd9307815ce49" prot="public">
          <name>PARG_LONGLONG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305a42fd83683ea2c07dc490e0d86fc5fdef" prot="public">
          <name>PARG_ULONGLONG</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305ac1bfe771252ca23f5bdc4db35be092c6" prot="public">
          <name>PARG_FLOAT</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305a4b8726164b8111b40deaf9b59a30543c" prot="public">
          <name>PARG_DOUBLE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305aba08fc24bb059cc6c4fce984af45ca10" prot="public">
          <name>PARG_VOID</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305a8b439498c67756de41071309ece934ff" prot="public">
          <name>PARG_ENUM</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305afb290295f3604b3fdca915251bf298be" prot="public">
          <name>PARG_AGGREGATE</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="group__PROTO_1gga59e26fa7c51d677aaac419e05bfb1305a09bec200de31c6e492ffaff7f031490c" prot="public">
          <name>PARG_END</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Function prototype argument types. See <ref refid="group__PROTO_1gae01d20f7fd56e3eeebebe41009e7ff89" kindref="member">PROTO_Allocate()</ref> for its use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="528" column="1" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="527" bodyend="549"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__PROTO_1ga554ff954c3ea33bb537f30e3b500ef1c" prot="public" static="no">
        <type>PROTO_CLASS *</type>
        <definition>typedef PROTO_CLASS* PROTO</definition>
        <argsstring></argsstring>
        <name>PROTO</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>List of function prototype arguments. See <ref refid="group__PROTO_1gae01d20f7fd56e3eeebebe41009e7ff89" kindref="member">PROTO_Allocate()</ref> for its use. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="936" column="21" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="936" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__PROTO_1gae01d20f7fd56e3eeebebe41009e7ff89" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__PROTO_1ga554ff954c3ea33bb537f30e3b500ef1c" kindref="member">PROTO</ref></type>
        <definition>PROTO PROTO_Allocate</definition>
        <argsstring>(PARG_T returnArg, CALLINGSTD_TYPE cstype, const char *name,...)</argsstring>
        <name>PROTO_Allocate</name>
        <param>
          <type><ref refid="structPARG__T" kindref="compound">PARG_T</ref></type>
          <declname>returnArg</declname>
        </param>
        <param>
          <type><ref refid="group__PROTO_1gacfd9f3c8dc22310ce9b9152e8c61b17c" kindref="member">CALLINGSTD_TYPE</ref></type>
          <declname>cstype</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Allocate and initialize a function prototype. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>returnArg</parametername>
</parameternamelist>
<parameterdescription>
<para>The return argument type and size. See <ref refid="group__PROTO_1gacb4faa1f3649fce55756313c6259519f" kindref="member">PIN_PARG</ref>. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cstype</parametername>
</parameternamelist>
<parameterdescription>
<para>The calling standard used for compiling this function (CALLINGSTD_DEFAULT recommended). </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>name</parametername>
</parameternamelist>
<parameterdescription>
<para>The name of the function. </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>...</parametername>
</parameternamelist>
<parameterdescription>
<para>List of function argument type and size. See <ref refid="group__PROTO_1gacb4faa1f3649fce55756313c6259519f" kindref="member">PIN_PARG</ref> for the recommended method of passing function arguments. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>currently PARG_FLOAT, PARG_DOUBLE are supported as return type only and can not be used as function argument types. Any other PRG_* that does not fit in an integer register are not supported neither as function argument nor as return type of replacement functions.</para>
</simplesect>
<ref refid="group__PROTO_1gaeebb4a42707b704ebf214a06a6bf4e62" kindref="member">PIN_PARG_END()</ref> must end the argument list, even if the function has no arguments. <simplesect kind="return"><para>proto A pointer to a function prototype. This is an opaque type.</para>
</simplesect>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/opin_client.PH" line="296" column="14" declfile="Source/pin/pin/opin_client.PH" declline="296" declcolumn="14"/>
      </memberdef>
      <memberdef kind="function" id="group__PROTO_1gac85d3ff3845126b629d630f6f36eae70" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>VOID</type>
        <definition>VOID PROTO_Free</definition>
        <argsstring>(PROTO proto)</argsstring>
        <name>PROTO_Free</name>
        <param>
          <type><ref refid="group__PROTO_1ga554ff954c3ea33bb537f30e3b500ef1c" kindref="member">PROTO</ref></type>
          <declname>proto</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Free the specified function prototype. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>proto</parametername>
</parameternamelist>
<parameterdescription>
<para>A pointer to a function prototype.</para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="par"><title>Availability:</title><para><bold>Mode:</bold> JIT &amp; Probe<linebreak/>
<bold>O/S</bold>: Linux, Windows &amp; macOS*<linebreak/>
<bold>CPU:</bold> All<linebreak/>
</para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/pin/opin_client.PH" line="307" column="13" declfile="Source/pin/pin/opin_client.PH" declline="307" declcolumn="13"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__PROTO_1gacb4faa1f3649fce55756313c6259519f" prot="public" static="no">
        <name>PIN_PARG</name>
        <param><defname>t</defname></param>
        <initializer><ref refid="struct__PinPargClass" kindref="compound">_PinPargClass</ref>&lt; t &gt;::parg()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Macros used to simplify the passing of function prototype arguments. The macro will pass the type and size of each argument specified. When passing an argument to <ref refid="group__PROTO_1gae01d20f7fd56e3eeebebe41009e7ff89" kindref="member">PROTO_Allocate()</ref>, use these macros. As an example, <ref refid="group__PROTO_1gacb4faa1f3649fce55756313c6259519f" kindref="member">PIN_PARG(int)</ref> will pass the PARG_TYPE PARG_INT and the size of an integer to <ref refid="group__PROTO_1gae01d20f7fd56e3eeebebe41009e7ff89" kindref="member">PROTO_Allocate()</ref>. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="565" column="9" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="565" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__PROTO_1gaf8061627abf953100e29bd3f031ded2c" prot="public" static="no">
        <name>PIN_PARG_AGGREGATE</name>
        <param><defname>t</defname></param>
        <initializer>_PinParg(PARG_AGGREGATE, sizeof(t))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type and size of an aggregate in <ref refid="group__PROTO_1gae01d20f7fd56e3eeebebe41009e7ff89" kindref="member">PROTO_Allocate()</ref> See <ref refid="group__PROTO_1gacb4faa1f3649fce55756313c6259519f" kindref="member">PIN_PARG</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="572" column="9" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="572" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__PROTO_1ga3fbcb1f92a17fcc24febac0676165ca2" prot="public" static="no">
        <name>PIN_PARG_ENUM</name>
        <param><defname>t</defname></param>
        <initializer>_PinParg(PARG_ENUM, sizeof(t))</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Type and size of an enum in <ref refid="group__PROTO_1gae01d20f7fd56e3eeebebe41009e7ff89" kindref="member">PROTO_Allocate()</ref> See <ref refid="group__PROTO_1gacb4faa1f3649fce55756313c6259519f" kindref="member">PIN_PARG</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="579" column="9" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="579" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__PROTO_1gaeebb4a42707b704ebf214a06a6bf4e62" prot="public" static="no">
        <name>PIN_PARG_END</name>
        <param></param>
        <initializer>_PinParg(PARG_END, 0)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ends a list of arguments in <ref refid="group__PROTO_1gae01d20f7fd56e3eeebebe41009e7ff89" kindref="member">PROTO_Allocate()</ref> See <ref refid="group__PROTO_1gacb4faa1f3649fce55756313c6259519f" kindref="member">PIN_PARG</ref> </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Source/pin/include/types_vmapi.PH" line="586" column="9" bodyfile="Source/pin/include/types_vmapi.PH" bodystart="586" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>This API describes an application routine. </para>
    </detaileddescription>
  </compounddef>
</doxygen>
